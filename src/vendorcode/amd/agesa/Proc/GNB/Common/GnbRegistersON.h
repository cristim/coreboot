/**
 * @file
 *
 *  Register definitions
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e $Revision:$   @e $Date:$
 *
 */
/*
 *****************************************************************************
 *
 * Copyright (c) 2011, Advanced Micro Devices, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Advanced Micro Devices, Inc. nor the names of 
 *       its contributors may be used to endorse or promote products derived 
 *       from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ADVANCED MICRO DEVICES, INC. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * ***************************************************************************
 *
 */

#ifndef _GNBREGISTERSON_H_
#define _GNBREGISTERSON_H_
#define  D0F0      0x1
#define  D0F0x64   0x2
#define  D0F0x98   0x3
#define  D0F0xE4   0x5
#define  DxF0      0x6
#define  DxF0xE4   0x7
#define  D18F1     0xb
#define  D18F2     0xc
#define  D18F3     0xd
#define  D18F2x9C  0xe
#define  GMM       0x11
#ifndef WRAP_SPACE
  #define  WRAP_SPACE(w, x)   (0x01300000 | (w << 16) | (x))
#endif
#ifndef CORE_SPACE
  #define  CORE_SPACE(c, x)   (0x00010000 | (c << 24) | (x))
#endif
#ifndef PHY_SPACE
  #define  PHY_SPACE(w, p, x) (0x00200000 | ((p + 1) << 24) | (w << 16) | (x))
#endif
#ifndef  PIF_SPACE
  #define  PIF_SPACE(w, p, x) (0x00100000 | ((p + 1) << 24) | (w << 16) | (x))
#endif
// **** D0F0x00 Register Definition ****
// Address
#define D0F0x00_ADDRESS                                         0x0

// Type
#define D0F0x00_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x00_VendorID_OFFSET                                 0
#define D0F0x00_VendorID_WIDTH                                  16
#define D0F0x00_VendorID_MASK                                   0xffff
#define D0F0x00_DeviceID_OFFSET                                 16
#define D0F0x00_DeviceID_WIDTH                                  16
#define D0F0x00_DeviceID_MASK                                   0xffff0000

/// D0F0x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VendorID:16; ///<
    UINT32                                                 DeviceID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x00_STRUCT;

// **** D0F0x04 Register Definition ****
// Address
#define D0F0x04_ADDRESS                                         0x4

// Type
#define D0F0x04_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x04_IoAccessEn_OFFSET                               0
#define D0F0x04_IoAccessEn_WIDTH                                1
#define D0F0x04_IoAccessEn_MASK                                 0x1
#define D0F0x04_MemAccessEn_OFFSET                              1
#define D0F0x04_MemAccessEn_WIDTH                               1
#define D0F0x04_MemAccessEn_MASK                                0x2
#define D0F0x04_BusMasterEn_OFFSET                              2
#define D0F0x04_BusMasterEn_WIDTH                               1
#define D0F0x04_BusMasterEn_MASK                                0x4
#define D0F0x04_SpecialCycleEn_OFFSET                           3
#define D0F0x04_SpecialCycleEn_WIDTH                            1
#define D0F0x04_SpecialCycleEn_MASK                             0x8
#define D0F0x04_MemWriteInvalidateEn_OFFSET                     4
#define D0F0x04_MemWriteInvalidateEn_WIDTH                      1
#define D0F0x04_MemWriteInvalidateEn_MASK                       0x10
#define D0F0x04_PalSnoopEn_OFFSET                               5
#define D0F0x04_PalSnoopEn_WIDTH                                1
#define D0F0x04_PalSnoopEn_MASK                                 0x20
#define D0F0x04_ParityErrorEn_OFFSET                            6
#define D0F0x04_ParityErrorEn_WIDTH                             1
#define D0F0x04_ParityErrorEn_MASK                              0x40
#define D0F0x04_Reserved_7_7_OFFSET                             7
#define D0F0x04_Reserved_7_7_WIDTH                              1
#define D0F0x04_Reserved_7_7_MASK                               0x80
#define D0F0x04_SerrEn_OFFSET                                   8
#define D0F0x04_SerrEn_WIDTH                                    1
#define D0F0x04_SerrEn_MASK                                     0x100
#define D0F0x04_FastB2BEn_OFFSET                                9
#define D0F0x04_FastB2BEn_WIDTH                                 1
#define D0F0x04_FastB2BEn_MASK                                  0x200
#define D0F0x04_Reserved_19_10_OFFSET                           10
#define D0F0x04_Reserved_19_10_WIDTH                            10
#define D0F0x04_Reserved_19_10_MASK                             0xffc00
#define D0F0x04_CapList_OFFSET                                  20
#define D0F0x04_CapList_WIDTH                                   1
#define D0F0x04_CapList_MASK                                    0x100000
#define D0F0x04_PCI66En_OFFSET                                  21
#define D0F0x04_PCI66En_WIDTH                                   1
#define D0F0x04_PCI66En_MASK                                    0x200000
#define D0F0x04_Reserved_22_22_OFFSET                           22
#define D0F0x04_Reserved_22_22_WIDTH                            1
#define D0F0x04_Reserved_22_22_MASK                             0x400000
#define D0F0x04_FastBackCapable_OFFSET                          23
#define D0F0x04_FastBackCapable_WIDTH                           1
#define D0F0x04_FastBackCapable_MASK                            0x800000
#define D0F0x04_Reserved_24_24_OFFSET                           24
#define D0F0x04_Reserved_24_24_WIDTH                            1
#define D0F0x04_Reserved_24_24_MASK                             0x1000000
#define D0F0x04_DevselTiming_OFFSET                             25
#define D0F0x04_DevselTiming_WIDTH                              2
#define D0F0x04_DevselTiming_MASK                               0x6000000
#define D0F0x04_SignalTargetAbort_OFFSET                        27
#define D0F0x04_SignalTargetAbort_WIDTH                         1
#define D0F0x04_SignalTargetAbort_MASK                          0x8000000
#define D0F0x04_ReceivedTargetAbort_OFFSET                      28
#define D0F0x04_ReceivedTargetAbort_WIDTH                       1
#define D0F0x04_ReceivedTargetAbort_MASK                        0x10000000
#define D0F0x04_ReceivedMasterAbort_OFFSET                      29
#define D0F0x04_ReceivedMasterAbort_WIDTH                       1
#define D0F0x04_ReceivedMasterAbort_MASK                        0x20000000
#define D0F0x04_SignaledSystemError_OFFSET                      30
#define D0F0x04_SignaledSystemError_WIDTH                       1
#define D0F0x04_SignaledSystemError_MASK                        0x40000000
#define D0F0x04_ParityErrorDetected_OFFSET                      31
#define D0F0x04_ParityErrorDetected_WIDTH                       1
#define D0F0x04_ParityErrorDetected_MASK                        0x80000000

/// D0F0x04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               IoAccessEn:1 ; ///<
    UINT32                                              MemAccessEn:1 ; ///<This bit controls if memory accesses by this device are accepted or not.
    UINT32                                              BusMasterEn:1 ; ///<
    UINT32                                           SpecialCycleEn:1 ; ///<
    UINT32                                     MemWriteInvalidateEn:1 ; ///<
    UINT32                                               PalSnoopEn:1 ; ///<
    UINT32                                            ParityErrorEn:1 ; ///<
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                   SerrEn:1 ; ///<This bit controls if a vendor specific SERR message is sent to the FCH.
    UINT32                                                FastB2BEn:1 ; ///<
    UINT32                                           Reserved_19_10:10; ///<
    UINT32                                                  CapList:1 ; ///<
    UINT32                                                  PCI66En:1 ; ///<
    UINT32                                           Reserved_22_22:1 ; ///<
    UINT32                                          FastBackCapable:1 ; ///<
    UINT32                                           Reserved_24_24:1 ; ///<
    UINT32                                             DevselTiming:2 ; ///<
    UINT32                                        SignalTargetAbort:1 ; ///<
    UINT32                                      ReceivedTargetAbort:1 ; ///<
    UINT32                                      ReceivedMasterAbort:1 ; ///<
    UINT32                                      SignaledSystemError:1 ; ///<
    UINT32                                      ParityErrorDetected:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x04_STRUCT;

// **** D0F0x08 Register Definition ****
// Address
#define D0F0x08_ADDRESS                                         0x8

// Type
#define D0F0x08_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x08_RevID_OFFSET                                    0
#define D0F0x08_RevID_WIDTH                                     8
#define D0F0x08_RevID_MASK                                      0xff
#define D0F0x08_ClassCode_OFFSET                                8
#define D0F0x08_ClassCode_WIDTH                                 24
#define D0F0x08_ClassCode_MASK                                  0xffffff00

/// D0F0x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    RevID:8 ; ///<
    UINT32                                                ClassCode:24; ///<Provides the host bridge class code as defined in the PCI specification.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x08_STRUCT;

// **** D0F0x0C Register Definition ****
// Address
#define D0F0x0C_ADDRESS                                         0xc

// Type
#define D0F0x0C_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x0C_CacheLineSize_OFFSET                            0
#define D0F0x0C_CacheLineSize_WIDTH                             8
#define D0F0x0C_CacheLineSize_MASK                              0xff
#define D0F0x0C_LatencyTimer_OFFSET                             8
#define D0F0x0C_LatencyTimer_WIDTH                              8
#define D0F0x0C_LatencyTimer_MASK                               0xff00
#define D0F0x0C_HeaderTypeReg_OFFSET                            16
#define D0F0x0C_HeaderTypeReg_WIDTH                             8
#define D0F0x0C_HeaderTypeReg_MASK                              0xff0000
#define D0F0x0C_BIST_OFFSET                                     24
#define D0F0x0C_BIST_WIDTH                                      8
#define D0F0x0C_BIST_MASK                                       0xff000000

/// D0F0x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            CacheLineSize:8 ; ///<
    UINT32                                             LatencyTimer:8 ; ///<
    UINT32                                            HeaderTypeReg:8 ; ///<
    UINT32                                                     BIST:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x0C_STRUCT;

// **** D0F0x2C Register Definition ****
// Address
#define D0F0x2C_ADDRESS                                         0x2c

// Type
#define D0F0x2C_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x2C_SubsystemVendorID_OFFSET                        0
#define D0F0x2C_SubsystemVendorID_WIDTH                         16
#define D0F0x2C_SubsystemVendorID_MASK                          0xffff
#define D0F0x2C_SubsystemID_OFFSET                              16
#define D0F0x2C_SubsystemID_WIDTH                               16
#define D0F0x2C_SubsystemID_MASK                                0xffff0000

/// D0F0x2C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        SubsystemVendorID:16; ///<
    UINT32                                              SubsystemID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x2C_STRUCT;

// **** D0F0x34 Register Definition ****
// Address
#define D0F0x34_ADDRESS                                         0x34

// Type
#define D0F0x34_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x34_CapPtr_OFFSET                                   0
#define D0F0x34_CapPtr_WIDTH                                    8
#define D0F0x34_CapPtr_MASK                                     0xff
#define D0F0x34_Reserved_31_8_OFFSET                            8
#define D0F0x34_Reserved_31_8_WIDTH                             24
#define D0F0x34_Reserved_31_8_MASK                              0xffffff00

/// D0F0x34
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   CapPtr:8 ; ///<There is no capability list.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x34_STRUCT;

// **** D0F0x4C Register Definition ****
// Address
#define D0F0x4C_ADDRESS                                         0x4c

// Type
#define D0F0x4C_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x4C_Function1Enable_OFFSET                          0
#define D0F0x4C_Function1Enable_WIDTH                           1
#define D0F0x4C_Function1Enable_MASK                            0x1
#define D0F0x4C_ApicEnable_OFFSET                               1
#define D0F0x4C_ApicEnable_WIDTH                                1
#define D0F0x4C_ApicEnable_MASK                                 0x2
#define D0F0x4C_Reserved_2_2_OFFSET                             2
#define D0F0x4C_Reserved_2_2_WIDTH                              1
#define D0F0x4C_Reserved_2_2_MASK                               0x4
#define D0F0x4C_Cf8Dis_OFFSET                                   3
#define D0F0x4C_Cf8Dis_WIDTH                                    1
#define D0F0x4C_Cf8Dis_MASK                                     0x8
#define D0F0x4C_PMEDis_OFFSET                                   4
#define D0F0x4C_PMEDis_WIDTH                                    1
#define D0F0x4C_PMEDis_MASK                                     0x10
#define D0F0x4C_SerrDis_OFFSET                                  5
#define D0F0x4C_SerrDis_WIDTH                                   1
#define D0F0x4C_SerrDis_MASK                                    0x20
#define D0F0x4C_Reserved_10_6_OFFSET                            6
#define D0F0x4C_Reserved_10_6_WIDTH                             5
#define D0F0x4C_Reserved_10_6_MASK                              0x7c0
#define D0F0x4C_CRS_OFFSET                                      11
#define D0F0x4C_CRS_WIDTH                                       1
#define D0F0x4C_CRS_MASK                                        0x800
#define D0F0x4C_CfgRdTime_OFFSET                                12
#define D0F0x4C_CfgRdTime_WIDTH                                 3
#define D0F0x4C_CfgRdTime_MASK                                  0x7000
#define D0F0x4C_P2PDynamicClkOff_OFFSET                         15
#define D0F0x4C_P2PDynamicClkOff_WIDTH                          1
#define D0F0x4C_P2PDynamicClkOff_MASK                           0x8000
#define D0F0x4C_Reserved_22_16_OFFSET                           16
#define D0F0x4C_Reserved_22_16_WIDTH                            7
#define D0F0x4C_Reserved_22_16_MASK                             0x7f0000
#define D0F0x4C_MMIOEnable_OFFSET                               23
#define D0F0x4C_MMIOEnable_WIDTH                                1
#define D0F0x4C_MMIOEnable_MASK                                 0x800000
#define D0F0x4C_Reserved_25_24_OFFSET                           24
#define D0F0x4C_Reserved_25_24_WIDTH                            2
#define D0F0x4C_Reserved_25_24_MASK                             0x3000000
#define D0F0x4C_HPDis_OFFSET                                    26
#define D0F0x4C_HPDis_WIDTH                                     1
#define D0F0x4C_HPDis_MASK                                      0x4000000
#define D0F0x4C_Reserved_31_27_OFFSET                           27
#define D0F0x4C_Reserved_31_27_WIDTH                            5
#define D0F0x4C_Reserved_31_27_MASK                             0xf8000000

/// D0F0x4C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          Function1Enable:1 ; ///<
    UINT32                                               ApicEnable:1 ; ///<
    UINT32                                             Reserved_2_2:1 ; ///<
    UINT32                                                   Cf8Dis:1 ; ///<
    UINT32                                                   PMEDis:1 ; ///<
    UINT32                                                  SerrDis:1 ; ///< See 2.12.4.7 [SERR Message]
    UINT32                                            Reserved_10_6:5 ; ///<
    UINT32                                                      CRS:1 ; ///<
    UINT32                                                CfgRdTime:3 ; ///<Specifies the propagation delay for read data on the configuration bus.
    UINT32                                         P2PDynamicClkOff:1 ; ///<
    UINT32                                           Reserved_22_16:7 ; ///<
    UINT32                                               MMIOEnable:1 ; ///<
    UINT32                                           Reserved_25_24:2 ; ///<
    UINT32                                                    HPDis:1 ; ///<
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x4C_STRUCT;

// **** D0F0x60 Register Definition ****
// Address
#define D0F0x60_ADDRESS                                         0x60

// Type
#define D0F0x60_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x60_MiscIndAddr_OFFSET                              0
#define D0F0x60_MiscIndAddr_WIDTH                               7
#define D0F0x60_MiscIndAddr_MASK                                0x7f
#define D0F0x60_MiscIndWrEn_OFFSET                              7
#define D0F0x60_MiscIndWrEn_WIDTH                               1
#define D0F0x60_MiscIndWrEn_MASK                                0x80
#define D0F0x60_Reserved_31_8_OFFSET                            8
#define D0F0x60_Reserved_31_8_WIDTH                             24
#define D0F0x60_Reserved_31_8_MASK                              0xffffff00

/// D0F0x60
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              MiscIndAddr:7 ; ///<
    UINT32                                              MiscIndWrEn:1 ; ///<If set writes to D0F0x64 are enabled.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x60_STRUCT;

// **** D0F0x64 Register Definition ****
// Address
#define D0F0x64_ADDRESS                                         0x64

// Type
#define D0F0x64_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x64_MiscIndData_OFFSET                              0
#define D0F0x64_MiscIndData_WIDTH                               32
#define D0F0x64_MiscIndData_MASK                                0xffffffff

/// D0F0x64
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              MiscIndData:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_STRUCT;

// **** D0F0x78 Register Definition ****
// Address
#define D0F0x78_ADDRESS                                         0x78

// Type
#define D0F0x78_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x78_Scratch_OFFSET                                  0
#define D0F0x78_Scratch_WIDTH                                   32
#define D0F0x78_Scratch_MASK                                    0xffffffff

/// D0F0x78
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Scratch:32; ///<This register does not control any hardware.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x78_STRUCT;

// **** D0F0x7C Register Definition ****
// Address
#define D0F0x7C_ADDRESS                                         0x7c

// Type
#define D0F0x7C_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x7C_ForceIntGFXDisable_OFFSET                       0
#define D0F0x7C_ForceIntGFXDisable_WIDTH                        1
#define D0F0x7C_ForceIntGFXDisable_MASK                         0x1
#define D0F0x7C_Reserved_31_1_OFFSET                            1
#define D0F0x7C_Reserved_31_1_WIDTH                             31
#define D0F0x7C_Reserved_31_1_MASK                              0xfffffffe

/// D0F0x7C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       ForceIntGFXDisable:1 ; ///<Setting this bit disables bridge device 1 on bus 0 and all devices behind this bridge.
    UINT32                                            Reserved_31_1:31; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x7C_STRUCT;

// **** D0F0x84 Register Definition ****
// Address
#define D0F0x84_ADDRESS                                         0x84

// Type
#define D0F0x84_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x84_Reserved_3_0_OFFSET                             0
#define D0F0x84_Reserved_3_0_WIDTH                              4
#define D0F0x84_Reserved_3_0_MASK                               0xf
#define D0F0x84_Ev6Mode_OFFSET                                  4
#define D0F0x84_Ev6Mode_WIDTH                                   1
#define D0F0x84_Ev6Mode_MASK                                    0x10
#define D0F0x84__14MHole_OFFSET                                 5
#define D0F0x84__14MHole_WIDTH                                  1
#define D0F0x84__14MHole_MASK                                   0x20
#define D0F0x84__15MHole_OFFSET                                 6
#define D0F0x84__15MHole_WIDTH                                  1
#define D0F0x84__15MHole_MASK                                   0x40
#define D0F0x84_Reserved_7_7_OFFSET                             7
#define D0F0x84_Reserved_7_7_WIDTH                              1
#define D0F0x84_Reserved_7_7_MASK                               0x80
#define D0F0x84_PmeMode_OFFSET                                  8
#define D0F0x84_PmeMode_WIDTH                                   1
#define D0F0x84_PmeMode_MASK                                    0x100
#define D0F0x84_PmeTurnOff_OFFSET                               9
#define D0F0x84_PmeTurnOff_WIDTH                                1
#define D0F0x84_PmeTurnOff_MASK                                 0x200
#define D0F0x84_Reserved_11_10_OFFSET                           10
#define D0F0x84_Reserved_11_10_WIDTH                            2
#define D0F0x84_Reserved_11_10_MASK                             0xc00
#define D0F0x84_Reserved_12_12_OFFSET                           12
#define D0F0x84_Reserved_12_12_WIDTH                            1
#define D0F0x84_Reserved_12_12_MASK                             0x1000
#define D0F0x84_Reserved_23_13_OFFSET                           13
#define D0F0x84_Reserved_23_13_WIDTH                            11
#define D0F0x84_Reserved_23_13_MASK                             0xffe000
#define D0F0x84_Reserved_31_24_OFFSET                           24
#define D0F0x84_Reserved_31_24_WIDTH                            8
#define D0F0x84_Reserved_31_24_MASK                             0xff000000

/// D0F0x84
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                                  Ev6Mode:1 ; ///<
    UINT32                                                 _14MHole:1 ; ///<
    UINT32                                                 _15MHole:1 ; ///<
    UINT32                                             Reserved_7_7:1 ; ///<PmRegEn: BAR2 enable, not used.
    UINT32                                                  PmeMode:1 ; ///<
    UINT32                                               PmeTurnOff:1 ; ///<
    UINT32                                           Reserved_11_10:2 ; ///<
    UINT32                                           Reserved_12_12:1 ; ///<
    UINT32                                           Reserved_23_13:11; ///<
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x84_STRUCT;

// **** D0F0x90 Register Definition ****
// Address
#define D0F0x90_ADDRESS                                         0x90

// Type
#define D0F0x90_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x90_Reserved_22_0_OFFSET                            0
#define D0F0x90_Reserved_22_0_WIDTH                             23
#define D0F0x90_Reserved_22_0_MASK                              0x7fffff
#define D0F0x90_TopOfDram_OFFSET                                23
#define D0F0x90_TopOfDram_WIDTH                                 9
#define D0F0x90_TopOfDram_MASK                                  0xff800000

/// D0F0x90
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_22_0:23; ///<
    UINT32                                                TopOfDram:9 ; ///<Specifies the address that divides between MMIO and DRAM. From TopOfDram to 4G is MMIO; below TopOfDram is DRAM. See 2.4.3 [Access Type Determination].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x90_STRUCT;

// **** D0F0x94 Register Definition ****
// Address
#define D0F0x94_ADDRESS                                         0x94

// Type
#define D0F0x94_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x94_OrbIndAddr_OFFSET                               0
#define D0F0x94_OrbIndAddr_WIDTH                                7
#define D0F0x94_OrbIndAddr_MASK                                 0x7f
#define D0F0x94_Reserved_7_7_OFFSET                             7
#define D0F0x94_Reserved_7_7_WIDTH                              1
#define D0F0x94_Reserved_7_7_MASK                               0x80
#define D0F0x94_OrbIndWrEn_OFFSET                               8
#define D0F0x94_OrbIndWrEn_WIDTH                                1
#define D0F0x94_OrbIndWrEn_MASK                                 0x100
#define D0F0x94_Reserved_31_9_OFFSET                            9
#define D0F0x94_Reserved_31_9_WIDTH                             23
#define D0F0x94_Reserved_31_9_MASK                              0xfffffe00

/// D0F0x94
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               OrbIndAddr:7 ; ///<
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                               OrbIndWrEn:1 ; ///<
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x94_STRUCT;

// **** D0F0x98 Register Definition ****
// Address
#define D0F0x98_ADDRESS                                         0x98

// Type
#define D0F0x98_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0x98_OrbIndData_OFFSET                               0
#define D0F0x98_OrbIndData_WIDTH                                32
#define D0F0x98_OrbIndData_MASK                                 0xffffffff

/// D0F0x98
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               OrbIndData:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_STRUCT;

// **** D0F0xE0 Register Definition ****
// Address
#define D0F0xE0_ADDRESS                                         0xe0

// Type
#define D0F0xE0_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0xE0_PcieIndxAddr_OFFSET                             0
#define D0F0xE0_PcieIndxAddr_WIDTH                              16
#define D0F0xE0_PcieIndxAddr_MASK                               0xffff
#define D0F0xE0_FrameType_OFFSET                                16
#define D0F0xE0_FrameType_WIDTH                                 8
#define D0F0xE0_FrameType_MASK                                  0xff0000
#define D0F0xE0_BlockSelect_OFFSET                              24
#define D0F0xE0_BlockSelect_WIDTH                               8
#define D0F0xE0_BlockSelect_MASK                                0xff000000

/// D0F0xE0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             PcieIndxAddr:16; ///<
    UINT32                                                FrameType:8 ; ///<This field is used to select the type of register block to access.
    UINT32                                              BlockSelect:8 ; ///<This field is used to select the specific register block to access.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE0_STRUCT;

// **** D0F0xE4 Register Definition ****
// Address
#define D0F0xE4_ADDRESS                                         0xe4

// Type
#define D0F0xE4_TYPE                                            TYPE_D0F0
// Field Data
#define D0F0xE4_PcieIndxData_OFFSET                             0
#define D0F0xE4_PcieIndxData_WIDTH                              32
#define D0F0xE4_PcieIndxData_MASK                               0xffffffff

/// D0F0xE4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             PcieIndxData:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_STRUCT;

// **** D18F1x00 Register Definition ****
// Address
#define D18F1x00_ADDRESS                                        0x0

// Type
#define D18F1x00_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x00_VendorID_OFFSET                                0
#define D18F1x00_VendorID_WIDTH                                 16
#define D18F1x00_VendorID_MASK                                  0xffff
#define D18F1x00_DeviceID_OFFSET                                16
#define D18F1x00_DeviceID_WIDTH                                 16
#define D18F1x00_DeviceID_MASK                                  0xffff0000

/// D18F1x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VendorID:16; ///<
    UINT32                                                 DeviceID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x00_STRUCT;

// **** D18F1x04 Register Definition ****
// Address
#define D18F1x04_ADDRESS                                        0x4

// Type
#define D18F1x04_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x04_Command_OFFSET                                 0
#define D18F1x04_Command_WIDTH                                  16
#define D18F1x04_Command_MASK                                   0xffff
#define D18F1x04_Status_OFFSET                                  16
#define D18F1x04_Status_WIDTH                                   16
#define D18F1x04_Status_MASK                                    0xffff0000

/// D18F1x04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Command:16; ///<
    UINT32                                                   Status:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x04_STRUCT;

// **** D18F1x08 Register Definition ****
// Address
#define D18F1x08_ADDRESS                                        0x8

// Type
#define D18F1x08_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x08_RevID_OFFSET                                   0
#define D18F1x08_RevID_WIDTH                                    8
#define D18F1x08_RevID_MASK                                     0xff
#define D18F1x08_ClassCode_OFFSET                               8
#define D18F1x08_ClassCode_WIDTH                                24
#define D18F1x08_ClassCode_MASK                                 0xffffff00

/// D18F1x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    RevID:8 ; ///<Processor revision.
    UINT32                                                ClassCode:24; ///<Provides the host bridge class code as defined in the PCI specification.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x08_STRUCT;

// **** D18F1x0C Register Definition ****
// Address
#define D18F1x0C_ADDRESS                                        0xc

// Type
#define D18F1x0C_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x0C_HeaderTypeReg_OFFSET                           0
#define D18F1x0C_HeaderTypeReg_WIDTH                            32
#define D18F1x0C_HeaderTypeReg_MASK                             0xffffffff

/// D18F1x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            HeaderTypeReg:32; ///<The header type field indicates that there are multiple functions present in this device.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x0C_STRUCT;

// **** D18F1x34 Register Definition ****
// Address
#define D18F1x34_ADDRESS                                        0x34

// Type
#define D18F1x34_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x34_CapPtr_OFFSET                                  0
#define D18F1x34_CapPtr_WIDTH                                   8
#define D18F1x34_CapPtr_MASK                                    0xff
#define D18F1x34_Reserved_31_8_OFFSET                           8
#define D18F1x34_Reserved_31_8_WIDTH                            24
#define D18F1x34_Reserved_31_8_MASK                             0xffffff00

/// D18F1x34
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   CapPtr:8 ; ///<
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x34_STRUCT;

// **** D18F1x40 Register Definition ****
// Address
#define D18F1x40_ADDRESS                                        0x40

// Type
#define D18F1x40_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x40_RE_OFFSET                                      0
#define D18F1x40_RE_WIDTH                                       1
#define D18F1x40_RE_MASK                                        0x1
#define D18F1x40_WE_OFFSET                                      1
#define D18F1x40_WE_WIDTH                                       1
#define D18F1x40_WE_MASK                                        0x2
#define D18F1x40_Reserved_15_2_OFFSET                           2
#define D18F1x40_Reserved_15_2_WIDTH                            14
#define D18F1x40_Reserved_15_2_MASK                             0xfffc
#define D18F1x40_DramBase_35_24__OFFSET                         16
#define D18F1x40_DramBase_35_24__WIDTH                          12
#define D18F1x40_DramBase_35_24__MASK                           0xfff0000
#define D18F1x40_Reserved_31_28_OFFSET                          28
#define D18F1x40_Reserved_31_28_WIDTH                           4
#define D18F1x40_Reserved_31_28_MASK                            0xf0000000

/// D18F1x40
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                            Reserved_15_2:14; ///<
    UINT32                                          DramBase_35_24_:12; ///<
    UINT32                                           Reserved_31_28:4 ; ///<DramBase[39:36].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x40_STRUCT;

// **** D18F1x44 Register Definition ****
// Address
#define D18F1x44_ADDRESS                                        0x44

// Type
#define D18F1x44_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x44_Reserved_15_0_OFFSET                           0
#define D18F1x44_Reserved_15_0_WIDTH                            16
#define D18F1x44_Reserved_15_0_MASK                             0xffff
#define D18F1x44_DramLimit_35_24__OFFSET                        16
#define D18F1x44_DramLimit_35_24__WIDTH                         12
#define D18F1x44_DramLimit_35_24__MASK                          0xfff0000
#define D18F1x44_DramLimit_39_36__OFFSET                        28
#define D18F1x44_DramLimit_39_36__WIDTH                         4
#define D18F1x44_DramLimit_39_36__MASK                          0xf0000000

/// D18F1x44
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_15_0:16; ///<
    UINT32                                         DramLimit_35_24_:12; ///<
    UINT32                                         DramLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x44_STRUCT;

// **** D18F1x80 Register Definition ****
// Address
#define D18F1x80_ADDRESS                                        0x80

// Type
#define D18F1x80_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x80_RE_OFFSET                                      0
#define D18F1x80_RE_WIDTH                                       1
#define D18F1x80_RE_MASK                                        0x1
#define D18F1x80_WE_OFFSET                                      1
#define D18F1x80_WE_WIDTH                                       1
#define D18F1x80_WE_MASK                                        0x2
#define D18F1x80_CpuDis_OFFSET                                  2
#define D18F1x80_CpuDis_WIDTH                                   1
#define D18F1x80_CpuDis_MASK                                    0x4
#define D18F1x80_Lock_OFFSET                                    3
#define D18F1x80_Lock_WIDTH                                     1
#define D18F1x80_Lock_MASK                                      0x8
#define D18F1x80_Reserved_7_4_OFFSET                            4
#define D18F1x80_Reserved_7_4_WIDTH                             4
#define D18F1x80_Reserved_7_4_MASK                              0xf0
#define D18F1x80_MMIOBase_35_16__OFFSET                         8
#define D18F1x80_MMIOBase_35_16__WIDTH                          20
#define D18F1x80_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1x80_MMIOBase_39_36__OFFSET                         28
#define D18F1x80_MMIOBase_39_36__WIDTH                          4
#define D18F1x80_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1x80
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x80_STRUCT;

// **** D18F1x84 Register Definition ****
// Address
#define D18F1x84_ADDRESS                                        0x84

// Type
#define D18F1x84_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x84_Reserved_6_0_OFFSET                            0
#define D18F1x84_Reserved_6_0_WIDTH                             7
#define D18F1x84_Reserved_6_0_MASK                              0x7f
#define D18F1x84_NP_OFFSET                                      7
#define D18F1x84_NP_WIDTH                                       1
#define D18F1x84_NP_MASK                                        0x80
#define D18F1x84_MMIOLimit_35_16__OFFSET                        8
#define D18F1x84_MMIOLimit_35_16__WIDTH                         20
#define D18F1x84_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1x84_MMIOLimit_39_36__OFFSET                        28
#define D18F1x84_MMIOLimit_39_36__WIDTH                         4
#define D18F1x84_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1x84
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x84_STRUCT;

// **** D18F1x88 Register Definition ****
// Address
#define D18F1x88_ADDRESS                                        0x88

// Type
#define D18F1x88_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x88_RE_OFFSET                                      0
#define D18F1x88_RE_WIDTH                                       1
#define D18F1x88_RE_MASK                                        0x1
#define D18F1x88_WE_OFFSET                                      1
#define D18F1x88_WE_WIDTH                                       1
#define D18F1x88_WE_MASK                                        0x2
#define D18F1x88_CpuDis_OFFSET                                  2
#define D18F1x88_CpuDis_WIDTH                                   1
#define D18F1x88_CpuDis_MASK                                    0x4
#define D18F1x88_Lock_OFFSET                                    3
#define D18F1x88_Lock_WIDTH                                     1
#define D18F1x88_Lock_MASK                                      0x8
#define D18F1x88_Reserved_7_4_OFFSET                            4
#define D18F1x88_Reserved_7_4_WIDTH                             4
#define D18F1x88_Reserved_7_4_MASK                              0xf0
#define D18F1x88_MMIOBase_35_16__OFFSET                         8
#define D18F1x88_MMIOBase_35_16__WIDTH                          20
#define D18F1x88_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1x88_MMIOBase_39_36__OFFSET                         28
#define D18F1x88_MMIOBase_39_36__WIDTH                          4
#define D18F1x88_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1x88
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x88_STRUCT;

// **** D18F1x8C Register Definition ****
// Address
#define D18F1x8C_ADDRESS                                        0x8c

// Type
#define D18F1x8C_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x8C_Reserved_6_0_OFFSET                            0
#define D18F1x8C_Reserved_6_0_WIDTH                             7
#define D18F1x8C_Reserved_6_0_MASK                              0x7f
#define D18F1x8C_NP_OFFSET                                      7
#define D18F1x8C_NP_WIDTH                                       1
#define D18F1x8C_NP_MASK                                        0x80
#define D18F1x8C_MMIOLimit_35_16__OFFSET                        8
#define D18F1x8C_MMIOLimit_35_16__WIDTH                         20
#define D18F1x8C_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1x8C_MMIOLimit_39_36__OFFSET                        28
#define D18F1x8C_MMIOLimit_39_36__WIDTH                         4
#define D18F1x8C_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1x8C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x8C_STRUCT;

// **** D18F1x90 Register Definition ****
// Address
#define D18F1x90_ADDRESS                                        0x90

// Type
#define D18F1x90_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x90_RE_OFFSET                                      0
#define D18F1x90_RE_WIDTH                                       1
#define D18F1x90_RE_MASK                                        0x1
#define D18F1x90_WE_OFFSET                                      1
#define D18F1x90_WE_WIDTH                                       1
#define D18F1x90_WE_MASK                                        0x2
#define D18F1x90_CpuDis_OFFSET                                  2
#define D18F1x90_CpuDis_WIDTH                                   1
#define D18F1x90_CpuDis_MASK                                    0x4
#define D18F1x90_Lock_OFFSET                                    3
#define D18F1x90_Lock_WIDTH                                     1
#define D18F1x90_Lock_MASK                                      0x8
#define D18F1x90_Reserved_7_4_OFFSET                            4
#define D18F1x90_Reserved_7_4_WIDTH                             4
#define D18F1x90_Reserved_7_4_MASK                              0xf0
#define D18F1x90_MMIOBase_35_16__OFFSET                         8
#define D18F1x90_MMIOBase_35_16__WIDTH                          20
#define D18F1x90_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1x90_MMIOBase_39_36__OFFSET                         28
#define D18F1x90_MMIOBase_39_36__WIDTH                          4
#define D18F1x90_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1x90
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x90_STRUCT;

// **** D18F1x94 Register Definition ****
// Address
#define D18F1x94_ADDRESS                                        0x94

// Type
#define D18F1x94_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x94_Reserved_6_0_OFFSET                            0
#define D18F1x94_Reserved_6_0_WIDTH                             7
#define D18F1x94_Reserved_6_0_MASK                              0x7f
#define D18F1x94_NP_OFFSET                                      7
#define D18F1x94_NP_WIDTH                                       1
#define D18F1x94_NP_MASK                                        0x80
#define D18F1x94_MMIOLimit_35_16__OFFSET                        8
#define D18F1x94_MMIOLimit_35_16__WIDTH                         20
#define D18F1x94_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1x94_MMIOLimit_39_36__OFFSET                        28
#define D18F1x94_MMIOLimit_39_36__WIDTH                         4
#define D18F1x94_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1x94
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x94_STRUCT;

// **** D18F1x98 Register Definition ****
// Address
#define D18F1x98_ADDRESS                                        0x98

// Type
#define D18F1x98_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x98_RE_OFFSET                                      0
#define D18F1x98_RE_WIDTH                                       1
#define D18F1x98_RE_MASK                                        0x1
#define D18F1x98_WE_OFFSET                                      1
#define D18F1x98_WE_WIDTH                                       1
#define D18F1x98_WE_MASK                                        0x2
#define D18F1x98_CpuDis_OFFSET                                  2
#define D18F1x98_CpuDis_WIDTH                                   1
#define D18F1x98_CpuDis_MASK                                    0x4
#define D18F1x98_Lock_OFFSET                                    3
#define D18F1x98_Lock_WIDTH                                     1
#define D18F1x98_Lock_MASK                                      0x8
#define D18F1x98_Reserved_7_4_OFFSET                            4
#define D18F1x98_Reserved_7_4_WIDTH                             4
#define D18F1x98_Reserved_7_4_MASK                              0xf0
#define D18F1x98_MMIOBase_35_16__OFFSET                         8
#define D18F1x98_MMIOBase_35_16__WIDTH                          20
#define D18F1x98_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1x98_MMIOBase_39_36__OFFSET                         28
#define D18F1x98_MMIOBase_39_36__WIDTH                          4
#define D18F1x98_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1x98
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x98_STRUCT;

// **** D18F1x9C Register Definition ****
// Address
#define D18F1x9C_ADDRESS                                        0x9c

// Type
#define D18F1x9C_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1x9C_Reserved_6_0_OFFSET                            0
#define D18F1x9C_Reserved_6_0_WIDTH                             7
#define D18F1x9C_Reserved_6_0_MASK                              0x7f
#define D18F1x9C_NP_OFFSET                                      7
#define D18F1x9C_NP_WIDTH                                       1
#define D18F1x9C_NP_MASK                                        0x80
#define D18F1x9C_MMIOLimit_35_16__OFFSET                        8
#define D18F1x9C_MMIOLimit_35_16__WIDTH                         20
#define D18F1x9C_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1x9C_MMIOLimit_39_36__OFFSET                        28
#define D18F1x9C_MMIOLimit_39_36__WIDTH                         4
#define D18F1x9C_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1x9C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1x9C_STRUCT;

// **** D18F1xA0 Register Definition ****
// Address
#define D18F1xA0_ADDRESS                                        0xa0

// Type
#define D18F1xA0_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xA0_RE_OFFSET                                      0
#define D18F1xA0_RE_WIDTH                                       1
#define D18F1xA0_RE_MASK                                        0x1
#define D18F1xA0_WE_OFFSET                                      1
#define D18F1xA0_WE_WIDTH                                       1
#define D18F1xA0_WE_MASK                                        0x2
#define D18F1xA0_CpuDis_OFFSET                                  2
#define D18F1xA0_CpuDis_WIDTH                                   1
#define D18F1xA0_CpuDis_MASK                                    0x4
#define D18F1xA0_Lock_OFFSET                                    3
#define D18F1xA0_Lock_WIDTH                                     1
#define D18F1xA0_Lock_MASK                                      0x8
#define D18F1xA0_Reserved_7_4_OFFSET                            4
#define D18F1xA0_Reserved_7_4_WIDTH                             4
#define D18F1xA0_Reserved_7_4_MASK                              0xf0
#define D18F1xA0_MMIOBase_35_16__OFFSET                         8
#define D18F1xA0_MMIOBase_35_16__WIDTH                          20
#define D18F1xA0_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1xA0_MMIOBase_39_36__OFFSET                         28
#define D18F1xA0_MMIOBase_39_36__WIDTH                          4
#define D18F1xA0_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1xA0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xA0_STRUCT;

// **** D18F1xA4 Register Definition ****
// Address
#define D18F1xA4_ADDRESS                                        0xa4

// Type
#define D18F1xA4_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xA4_Reserved_6_0_OFFSET                            0
#define D18F1xA4_Reserved_6_0_WIDTH                             7
#define D18F1xA4_Reserved_6_0_MASK                              0x7f
#define D18F1xA4_NP_OFFSET                                      7
#define D18F1xA4_NP_WIDTH                                       1
#define D18F1xA4_NP_MASK                                        0x80
#define D18F1xA4_MMIOLimit_35_16__OFFSET                        8
#define D18F1xA4_MMIOLimit_35_16__WIDTH                         20
#define D18F1xA4_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1xA4_MMIOLimit_39_36__OFFSET                        28
#define D18F1xA4_MMIOLimit_39_36__WIDTH                         4
#define D18F1xA4_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1xA4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xA4_STRUCT;

// **** D18F1xA8 Register Definition ****
// Address
#define D18F1xA8_ADDRESS                                        0xa8

// Type
#define D18F1xA8_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xA8_RE_OFFSET                                      0
#define D18F1xA8_RE_WIDTH                                       1
#define D18F1xA8_RE_MASK                                        0x1
#define D18F1xA8_WE_OFFSET                                      1
#define D18F1xA8_WE_WIDTH                                       1
#define D18F1xA8_WE_MASK                                        0x2
#define D18F1xA8_CpuDis_OFFSET                                  2
#define D18F1xA8_CpuDis_WIDTH                                   1
#define D18F1xA8_CpuDis_MASK                                    0x4
#define D18F1xA8_Lock_OFFSET                                    3
#define D18F1xA8_Lock_WIDTH                                     1
#define D18F1xA8_Lock_MASK                                      0x8
#define D18F1xA8_Reserved_7_4_OFFSET                            4
#define D18F1xA8_Reserved_7_4_WIDTH                             4
#define D18F1xA8_Reserved_7_4_MASK                              0xf0
#define D18F1xA8_MMIOBase_35_16__OFFSET                         8
#define D18F1xA8_MMIOBase_35_16__WIDTH                          20
#define D18F1xA8_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1xA8_MMIOBase_39_36__OFFSET                         28
#define D18F1xA8_MMIOBase_39_36__WIDTH                          4
#define D18F1xA8_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1xA8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xA8_STRUCT;

// **** D18F1xAC Register Definition ****
// Address
#define D18F1xAC_ADDRESS                                        0xac

// Type
#define D18F1xAC_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xAC_Reserved_6_0_OFFSET                            0
#define D18F1xAC_Reserved_6_0_WIDTH                             7
#define D18F1xAC_Reserved_6_0_MASK                              0x7f
#define D18F1xAC_NP_OFFSET                                      7
#define D18F1xAC_NP_WIDTH                                       1
#define D18F1xAC_NP_MASK                                        0x80
#define D18F1xAC_MMIOLimit_35_16__OFFSET                        8
#define D18F1xAC_MMIOLimit_35_16__WIDTH                         20
#define D18F1xAC_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1xAC_MMIOLimit_39_36__OFFSET                        28
#define D18F1xAC_MMIOLimit_39_36__WIDTH                         4
#define D18F1xAC_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1xAC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xAC_STRUCT;

// **** D18F1xB0 Register Definition ****
// Address
#define D18F1xB0_ADDRESS                                        0xb0

// Type
#define D18F1xB0_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xB0_RE_OFFSET                                      0
#define D18F1xB0_RE_WIDTH                                       1
#define D18F1xB0_RE_MASK                                        0x1
#define D18F1xB0_WE_OFFSET                                      1
#define D18F1xB0_WE_WIDTH                                       1
#define D18F1xB0_WE_MASK                                        0x2
#define D18F1xB0_CpuDis_OFFSET                                  2
#define D18F1xB0_CpuDis_WIDTH                                   1
#define D18F1xB0_CpuDis_MASK                                    0x4
#define D18F1xB0_Lock_OFFSET                                    3
#define D18F1xB0_Lock_WIDTH                                     1
#define D18F1xB0_Lock_MASK                                      0x8
#define D18F1xB0_Reserved_7_4_OFFSET                            4
#define D18F1xB0_Reserved_7_4_WIDTH                             4
#define D18F1xB0_Reserved_7_4_MASK                              0xf0
#define D18F1xB0_MMIOBase_35_16__OFFSET                         8
#define D18F1xB0_MMIOBase_35_16__WIDTH                          20
#define D18F1xB0_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1xB0_MMIOBase_39_36__OFFSET                         28
#define D18F1xB0_MMIOBase_39_36__WIDTH                          4
#define D18F1xB0_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1xB0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xB0_STRUCT;

// **** D18F1xB4 Register Definition ****
// Address
#define D18F1xB4_ADDRESS                                        0xb4

// Type
#define D18F1xB4_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xB4_Reserved_6_0_OFFSET                            0
#define D18F1xB4_Reserved_6_0_WIDTH                             7
#define D18F1xB4_Reserved_6_0_MASK                              0x7f
#define D18F1xB4_NP_OFFSET                                      7
#define D18F1xB4_NP_WIDTH                                       1
#define D18F1xB4_NP_MASK                                        0x80
#define D18F1xB4_MMIOLimit_35_16__OFFSET                        8
#define D18F1xB4_MMIOLimit_35_16__WIDTH                         20
#define D18F1xB4_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1xB4_MMIOLimit_39_36__OFFSET                        28
#define D18F1xB4_MMIOLimit_39_36__WIDTH                         4
#define D18F1xB4_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1xB4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xB4_STRUCT;

// **** D18F1xB8 Register Definition ****
// Address
#define D18F1xB8_ADDRESS                                        0xb8

// Type
#define D18F1xB8_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xB8_RE_OFFSET                                      0
#define D18F1xB8_RE_WIDTH                                       1
#define D18F1xB8_RE_MASK                                        0x1
#define D18F1xB8_WE_OFFSET                                      1
#define D18F1xB8_WE_WIDTH                                       1
#define D18F1xB8_WE_MASK                                        0x2
#define D18F1xB8_CpuDis_OFFSET                                  2
#define D18F1xB8_CpuDis_WIDTH                                   1
#define D18F1xB8_CpuDis_MASK                                    0x4
#define D18F1xB8_Lock_OFFSET                                    3
#define D18F1xB8_Lock_WIDTH                                     1
#define D18F1xB8_Lock_MASK                                      0x8
#define D18F1xB8_Reserved_7_4_OFFSET                            4
#define D18F1xB8_Reserved_7_4_WIDTH                             4
#define D18F1xB8_Reserved_7_4_MASK                              0xf0
#define D18F1xB8_MMIOBase_35_16__OFFSET                         8
#define D18F1xB8_MMIOBase_35_16__WIDTH                          20
#define D18F1xB8_MMIOBase_35_16__MASK                           0xfffff00
#define D18F1xB8_MMIOBase_39_36__OFFSET                         28
#define D18F1xB8_MMIOBase_39_36__WIDTH                          4
#define D18F1xB8_MMIOBase_39_36__MASK                           0xf0000000

/// D18F1xB8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///< IO accesses ignore the state of this bit.
    UINT32                                                     Lock:1 ; ///< WE or RE in this register must be set in order for this to take effect.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                          MMIOBase_35_16_:20; ///<
    UINT32                                          MMIOBase_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xB8_STRUCT;

// **** D18F1xBC Register Definition ****
// Address
#define D18F1xBC_ADDRESS                                        0xbc

// Type
#define D18F1xBC_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xBC_Reserved_6_0_OFFSET                            0
#define D18F1xBC_Reserved_6_0_WIDTH                             7
#define D18F1xBC_Reserved_6_0_MASK                              0x7f
#define D18F1xBC_NP_OFFSET                                      7
#define D18F1xBC_NP_WIDTH                                       1
#define D18F1xBC_NP_MASK                                        0x80
#define D18F1xBC_MMIOLimit_35_16__OFFSET                        8
#define D18F1xBC_MMIOLimit_35_16__WIDTH                         20
#define D18F1xBC_MMIOLimit_35_16__MASK                          0xfffff00
#define D18F1xBC_MMIOLimit_39_36__OFFSET                        28
#define D18F1xBC_MMIOLimit_39_36__WIDTH                         4
#define D18F1xBC_MMIOLimit_39_36__MASK                          0xf0000000

/// D18F1xBC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                       NP:1 ; ///< This may be used to force writes to be non-posted for MMIO regions which map to the legacy ISA/LPC bus, or in conjunction with D18F0x68 [Link Transaction Control][DsNpReqLmt] in order to allow downstream CPU requests to be counted and thereby limited to a specified number. This latter use of the NP bit may be used to avoid loop deadlock scenarios in systems that implement a region in an IO device that reflects downstream accesses back upstream. See the link specification summary of deadlock scenarios for more information. This bit does not affect requests that come from the link (the virtual channel of the request is specified by the link request). If two MMIO ranges target the same IO device and the NP bit is set differently in both ranges, unexpected transaction ordering effects are possible. In particular, using PCI- and IO-link-defined producer-consumer semantics, if a producer (e.g., the processor) writes data using a non-posted MMIO range followed by a flag to a posted MMIO range, then it is possible for the device to see the flag updated before the data is updated.
    UINT32                                         MMIOLimit_35_16_:20; ///<
    UINT32                                         MMIOLimit_39_36_:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xBC_STRUCT;

// **** D18F1xC0 Register Definition ****
// Address
#define D18F1xC0_ADDRESS                                        0xc0

// Type
#define D18F1xC0_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xC0_RE_OFFSET                                      0
#define D18F1xC0_RE_WIDTH                                       1
#define D18F1xC0_RE_MASK                                        0x1
#define D18F1xC0_WE_OFFSET                                      1
#define D18F1xC0_WE_WIDTH                                       1
#define D18F1xC0_WE_MASK                                        0x2
#define D18F1xC0_Reserved_3_2_OFFSET                            2
#define D18F1xC0_Reserved_3_2_WIDTH                             2
#define D18F1xC0_Reserved_3_2_MASK                              0xc
#define D18F1xC0_VE_OFFSET                                      4
#define D18F1xC0_VE_WIDTH                                       1
#define D18F1xC0_VE_MASK                                        0x10
#define D18F1xC0_IE_OFFSET                                      5
#define D18F1xC0_IE_WIDTH                                       1
#define D18F1xC0_IE_MASK                                        0x20
#define D18F1xC0_Reserved_11_6_OFFSET                           6
#define D18F1xC0_Reserved_11_6_WIDTH                            6
#define D18F1xC0_Reserved_11_6_MASK                             0xfc0
#define D18F1xC0_IOBase_24_12__OFFSET                           12
#define D18F1xC0_IOBase_24_12__WIDTH                            13
#define D18F1xC0_IOBase_24_12__MASK                             0x1fff000
#define D18F1xC0_Reserved_31_25_OFFSET                          25
#define D18F1xC0_Reserved_31_25_WIDTH                           7
#define D18F1xC0_Reserved_31_25_MASK                            0xfe000000

/// D18F1xC0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       RE:1 ; ///<
    UINT32                                                       WE:1 ; ///<
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                                       VE:1 ; ///< These include IO accesses in which address bits[9:0] range from 3B0h to 3BBh or 3C0h to 3DFh (address bits[15:10] are not decoded); this only applies to the first 64K of IO space; i.e., address bits[24:16] must be low). The MMIO range associated with the VGA enable bit in the PCI specification is not included in the VE bit definition; to map this range to a link, see D18F1xF4 [VGA Enable]. When D18F1xF4[VE] is set, the state of this bit is ignored.
    UINT32                                                       IE:1 ; ///<
    UINT32                                            Reserved_11_6:6 ; ///<
    UINT32                                            IOBase_24_12_:13; ///<
    UINT32                                           Reserved_31_25:7 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xC0_STRUCT;

// **** D18F1xC4 Register Definition ****
// Address
#define D18F1xC4_ADDRESS                                        0xc4

// Type
#define D18F1xC4_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xC4_Reserved_11_0_OFFSET                           0
#define D18F1xC4_Reserved_11_0_WIDTH                            12
#define D18F1xC4_Reserved_11_0_MASK                             0xfff
#define D18F1xC4_IOLimit_24_12__OFFSET                          12
#define D18F1xC4_IOLimit_24_12__WIDTH                           13
#define D18F1xC4_IOLimit_24_12__MASK                            0x1fff000
#define D18F1xC4_Reserved_31_25_OFFSET                          25
#define D18F1xC4_Reserved_31_25_WIDTH                           7
#define D18F1xC4_Reserved_31_25_MASK                            0xfe000000

/// D18F1xC4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_11_0:12; ///<
    UINT32                                           IOLimit_24_12_:13; ///<
    UINT32                                           Reserved_31_25:7 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xC4_STRUCT;

// **** D18F1xF0 Register Definition ****
// Address
#define D18F1xF0_ADDRESS                                        0xf0

// Type
#define D18F1xF0_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xF0_DramHoleValid_OFFSET                           0
#define D18F1xF0_DramHoleValid_WIDTH                            1
#define D18F1xF0_DramHoleValid_MASK                             0x1
#define D18F1xF0_Reserved_6_1_OFFSET                            1
#define D18F1xF0_Reserved_6_1_WIDTH                             6
#define D18F1xF0_Reserved_6_1_MASK                              0x7e
#define D18F1xF0_DramHoleOffset_31_23__OFFSET                   7
#define D18F1xF0_DramHoleOffset_31_23__WIDTH                    9
#define D18F1xF0_DramHoleOffset_31_23__MASK                     0xff80
#define D18F1xF0_Reserved_23_16_OFFSET                          16
#define D18F1xF0_Reserved_23_16_WIDTH                           8
#define D18F1xF0_Reserved_23_16_MASK                            0xff0000
#define D18F1xF0_DramHoleBase_31_24__OFFSET                     24
#define D18F1xF0_DramHoleBase_31_24__WIDTH                      8
#define D18F1xF0_DramHoleBase_31_24__MASK                       0xff000000

/// D18F1xF0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DramHoleValid:1 ; ///< See 2.10.6 [Memory Hoisting] for additional programming information.
    UINT32                                             Reserved_6_1:6 ; ///<
    UINT32                                    DramHoleOffset_31_23_:9 ; ///<When memory hosting is enabled, this value is subtracted from the physical address of certain transactions before being passed to the DCT. The transactions affected are all access addresses above FFFF_FFFFh (4GB-1).
    UINT32                                           Reserved_23_16:8 ; ///<
    UINT32                                      DramHoleBase_31_24_:8 ; ///< This specifies the base address of the IO hole, below the 4G address level, that is used in memory hoisting. Normally, DramHoleBase >= MSRC001_001A[TOM[31:24]]. DramHoleBase must be > 0. See 2.10.6 [Memory Hoisting] for additional programming information.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xF0_STRUCT;

// **** D18F1xF4 Register Definition ****
// Address
#define D18F1xF4_ADDRESS                                        0xf4

// Type
#define D18F1xF4_TYPE                                           TYPE_D18F1
// Field Data
#define D18F1xF4_VE_OFFSET                                      0
#define D18F1xF4_VE_WIDTH                                       1
#define D18F1xF4_VE_MASK                                        0x1
#define D18F1xF4_NP_OFFSET                                      1
#define D18F1xF4_NP_WIDTH                                       1
#define D18F1xF4_NP_MASK                                        0x2
#define D18F1xF4_CpuDis_OFFSET                                  2
#define D18F1xF4_CpuDis_WIDTH                                   1
#define D18F1xF4_CpuDis_MASK                                    0x4
#define D18F1xF4_Lock_OFFSET                                    3
#define D18F1xF4_Lock_WIDTH                                     1
#define D18F1xF4_Lock_MASK                                      0x8
#define D18F1xF4_Reserved_31_4_OFFSET                           4
#define D18F1xF4_Reserved_31_4_WIDTH                            28
#define D18F1xF4_Reserved_31_4_MASK                             0xfffffff0

/// D18F1xF4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       VE:1 ; ///< The VGA-compatible address space is: (1) the MMIO range A_0000h through B_FFFFh; (2) IO-space accesses in which address bits[9:0] range from 3B0h to 3BBh or 3C0h to 3DFh (address bits[15:10] are not decoded; this only applies to the first 64K of IO space; i.e., address bits[24:16] must be low). An MMIO range (F1x[BC:80]) must not overlap the VGA-compatible address space when F1xF4[VE]=1. UBTS #15529 When this bit is set, the state of D18F1xC0[VE] is ignored.
    UINT32                                                       NP:1 ; ///<
    UINT32                                                   CpuDis:1 ; ///<e., CPU accesses to this range are treated as if the VE=0.
    UINT32                                                     Lock:1 ; ///<
    UINT32                                            Reserved_31_4:28; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F1xF4_STRUCT;

// **** D18F2x00 Register Definition ****
// Address
#define D18F2x00_ADDRESS                                        0x0

// Type
#define D18F2x00_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x00_VendorID_OFFSET                                0
#define D18F2x00_VendorID_WIDTH                                 16
#define D18F2x00_VendorID_MASK                                  0xffff
#define D18F2x00_DeviceID_OFFSET                                16
#define D18F2x00_DeviceID_WIDTH                                 16
#define D18F2x00_DeviceID_MASK                                  0xffff0000

/// D18F2x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VendorID:16; ///<
    UINT32                                                 DeviceID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x00_STRUCT;

// **** D18F2x04 Register Definition ****
// Address
#define D18F2x04_ADDRESS                                        0x4

// Type
#define D18F2x04_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x04_Command_OFFSET                                 0
#define D18F2x04_Command_WIDTH                                  16
#define D18F2x04_Command_MASK                                   0xffff
#define D18F2x04_Status_OFFSET                                  16
#define D18F2x04_Status_WIDTH                                   16
#define D18F2x04_Status_MASK                                    0xffff0000

/// D18F2x04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Command:16; ///<
    UINT32                                                   Status:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x04_STRUCT;

// **** D18F2x08 Register Definition ****
// Address
#define D18F2x08_ADDRESS                                        0x8

// Type
#define D18F2x08_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x08_RevID_OFFSET                                   0
#define D18F2x08_RevID_WIDTH                                    8
#define D18F2x08_RevID_MASK                                     0xff
#define D18F2x08_ClassCode_OFFSET                               8
#define D18F2x08_ClassCode_WIDTH                                24
#define D18F2x08_ClassCode_MASK                                 0xffffff00

/// D18F2x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    RevID:8 ; ///<
    UINT32                                                ClassCode:24; ///<Provides the host bridge class code as defined in the PCI specification.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x08_STRUCT;

// **** D18F2x0C Register Definition ****
// Address
#define D18F2x0C_ADDRESS                                        0xc

// Type
#define D18F2x0C_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x0C_HeaderTypeReg_OFFSET                           0
#define D18F2x0C_HeaderTypeReg_WIDTH                            32
#define D18F2x0C_HeaderTypeReg_MASK                             0xffffffff

/// D18F2x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            HeaderTypeReg:32; ///<The header type field indicates that there are multiple functions present in this device.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x0C_STRUCT;

// **** D18F2x34 Register Definition ****
// Address
#define D18F2x34_ADDRESS                                        0x34

// Type
#define D18F2x34_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x34_CapPtr_OFFSET                                  0
#define D18F2x34_CapPtr_WIDTH                                   8
#define D18F2x34_CapPtr_MASK                                    0xff
#define D18F2x34_Reserved_31_8_OFFSET                           8
#define D18F2x34_Reserved_31_8_WIDTH                            24
#define D18F2x34_Reserved_31_8_MASK                             0xffffff00

/// D18F2x34
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   CapPtr:8 ; ///<
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x34_STRUCT;

// **** D18F2x40 Register Definition ****
// Address
#define D18F2x40_ADDRESS                                        0x40

// Type
#define D18F2x40_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x40_CSEnable_OFFSET                                0
#define D18F2x40_CSEnable_WIDTH                                 1
#define D18F2x40_CSEnable_MASK                                  0x1
#define D18F2x40_Reserved_1_1_OFFSET                            1
#define D18F2x40_Reserved_1_1_WIDTH                             1
#define D18F2x40_Reserved_1_1_MASK                              0x2
#define D18F2x40_TestFail_OFFSET                                2
#define D18F2x40_TestFail_WIDTH                                 1
#define D18F2x40_TestFail_MASK                                  0x4
#define D18F2x40_OnDimmMirror_OFFSET                            3
#define D18F2x40_OnDimmMirror_WIDTH                             1
#define D18F2x40_OnDimmMirror_MASK                              0x8
#define D18F2x40_Reserved_4_4_OFFSET                            4
#define D18F2x40_Reserved_4_4_WIDTH                             1
#define D18F2x40_Reserved_4_4_MASK                              0x10
#define D18F2x40_BaseAddr_21_13__OFFSET                         5
#define D18F2x40_BaseAddr_21_13__WIDTH                          9
#define D18F2x40_BaseAddr_21_13__MASK                           0x3fe0
#define D18F2x40_Reserved_18_14_OFFSET                          14
#define D18F2x40_Reserved_18_14_WIDTH                           5
#define D18F2x40_Reserved_18_14_MASK                            0x7c000
#define D18F2x40_BaseAddr_35_27__OFFSET                         19
#define D18F2x40_BaseAddr_35_27__WIDTH                          9
#define D18F2x40_BaseAddr_35_27__MASK                           0xff80000
#define D18F2x40_Reserved_28_28_OFFSET                          28
#define D18F2x40_Reserved_28_28_WIDTH                           1
#define D18F2x40_Reserved_28_28_MASK                            0x10000000
#define D18F2x40_Reserved_31_29_OFFSET                          29
#define D18F2x40_Reserved_31_29_WIDTH                           3
#define D18F2x40_Reserved_31_29_MASK                            0xe0000000

/// D18F2x40
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_1_1:1 ; ///<
    UINT32                                                 TestFail:1 ; ///< Set by BIOS to indicate that a rank is present but has failed memory training or a memory consistency test, indicating that the memory is bad. BIOS should treat CSEnable=1 and TestFail=1 as mutually exclusive.
    UINT32                                             OnDimmMirror:1 ; ///< This mode accounts for routing on the DIMM. This bit is expected to be set for the odd numbered rank of unbuffered DDR3 DIMMs if SPD byte 63 indicates that address mapping is mirrored. Hardware bit swapping does not occur for commands sent via D18F2x7C[SendMrsCmd] when D18F2x7C[EnDramInit] = 0. See 2.10.4.6.2.1 [DDR3 MR Initialization]. The following bits are swapped when enabled: M[B, A]_BANK[0] and M[B, A]_BANK[1]. M[B, A]_ADD[3] and M[B, A]_ADD[4]. M[B, A]_ADD[5] and M[B, A]_ADD[6]. M[B, A]_ADD[7] and M[B, A]_ADD[8]. This bit must be programmed properly before initializing the DRAM devices.
    UINT32                                             Reserved_4_4:1 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///< BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x40_STRUCT;

// **** D18F2x44 Register Definition ****
// Address
#define D18F2x44_ADDRESS                                        0x44

// Type
#define D18F2x44_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x44_CSEnable_OFFSET                                0
#define D18F2x44_CSEnable_WIDTH                                 1
#define D18F2x44_CSEnable_MASK                                  0x1
#define D18F2x44_Reserved_1_1_OFFSET                            1
#define D18F2x44_Reserved_1_1_WIDTH                             1
#define D18F2x44_Reserved_1_1_MASK                              0x2
#define D18F2x44_TestFail_OFFSET                                2
#define D18F2x44_TestFail_WIDTH                                 1
#define D18F2x44_TestFail_MASK                                  0x4
#define D18F2x44_OnDimmMirror_OFFSET                            3
#define D18F2x44_OnDimmMirror_WIDTH                             1
#define D18F2x44_OnDimmMirror_MASK                              0x8
#define D18F2x44_Reserved_4_4_OFFSET                            4
#define D18F2x44_Reserved_4_4_WIDTH                             1
#define D18F2x44_Reserved_4_4_MASK                              0x10
#define D18F2x44_BaseAddr_21_13__OFFSET                         5
#define D18F2x44_BaseAddr_21_13__WIDTH                          9
#define D18F2x44_BaseAddr_21_13__MASK                           0x3fe0
#define D18F2x44_Reserved_18_14_OFFSET                          14
#define D18F2x44_Reserved_18_14_WIDTH                           5
#define D18F2x44_Reserved_18_14_MASK                            0x7c000
#define D18F2x44_BaseAddr_35_27__OFFSET                         19
#define D18F2x44_BaseAddr_35_27__WIDTH                          9
#define D18F2x44_BaseAddr_35_27__MASK                           0xff80000
#define D18F2x44_Reserved_28_28_OFFSET                          28
#define D18F2x44_Reserved_28_28_WIDTH                           1
#define D18F2x44_Reserved_28_28_MASK                            0x10000000
#define D18F2x44_Reserved_31_29_OFFSET                          29
#define D18F2x44_Reserved_31_29_WIDTH                           3
#define D18F2x44_Reserved_31_29_MASK                            0xe0000000

/// D18F2x44
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_1_1:1 ; ///<
    UINT32                                                 TestFail:1 ; ///< Set by BIOS to indicate that a rank is present but has failed memory training or a memory consistency test, indicating that the memory is bad. BIOS should treat CSEnable=1 and TestFail=1 as mutually exclusive.
    UINT32                                             OnDimmMirror:1 ; ///< This mode accounts for routing on the DIMM. This bit is expected to be set for the odd numbered rank of unbuffered DDR3 DIMMs if SPD byte 63 indicates that address mapping is mirrored. Hardware bit swapping does not occur for commands sent via D18F2x7C[SendMrsCmd] when D18F2x7C[EnDramInit] = 0. See 2.10.4.6.2.1 [DDR3 MR Initialization]. The following bits are swapped when enabled: M[B, A]_BANK[0] and M[B, A]_BANK[1]. M[B, A]_ADD[3] and M[B, A]_ADD[4]. M[B, A]_ADD[5] and M[B, A]_ADD[6]. M[B, A]_ADD[7] and M[B, A]_ADD[8]. This bit must be programmed properly before initializing the DRAM devices.
    UINT32                                             Reserved_4_4:1 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///< BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x44_STRUCT;

// **** D18F2x48 Register Definition ****
// Address
#define D18F2x48_ADDRESS                                        0x48

// Type
#define D18F2x48_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x48_CSEnable_OFFSET                                0
#define D18F2x48_CSEnable_WIDTH                                 1
#define D18F2x48_CSEnable_MASK                                  0x1
#define D18F2x48_Reserved_1_1_OFFSET                            1
#define D18F2x48_Reserved_1_1_WIDTH                             1
#define D18F2x48_Reserved_1_1_MASK                              0x2
#define D18F2x48_TestFail_OFFSET                                2
#define D18F2x48_TestFail_WIDTH                                 1
#define D18F2x48_TestFail_MASK                                  0x4
#define D18F2x48_OnDimmMirror_OFFSET                            3
#define D18F2x48_OnDimmMirror_WIDTH                             1
#define D18F2x48_OnDimmMirror_MASK                              0x8
#define D18F2x48_Reserved_4_4_OFFSET                            4
#define D18F2x48_Reserved_4_4_WIDTH                             1
#define D18F2x48_Reserved_4_4_MASK                              0x10
#define D18F2x48_BaseAddr_21_13__OFFSET                         5
#define D18F2x48_BaseAddr_21_13__WIDTH                          9
#define D18F2x48_BaseAddr_21_13__MASK                           0x3fe0
#define D18F2x48_Reserved_18_14_OFFSET                          14
#define D18F2x48_Reserved_18_14_WIDTH                           5
#define D18F2x48_Reserved_18_14_MASK                            0x7c000
#define D18F2x48_BaseAddr_35_27__OFFSET                         19
#define D18F2x48_BaseAddr_35_27__WIDTH                          9
#define D18F2x48_BaseAddr_35_27__MASK                           0xff80000
#define D18F2x48_Reserved_28_28_OFFSET                          28
#define D18F2x48_Reserved_28_28_WIDTH                           1
#define D18F2x48_Reserved_28_28_MASK                            0x10000000
#define D18F2x48_Reserved_31_29_OFFSET                          29
#define D18F2x48_Reserved_31_29_WIDTH                           3
#define D18F2x48_Reserved_31_29_MASK                            0xe0000000

/// D18F2x48
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_1_1:1 ; ///<
    UINT32                                                 TestFail:1 ; ///< Set by BIOS to indicate that a rank is present but has failed memory training or a memory consistency test, indicating that the memory is bad. BIOS should treat CSEnable=1 and TestFail=1 as mutually exclusive.
    UINT32                                             OnDimmMirror:1 ; ///< This mode accounts for routing on the DIMM. This bit is expected to be set for the odd numbered rank of unbuffered DDR3 DIMMs if SPD byte 63 indicates that address mapping is mirrored. Hardware bit swapping does not occur for commands sent via D18F2x7C[SendMrsCmd] when D18F2x7C[EnDramInit] = 0. See 2.10.4.6.2.1 [DDR3 MR Initialization]. The following bits are swapped when enabled: M[B, A]_BANK[0] and M[B, A]_BANK[1]. M[B, A]_ADD[3] and M[B, A]_ADD[4]. M[B, A]_ADD[5] and M[B, A]_ADD[6]. M[B, A]_ADD[7] and M[B, A]_ADD[8]. This bit must be programmed properly before initializing the DRAM devices.
    UINT32                                             Reserved_4_4:1 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///< BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x48_STRUCT;

// **** D18F2x4C Register Definition ****
// Address
#define D18F2x4C_ADDRESS                                        0x4c

// Type
#define D18F2x4C_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x4C_CSEnable_OFFSET                                0
#define D18F2x4C_CSEnable_WIDTH                                 1
#define D18F2x4C_CSEnable_MASK                                  0x1
#define D18F2x4C_Reserved_1_1_OFFSET                            1
#define D18F2x4C_Reserved_1_1_WIDTH                             1
#define D18F2x4C_Reserved_1_1_MASK                              0x2
#define D18F2x4C_TestFail_OFFSET                                2
#define D18F2x4C_TestFail_WIDTH                                 1
#define D18F2x4C_TestFail_MASK                                  0x4
#define D18F2x4C_OnDimmMirror_OFFSET                            3
#define D18F2x4C_OnDimmMirror_WIDTH                             1
#define D18F2x4C_OnDimmMirror_MASK                              0x8
#define D18F2x4C_Reserved_4_4_OFFSET                            4
#define D18F2x4C_Reserved_4_4_WIDTH                             1
#define D18F2x4C_Reserved_4_4_MASK                              0x10
#define D18F2x4C_BaseAddr_21_13__OFFSET                         5
#define D18F2x4C_BaseAddr_21_13__WIDTH                          9
#define D18F2x4C_BaseAddr_21_13__MASK                           0x3fe0
#define D18F2x4C_Reserved_18_14_OFFSET                          14
#define D18F2x4C_Reserved_18_14_WIDTH                           5
#define D18F2x4C_Reserved_18_14_MASK                            0x7c000
#define D18F2x4C_BaseAddr_35_27__OFFSET                         19
#define D18F2x4C_BaseAddr_35_27__WIDTH                          9
#define D18F2x4C_BaseAddr_35_27__MASK                           0xff80000
#define D18F2x4C_Reserved_28_28_OFFSET                          28
#define D18F2x4C_Reserved_28_28_WIDTH                           1
#define D18F2x4C_Reserved_28_28_MASK                            0x10000000
#define D18F2x4C_Reserved_31_29_OFFSET                          29
#define D18F2x4C_Reserved_31_29_WIDTH                           3
#define D18F2x4C_Reserved_31_29_MASK                            0xe0000000

/// D18F2x4C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_1_1:1 ; ///<
    UINT32                                                 TestFail:1 ; ///< Set by BIOS to indicate that a rank is present but has failed memory training or a memory consistency test, indicating that the memory is bad. BIOS should treat CSEnable=1 and TestFail=1 as mutually exclusive.
    UINT32                                             OnDimmMirror:1 ; ///< This mode accounts for routing on the DIMM. This bit is expected to be set for the odd numbered rank of unbuffered DDR3 DIMMs if SPD byte 63 indicates that address mapping is mirrored. Hardware bit swapping does not occur for commands sent via D18F2x7C[SendMrsCmd] when D18F2x7C[EnDramInit] = 0. See 2.10.4.6.2.1 [DDR3 MR Initialization]. The following bits are swapped when enabled: M[B, A]_BANK[0] and M[B, A]_BANK[1]. M[B, A]_ADD[3] and M[B, A]_ADD[4]. M[B, A]_ADD[5] and M[B, A]_ADD[6]. M[B, A]_ADD[7] and M[B, A]_ADD[8]. This bit must be programmed properly before initializing the DRAM devices.
    UINT32                                             Reserved_4_4:1 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///< BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x4C_STRUCT;

// **** D18F2x60 Register Definition ****
// Address
#define D18F2x60_ADDRESS                                        0x60

// Type
#define D18F2x60_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x60_Reserved_4_0_OFFSET                            0
#define D18F2x60_Reserved_4_0_WIDTH                             5
#define D18F2x60_Reserved_4_0_MASK                              0x1f
#define D18F2x60_AddrMask_21_13__OFFSET                         5
#define D18F2x60_AddrMask_21_13__WIDTH                          9
#define D18F2x60_AddrMask_21_13__MASK                           0x3fe0
#define D18F2x60_Reserved_18_14_OFFSET                          14
#define D18F2x60_Reserved_18_14_WIDTH                           5
#define D18F2x60_Reserved_18_14_MASK                            0x7c000
#define D18F2x60_AddrMask_35_27__OFFSET                         19
#define D18F2x60_AddrMask_35_27__WIDTH                          9
#define D18F2x60_AddrMask_35_27__MASK                           0xff80000
#define D18F2x60_Reserved_28_28_OFFSET                          28
#define D18F2x60_Reserved_28_28_WIDTH                           1
#define D18F2x60_Reserved_28_28_MASK                            0x10000000
#define D18F2x60_Reserved_31_29_OFFSET                          29
#define D18F2x60_Reserved_31_29_WIDTH                           3
#define D18F2x60_Reserved_31_29_MASK                            0xe0000000

/// D18F2x60
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                          AddrMask_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          AddrMask_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///< AddrMask[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x60_STRUCT;

// **** D18F2x64 Register Definition ****
// Address
#define D18F2x64_ADDRESS                                        0x64

// Type
#define D18F2x64_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x64_Reserved_4_0_OFFSET                            0
#define D18F2x64_Reserved_4_0_WIDTH                             5
#define D18F2x64_Reserved_4_0_MASK                              0x1f
#define D18F2x64_AddrMask_21_13__OFFSET                         5
#define D18F2x64_AddrMask_21_13__WIDTH                          9
#define D18F2x64_AddrMask_21_13__MASK                           0x3fe0
#define D18F2x64_Reserved_18_14_OFFSET                          14
#define D18F2x64_Reserved_18_14_WIDTH                           5
#define D18F2x64_Reserved_18_14_MASK                            0x7c000
#define D18F2x64_AddrMask_35_27__OFFSET                         19
#define D18F2x64_AddrMask_35_27__WIDTH                          9
#define D18F2x64_AddrMask_35_27__MASK                           0xff80000
#define D18F2x64_Reserved_28_28_OFFSET                          28
#define D18F2x64_Reserved_28_28_WIDTH                           1
#define D18F2x64_Reserved_28_28_MASK                            0x10000000
#define D18F2x64_Reserved_31_29_OFFSET                          29
#define D18F2x64_Reserved_31_29_WIDTH                           3
#define D18F2x64_Reserved_31_29_MASK                            0xe0000000

/// D18F2x64
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                          AddrMask_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          AddrMask_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///< AddrMask[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x64_STRUCT;

// **** D18F2x78 Register Definition ****
// Address
#define D18F2x78_ADDRESS                                        0x78

// Type
#define D18F2x78_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x78_RdPtrInit_OFFSET                               0
#define D18F2x78_RdPtrInit_WIDTH                                4
#define D18F2x78_RdPtrInit_MASK                                 0xf
#define D18F2x78_Reserved_5_4_OFFSET                            4
#define D18F2x78_Reserved_5_4_WIDTH                             2
#define D18F2x78_Reserved_5_4_MASK                              0x30
#define D18F2x78_RxPtrInitReq_OFFSET                            6
#define D18F2x78_RxPtrInitReq_WIDTH                             1
#define D18F2x78_RxPtrInitReq_MASK                              0x40
#define D18F2x78_TxPtrInitReq_OFFSET                            7
#define D18F2x78_TxPtrInitReq_WIDTH                             1
#define D18F2x78_TxPtrInitReq_MASK                              0x80
#define D18F2x78_Twrrd_3_2__OFFSET                              8
#define D18F2x78_Twrrd_3_2__WIDTH                               2
#define D18F2x78_Twrrd_3_2__MASK                                0x300
#define D18F2x78_Twrwr_3_2__OFFSET                              10
#define D18F2x78_Twrwr_3_2__WIDTH                               2
#define D18F2x78_Twrwr_3_2__MASK                                0xc00
#define D18F2x78_Trdrd_3_2__OFFSET                              12
#define D18F2x78_Trdrd_3_2__WIDTH                               2
#define D18F2x78_Trdrd_3_2__MASK                                0x3000
#define D18F2x78_Reserved_16_14_OFFSET                          14
#define D18F2x78_Reserved_16_14_WIDTH                           3
#define D18F2x78_Reserved_16_14_MASK                            0x1c000
#define D18F2x78_AddrCmdTriEn_OFFSET                            17
#define D18F2x78_AddrCmdTriEn_WIDTH                             1
#define D18F2x78_AddrCmdTriEn_MASK                              0x20000
#define D18F2x78_DqsRcvEnTrain_OFFSET                           18
#define D18F2x78_DqsRcvEnTrain_WIDTH                            1
#define D18F2x78_DqsRcvEnTrain_MASK                             0x40000
#define D18F2x78_Reserved_19_19_OFFSET                          19
#define D18F2x78_Reserved_19_19_WIDTH                           1
#define D18F2x78_Reserved_19_19_MASK                            0x80000
#define D18F2x78_ForceCasToSlot0_OFFSET                         20
#define D18F2x78_ForceCasToSlot0_WIDTH                          1
#define D18F2x78_ForceCasToSlot0_MASK                           0x100000
#define D18F2x78_DisCutThroughMode_OFFSET                       21
#define D18F2x78_DisCutThroughMode_WIDTH                        1
#define D18F2x78_DisCutThroughMode_MASK                         0x200000
#define D18F2x78_MaxRdLatency_OFFSET                            22
#define D18F2x78_MaxRdLatency_WIDTH                             10
#define D18F2x78_MaxRdLatency_MASK                              0xffc00000

/// D18F2x78
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                RdPtrInit:4 ; ///<There is a synchronization FIFO between the NB clock domain and the memory clock domain. This field specifies where the read pointer is placed at the time of FIFO initialization. This field along with D18F2x94[MemClkFreq] gives an offset from the minimum read to write pointer separation as follows: IF (D18F2x94[MemClkFreq] >= 667MHz) THEN BitsDefinition 0000bMinimum separation + 1.0 MEMCLKs 0001bMinimum separation + 0.5 MEMCLK 0010bMinimum separation 1110b-0011bReserved 1111bIF (D18F2xA8[DbeGskMemClkAlignMode]==01b) THEN Reserved ELSE Minimum separation + 1.5 MEMCLKs ENDIF. ELSE BitsDefinition 0000bIF (D18F2xA8[DbeGskMemClkAlignMode]==01b) THEN Reserved ELSE Minimum separation + 1.5 MEMCLKs ENDIF. 0001bMinimum separation + 1.0 MEMCLKs 0010bMinimum separation + 0.5 MEMCLK 0011bMinimum separation 1111b-0100bReserved ENDIF.
    UINT32                                             Reserved_5_4:2 ; ///<
    UINT32                                             RxPtrInitReq:1 ; ///< This bit is cleared by hardware after the initialization completes.
    UINT32                                             TxPtrInitReq:1 ; ///< This bit is cleared by hardware after the initialization completes.
    UINT32                                               Twrrd_3_2_:2 ; ///<This field along with D18F2x8C[Twrrd[1:0]] combine to specify a 4-bit value, Twrrd[3:0]. See: D18F2x8C[Twrrd[1:0]].
    UINT32                                               Twrwr_3_2_:2 ; ///<This field along with D18F2x8C[Twrwr[1:0]] combine to specify a 4-bit value, Twrwr[3:0]. See: D18F2x8C[Twrwr[1:0]].
    UINT32                                               Trdrd_3_2_:2 ; ///<This field along with D18F2x8C[Trdrd[1:0]] combine to specify a 4-bit value, Trdrd[3:0]. See: D18F2x8C[Trdrd[1:0]].
    UINT32                                           Reserved_16_14:3 ; ///<
    UINT32                                             AddrCmdTriEn:1 ; ///<
    UINT32                                            DqsRcvEnTrain:1 ; ///< The controller enables the DQS receiver for 1 memory clock period for each read.
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                          ForceCasToSlot0:1 ; ///< See 2.10.4.7.5.1 [MaxRdLatency Training].
    UINT32                                        DisCutThroughMode:1 ; ///< See 2.10.4.7.5 [Calculating MaxRdLatency]. If tester mode, this field must be set to 1.
    UINT32                                             MaxRdLatency:10; ///<This field should be programmed by the system BIOS to specify the maximum round-trip latency in the system from the processor to the DRAM devices and back. The DRAM controller uses this field to determine when incoming DRAM read data can be safely transferred to the DRAM controller clock (NCLK) domain. The time includes the asynchronous and synchronous latencies.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x78_STRUCT;

// **** D18F2x7C Register Definition ****
// Address
#define D18F2x7C_ADDRESS                                        0x7c

// Type
#define D18F2x7C_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x7C_MrsAddress_OFFSET                              0
#define D18F2x7C_MrsAddress_WIDTH                               16
#define D18F2x7C_MrsAddress_MASK                                0xffff
#define D18F2x7C_MrsBank_OFFSET                                 16
#define D18F2x7C_MrsBank_WIDTH                                  3
#define D18F2x7C_MrsBank_MASK                                   0x70000
#define D18F2x7C_Reserved_19_19_OFFSET                          19
#define D18F2x7C_Reserved_19_19_WIDTH                           1
#define D18F2x7C_Reserved_19_19_MASK                            0x80000
#define D18F2x7C_MrsChipSel_OFFSET                              20
#define D18F2x7C_MrsChipSel_WIDTH                               3
#define D18F2x7C_MrsChipSel_MASK                                0x700000
#define D18F2x7C_Reserved_23_23_OFFSET                          23
#define D18F2x7C_Reserved_23_23_WIDTH                           1
#define D18F2x7C_Reserved_23_23_MASK                            0x800000
#define D18F2x7C_SendPchgAll_OFFSET                             24
#define D18F2x7C_SendPchgAll_WIDTH                              1
#define D18F2x7C_SendPchgAll_MASK                               0x1000000
#define D18F2x7C_SendAutoRefresh_OFFSET                         25
#define D18F2x7C_SendAutoRefresh_WIDTH                          1
#define D18F2x7C_SendAutoRefresh_MASK                           0x2000000
#define D18F2x7C_SendMrsCmd_OFFSET                              26
#define D18F2x7C_SendMrsCmd_WIDTH                               1
#define D18F2x7C_SendMrsCmd_MASK                                0x4000000
#define D18F2x7C_DeassertMemRstX_OFFSET                         27
#define D18F2x7C_DeassertMemRstX_WIDTH                          1
#define D18F2x7C_DeassertMemRstX_MASK                           0x8000000
#define D18F2x7C_AssertCke_OFFSET                               28
#define D18F2x7C_AssertCke_WIDTH                                1
#define D18F2x7C_AssertCke_MASK                                 0x10000000
#define D18F2x7C_SendZQCmd_OFFSET                               29
#define D18F2x7C_SendZQCmd_WIDTH                                1
#define D18F2x7C_SendZQCmd_MASK                                 0x20000000
#define D18F2x7C_Reserved_30_30_OFFSET                          30
#define D18F2x7C_Reserved_30_30_WIDTH                           1
#define D18F2x7C_Reserved_30_30_MASK                            0x40000000
#define D18F2x7C_EnDramInit_OFFSET                              31
#define D18F2x7C_EnDramInit_WIDTH                               1
#define D18F2x7C_EnDramInit_MASK                                0x80000000

/// D18F2x7C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               MrsAddress:16; ///<This field specifies the data driven on the DRAM address pins 15-0 for MRS and EMRS commands.
    UINT32                                                  MrsBank:3 ; ///<This field specifies the data driven on the DRAM bank pins for MRS and EMRS commands.
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                               MrsChipSel:3 ; ///<This field specifies which DRAM chip select is used for MRS/EMRS commands. This field is valid only when EnDramInit = 0 and when SendMrsCmd=1; otherwise, MRS/EMRS commands are sent to all chip selects.
    UINT32                                           Reserved_23_23:1 ; ///<
    UINT32                                              SendPchgAll:1 ; ///< Only valid when EnDramInit=1.
    UINT32                                          SendAutoRefresh:1 ; ///< Only valid when EnDramInit=1.
    UINT32                                               SendMrsCmd:1 ; ///< Software is responsible for DRAM timing parameter enforcement.
    UINT32                                          DeassertMemRstX:1 ; ///<Setting this bit causes the DCT to de-assert the memory reset. This bit cannot be used to assert the memory reset pin.
    UINT32                                                AssertCke:1 ; ///<Setting this bit causes the DCT to assert the CKE pins. This bit cannot be used to de-assert the CKE pins.
    UINT32                                                SendZQCmd:1 ; ///< This bit is cleared by the hardware after the command completes. Rtl hardcoded to send a ZQCL command, MrsAddress has no effect. UBTS #113801.
    UINT32                                           Reserved_30_30:1 ; ///<
    UINT32                                               EnDramInit:1 ; ///< The DCT asserts memory reset and de-asserts CKE when this bit is set.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x7C_STRUCT;

// **** D18F2x80 Register Definition ****
// Address
#define D18F2x80_ADDRESS                                        0x80

// Type
#define D18F2x80_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x80_Dimm0AddrMap_OFFSET                            0
#define D18F2x80_Dimm0AddrMap_WIDTH                             4
#define D18F2x80_Dimm0AddrMap_MASK                              0xf
#define D18F2x80_Dimm1AddrMap_OFFSET                            4
#define D18F2x80_Dimm1AddrMap_WIDTH                             4
#define D18F2x80_Dimm1AddrMap_MASK                              0xf0
#define D18F2x80_Reserved_31_8_OFFSET                           8
#define D18F2x80_Reserved_31_8_WIDTH                            24
#define D18F2x80_Reserved_31_8_MASK                             0xffffff00

/// D18F2x80
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Dimm0AddrMap:4 ; ///<
    UINT32                                             Dimm1AddrMap:4 ; ///<
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x80_STRUCT;

// **** D18F2x84 Register Definition ****
// Address
#define D18F2x84_ADDRESS                                        0x84

// Type
#define D18F2x84_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x84_BurstCtrl_OFFSET                               0
#define D18F2x84_BurstCtrl_WIDTH                                2
#define D18F2x84_BurstCtrl_MASK                                 0x3
#define D18F2x84_DrvImpCtrl_OFFSET                              2
#define D18F2x84_DrvImpCtrl_WIDTH                               2
#define D18F2x84_DrvImpCtrl_MASK                                0xc
#define D18F2x84_Twr_OFFSET                                     4
#define D18F2x84_Twr_WIDTH                                      3
#define D18F2x84_Twr_MASK                                       0x70
#define D18F2x84_DramTerm_OFFSET                                7
#define D18F2x84_DramTerm_WIDTH                                 3
#define D18F2x84_DramTerm_MASK                                  0x380
#define D18F2x84_DramTermDyn_OFFSET                             10
#define D18F2x84_DramTermDyn_WIDTH                              2
#define D18F2x84_DramTermDyn_MASK                               0xc00
#define D18F2x84_Reserved_12_12_OFFSET                          12
#define D18F2x84_Reserved_12_12_WIDTH                           1
#define D18F2x84_Reserved_12_12_MASK                            0x1000
#define D18F2x84_Qoff_OFFSET                                    13
#define D18F2x84_Qoff_WIDTH                                     1
#define D18F2x84_Qoff_MASK                                      0x2000
#define D18F2x84_Reserved_17_14_OFFSET                          14
#define D18F2x84_Reserved_17_14_WIDTH                           4
#define D18F2x84_Reserved_17_14_MASK                            0x3c000
#define D18F2x84_ASR_OFFSET                                     18
#define D18F2x84_ASR_WIDTH                                      1
#define D18F2x84_ASR_MASK                                       0x40000
#define D18F2x84_SRT_OFFSET                                     19
#define D18F2x84_SRT_WIDTH                                      1
#define D18F2x84_SRT_MASK                                       0x80000
#define D18F2x84_Tcwl_OFFSET                                    20
#define D18F2x84_Tcwl_WIDTH                                     3
#define D18F2x84_Tcwl_MASK                                      0x700000
#define D18F2x84_PchgPDModeSel_OFFSET                           23
#define D18F2x84_PchgPDModeSel_WIDTH                            1
#define D18F2x84_PchgPDModeSel_MASK                             0x800000
#define D18F2x84_Reserved_25_24_OFFSET                          24
#define D18F2x84_Reserved_25_24_WIDTH                           2
#define D18F2x84_Reserved_25_24_MASK                            0x3000000
#define D18F2x84_Reserved_26_26_OFFSET                          26
#define D18F2x84_Reserved_26_26_WIDTH                           1
#define D18F2x84_Reserved_26_26_MASK                            0x4000000
#define D18F2x84_Reserved_31_27_OFFSET                          27
#define D18F2x84_Reserved_31_27_WIDTH                           5
#define D18F2x84_Reserved_31_27_MASK                            0xf8000000

/// D18F2x84
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                BurstCtrl:2 ; ///<Specifies the number of sequential beats of DQ related to one read or write command.
    UINT32                                               DrvImpCtrl:2 ; ///<This field specifies impedance of the DRAM output driver.
    UINT32                                                      Twr:3 ; ///<This specifies the minimum time from the last data write until the chip select bank precharge; this is the WR field in the DDR3 specification.
    UINT32                                                 DramTerm:3 ; ///<This specifies the programming of the DRAM nominal termination value when the MRS command is issued to configure MR1 during DDR3 DRAM initialization (D18F2x90[InitDram]). A dedicated pin called ZQ is used to perform DRAM output driver impedance adjustment on DDR3 SDRAMs. RZQ is nominally 240 ohms to ground.
    UINT32                                              DramTermDyn:2 ; ///<This specifies the programming of the DRAM dynamic termination value for writes when the MRS command is issued to configure MR2 during DDR3 DRAM initialization (D18F2x90[InitDram]). BIOS must enable dynamic termination when there are 2 DIMMs on a channel. A dedicated pin called ZQ is used to perform DRAM output driver impedance adjustment on DDR3 SDRAMs. RZQ is nominally 240 ohms to ground.
    UINT32                                           Reserved_12_12:1 ; ///<
    UINT32                                                     Qoff:1 ; ///<Specifies the QOFF value for the DRAM devices.
    UINT32                                           Reserved_17_14:4 ; ///<
    UINT32                                                      ASR:1 ; ///<Specifies the ASR mode for the DRAM devices.
    UINT32                                                      SRT:1 ; ///<Specifies the SRT range for the DRAM devices. If ASR=1 then SRT must be 0.
    UINT32                                                     Tcwl:3 ; ///<This specifies the number of clock cycles from internal write command to first write data in.
    UINT32                                            PchgPDModeSel:1 ; ///<
    UINT32                                           Reserved_25_24:2 ; ///<GH defined as MprLoc.
    UINT32                                           Reserved_26_26:1 ; ///<GH defined as MprEn.
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x84_STRUCT;

// **** D18F2x88 Register Definition ****
// Address
#define D18F2x88_ADDRESS                                        0x88

// Type
#define D18F2x88_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x88_Tcl_OFFSET                                     0
#define D18F2x88_Tcl_WIDTH                                      4
#define D18F2x88_Tcl_MASK                                       0xf
#define D18F2x88_Reserved_23_4_OFFSET                           4
#define D18F2x88_Reserved_23_4_WIDTH                            20
#define D18F2x88_Reserved_23_4_MASK                             0xfffff0
#define D18F2x88_MemClkDis_OFFSET                               24
#define D18F2x88_MemClkDis_WIDTH                                8
#define D18F2x88_MemClkDis_MASK                                 0xff000000

/// D18F2x88
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Tcl:4 ; ///<This specifies the time from the CAS assertion for a read cycle until data return (from the perspective of the DRAM devices). If tester mode, this field must be set to 1h.
    UINT32                                            Reserved_23_4:20; ///< Trcd, Trp, Tras, and Trc moved to D18F2xF4_x40. Trtp and Trrd moved to D18F2xF4_x41.
    UINT32                                                MemClkDis:8 ; ///< The bits MemClkDis[7:0] are mapped to package pin names as follows: Bit	Package pin name [0]	MA_CLK_H/L[0]. Typically routed to DIMM0, rank 0. [1]	MA_CLK_H/L[1]. Typically routed to DIMM0, rank 1. [2]	MA_CLK_H/L[2]. Typically routed to DIMM1, rank 0. [3]	MA_CLK_H/L[3]. Typically routed to DIMM1, rank 1. [7:4]	Reserved
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x88_STRUCT;

// **** D18F2x8C Register Definition ****
// Address
#define D18F2x8C_ADDRESS                                        0x8c

// Type
#define D18F2x8C_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x8C_TrwtWB_OFFSET                                  0
#define D18F2x8C_TrwtWB_WIDTH                                   4
#define D18F2x8C_TrwtWB_MASK                                    0xf
#define D18F2x8C_TrwtTO_OFFSET                                  4
#define D18F2x8C_TrwtTO_WIDTH                                   4
#define D18F2x8C_TrwtTO_MASK                                    0xf0
#define D18F2x8C_Reserved_9_8_OFFSET                            8
#define D18F2x8C_Reserved_9_8_WIDTH                             2
#define D18F2x8C_Reserved_9_8_MASK                              0x300
#define D18F2x8C_Twrrd_1_0__OFFSET                              10
#define D18F2x8C_Twrrd_1_0__WIDTH                               2
#define D18F2x8C_Twrrd_1_0__MASK                                0xc00
#define D18F2x8C_Twrwr_1_0__OFFSET                              12
#define D18F2x8C_Twrwr_1_0__WIDTH                               2
#define D18F2x8C_Twrwr_1_0__MASK                                0x3000
#define D18F2x8C_Trdrd_1_0__OFFSET                              14
#define D18F2x8C_Trdrd_1_0__WIDTH                               2
#define D18F2x8C_Trdrd_1_0__MASK                                0xc000
#define D18F2x8C_Tref_OFFSET                                    16
#define D18F2x8C_Tref_WIDTH                                     2
#define D18F2x8C_Tref_MASK                                      0x30000
#define D18F2x8C_DisAutoRefresh_OFFSET                          18
#define D18F2x8C_DisAutoRefresh_WIDTH                           1
#define D18F2x8C_DisAutoRefresh_MASK                            0x40000
#define D18F2x8C_Reserved_19_19_OFFSET                          19
#define D18F2x8C_Reserved_19_19_WIDTH                           1
#define D18F2x8C_Reserved_19_19_MASK                            0x80000
#define D18F2x8C_Trfc0_OFFSET                                   20
#define D18F2x8C_Trfc0_WIDTH                                    3
#define D18F2x8C_Trfc0_MASK                                     0x700000
#define D18F2x8C_Trfc1_OFFSET                                   23
#define D18F2x8C_Trfc1_WIDTH                                    3
#define D18F2x8C_Trfc1_MASK                                     0x3800000
#define D18F2x8C_Reserved_31_26_OFFSET                          26
#define D18F2x8C_Reserved_31_26_WIDTH                           6
#define D18F2x8C_Reserved_31_26_MASK                            0xfc000000

/// D18F2x8C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   TrwtWB:4 ; ///<Specifies the minimum number of NCLK cycles from the last read operation seen by the DCT scheduler to the following write operation. The purpose of this field is to hold off write operations until several cycles have elapsed without a read cycle; this may result in a performance benefit. If opportunistic write bursting is disabled then DCT write bursting should be disabled by setting D18F2x11C[DctWrLimit] to 1Fh.
    UINT32                                                   TrwtTO:4 ; ///<This specifies the minimum number of cycles from the last clock of virtual CAS of a first read operation to the clock in which CAS is asserted for a following write operation. Time may need to be inserted to ensure there is no bus contention on bidirectional pins. It is important to consider the effects of D18F2x84[Tcwl], D18F2x88[Tcl] and the delays associated with D18F2x9C_x0000_00[24:10] and D18F2x9C_x0000_0[1:0]0[2:1] when specifying TrwtTO to avoid bus contention and to satisfy the timing requirements of the phy. See 2.10.4.4.4 [TrwtTO (Read-to-Write Turnaround for Data, DQS Contention)].
    UINT32                                             Reserved_9_8:2 ; ///< Twtr moved to D18F2xF4_x41.
    UINT32                                               Twrrd_1_0_:2 ; ///<This specifies the minimum number of cycles from the last clock of virtual CAS of the first write operation to the clock in which CAS is asserted for a following read operation to a different DIMM. This field along with D18F2x78[Twrrd[3:2]] combine to specify a 4-bit value, Twrrd[3:0].
    UINT32                                               Twrwr_1_0_:2 ; ///<Twrwr specifies the minimum number of cycles from the last clock of virtual CAS of the first write-burst operation to the clock in which CAS is asserted for a following write-burst operation to a different DIMM. This field along with D18F2x78[Twrwr[3:2]] combine to specify a 4-bit value, Twrwr[3:0].
    UINT32                                               Trdrd_1_0_:2 ; ///<Trdrd specifies the minimum number of cycles from the last clock of virtual CAS of a first read-burst operation to the clock in which CAS is asserted for a following read-burst operation to a different DIMM. This field along with D18F2x78[Trdrd[3:2]] combine to specify a 4-bit value, Trdrd[3:0].
    UINT32                                                     Tref:2 ; ///<This specifies the average time between refresh requests to all DRAM devices.
    UINT32                                           DisAutoRefresh:1 ; ///< BIOS must set this bit prior to DRAM initialization and it must remain set until DRAM training has completed. Subsequent register accesses may only set this bit during S3 exit or if the DRAM has been placed into self-refresh. Used during electrical characterization and debug to eliminate undesired commands on the bus.
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                                    Trfc0:3 ; ///<This specifies the minimum time from an auto-refresh command to the next valid command, except NOP or DES. DIMM numbers are specified by D18F2x[4C:40] [DRAM CS Base Address]. The recommended programming of this register varies based on DRAM density and speed.
    UINT32                                                    Trfc1:3 ; ///<This specifies the minimum time from an auto-refresh command to the next valid command, except NOP or DES. DIMM numbers are specified by D18F2x[4C:40] [DRAM CS Base Address]. The recommended programming of this register varies based on DRAM density and speed.See: Trfc0.
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x8C_STRUCT;

// **** D18F2x90 Register Definition ****
// Address
#define D18F2x90_ADDRESS                                        0x90

// Type
#define D18F2x90_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x90_InitDram_OFFSET                                0
#define D18F2x90_InitDram_WIDTH                                 1
#define D18F2x90_InitDram_MASK                                  0x1
#define D18F2x90_ExitSelfRef_OFFSET                             1
#define D18F2x90_ExitSelfRef_WIDTH                              1
#define D18F2x90_ExitSelfRef_MASK                               0x2
#define D18F2x90_Reserved_8_2_OFFSET                            2
#define D18F2x90_Reserved_8_2_WIDTH                             7
#define D18F2x90_Reserved_8_2_MASK                              0x1fc
#define D18F2x90_Reserved_9_9_OFFSET                            9
#define D18F2x90_Reserved_9_9_WIDTH                             1
#define D18F2x90_Reserved_9_9_MASK                              0x200
#define D18F2x90_Reserved_16_10_OFFSET                          10
#define D18F2x90_Reserved_16_10_WIDTH                           7
#define D18F2x90_Reserved_16_10_MASK                            0x1fc00
#define D18F2x90_EnterSelfRef_OFFSET                            17
#define D18F2x90_EnterSelfRef_WIDTH                             1
#define D18F2x90_EnterSelfRef_MASK                              0x20000
#define D18F2x90_Reserved_19_18_OFFSET                          18
#define D18F2x90_Reserved_19_18_WIDTH                           2
#define D18F2x90_Reserved_19_18_MASK                            0xc0000
#define D18F2x90_DynPageCloseEn_OFFSET                          20
#define D18F2x90_DynPageCloseEn_WIDTH                           1
#define D18F2x90_DynPageCloseEn_MASK                            0x100000
#define D18F2x90_IdleCycInit_OFFSET                             21
#define D18F2x90_IdleCycInit_WIDTH                              2
#define D18F2x90_IdleCycInit_MASK                               0x600000
#define D18F2x90_ForceAutoPchg_OFFSET                           23
#define D18F2x90_ForceAutoPchg_WIDTH                            1
#define D18F2x90_ForceAutoPchg_MASK                             0x800000
#define D18F2x90_Reserved_24_24_OFFSET                          24
#define D18F2x90_Reserved_24_24_WIDTH                           1
#define D18F2x90_Reserved_24_24_MASK                            0x1000000
#define D18F2x90_EnDispAutoPrecharge_OFFSET                     25
#define D18F2x90_EnDispAutoPrecharge_WIDTH                      1
#define D18F2x90_EnDispAutoPrecharge_MASK                       0x2000000
#define D18F2x90_DbeSkidBufDis_OFFSET                           26
#define D18F2x90_DbeSkidBufDis_WIDTH                            1
#define D18F2x90_DbeSkidBufDis_MASK                             0x4000000
#define D18F2x90_DisDllShutdownSR_OFFSET                        27
#define D18F2x90_DisDllShutdownSR_WIDTH                         1
#define D18F2x90_DisDllShutdownSR_MASK                          0x8000000
#define D18F2x90_Reserved_28_28_OFFSET                          28
#define D18F2x90_Reserved_28_28_WIDTH                           1
#define D18F2x90_Reserved_28_28_MASK                            0x10000000
#define D18F2x90_Reserved_29_29_OFFSET                          29
#define D18F2x90_Reserved_29_29_WIDTH                           1
#define D18F2x90_Reserved_29_29_MASK                            0x20000000
#define D18F2x90_Reserved_31_30_OFFSET                          30
#define D18F2x90_Reserved_31_30_WIDTH                           2
#define D18F2x90_Reserved_31_30_MASK                            0xc0000000

/// D18F2x90
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 InitDram:1 ; ///<Writing a 1 to this bit causes the DRAM controller to execute the DRAM initialization sequence described by the JEDEC specification. This command should be executed by BIOS when booting from an unpowered state (ACPI S4, S5 or G3; not S3, suspend to RAM), after the DRAM controller configuration registers are properly initialized. This bit is read as a 1 while the DRAM initialization sequence is executing; it is read as 0 at all other times. When this bit is written to a 1, the new value of the other fields in this register that are updated concurrently are used in the initialization sequence. See 2.10.4.6 [DRAM Device Initialization].
    UINT32                                              ExitSelfRef:1 ; ///< This command should be executed by BIOS when returning from the suspend to RAM state after the DRAM controller configuration registers are properly initialized (see 2.5.8.1.1 [ACPI Suspend to RAM State (S3)]), or when self refresh is used during DRAM training (see DisDllShutdownSR and 2.10.4.7 [DRAM Training]). This bit should not be set if the DCT is disabled.
    UINT32                                             Reserved_8_2:7 ; ///<
    UINT32                                             Reserved_9_9:1 ; ///<
    UINT32                                           Reserved_16_10:7 ; ///<
    UINT32                                             EnterSelfRef:1 ; ///< See DisDllShutdownSR and 2.10.4.7 [DRAM Training]. NB P-state transitions must be disabled prior to setting this bit. See D18F6x90[NbPsCtrlDis] and See 2.5.5.1.3 [Software Controlled NB P-states].
    UINT32                                           Reserved_19_18:2 ; ///<
    UINT32                                           DynPageCloseEn:1 ; ///< If DynPageCloseEn=1 then: A 2b up/down counter (QualIdleCycLimit[i][1:0]) is defined per table entry that specifies the threshold in MemClks when the page is closed. There are the following cases: 1.	QualIdleCycLimit[i][1:0] is not changed for a hit on an open page. 2.	QualIdleCycLimit[i][1:0] is incremented by a hit on a closed page. (Max is 11b) 3.	QualIdleCycLimit[i][1:0] is decremented by a page conflict (miss on an open page). (Min is 00b) QualIdleCycLimit[i][1:0], for a miss on a closed page, the LRU entry is loaded with IdleCycInit[1:0].
    UINT32                                              IdleCycInit:2 ; ///<This specifies the initial number of MEMCLK cycles during which an open page of DRAM is not accessed before it may be closed by the dynamic page close logic. This field is ignored if D18F2x90[DynPageCloseEn] = 0.
    UINT32                                            ForceAutoPchg:1 ; ///< This may be preferred in situations where power savings is favored over performance.
    UINT32                                           Reserved_24_24:1 ; ///<
    UINT32                                      EnDispAutoPrecharge:1 ; ///<
    UINT32                                            DbeSkidBufDis:1 ; ///< The skid buffer allows the arbiter to pick a lower relative priority page miss ahead of a page hit, so that Trcd penalty for subsequent CAS is hidden behind the ready/requested CAS.
    UINT32                                         DisDllShutdownSR:1 ; ///<See 2.5.7.1 [DRAM Self-Refresh]. For software initiated self-refresh, to optimize self-refresh exit latency at the expense of power, this bit may be set prior to setting EnterSelfRef and restored after the subsequent ExitSelfRef completes.
    UINT32                                           Reserved_28_28:1 ; ///<DisSscClkGateData.
    UINT32                                           Reserved_29_29:1 ; ///<DisSscClkGateCmdAddr.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x90_STRUCT;

// **** D18F2x94 Register Definition ****
// Address
#define D18F2x94_ADDRESS                                        0x94

// Type
#define D18F2x94_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x94_MemClkFreq_OFFSET                              0
#define D18F2x94_MemClkFreq_WIDTH                               5
#define D18F2x94_MemClkFreq_MASK                                0x1f
#define D18F2x94_Reserved_6_5_OFFSET                            5
#define D18F2x94_Reserved_6_5_WIDTH                             2
#define D18F2x94_Reserved_6_5_MASK                              0x60
#define D18F2x94_MemClkFreqVal_OFFSET                           7
#define D18F2x94_MemClkFreqVal_WIDTH                            1
#define D18F2x94_MemClkFreqVal_MASK                             0x80
#define D18F2x94_Reserved_9_8_OFFSET                            8
#define D18F2x94_Reserved_9_8_WIDTH                             2
#define D18F2x94_Reserved_9_8_MASK                              0x300
#define D18F2x94_ZqcsInterval_OFFSET                            10
#define D18F2x94_ZqcsInterval_WIDTH                             2
#define D18F2x94_ZqcsInterval_MASK                              0xc00
#define D18F2x94_Reserved_13_12_OFFSET                          12
#define D18F2x94_Reserved_13_12_WIDTH                           2
#define D18F2x94_Reserved_13_12_MASK                            0x3000
#define D18F2x94_DisDramInterface_OFFSET                        14
#define D18F2x94_DisDramInterface_WIDTH                         1
#define D18F2x94_DisDramInterface_MASK                          0x4000
#define D18F2x94_PowerDownEn_OFFSET                             15
#define D18F2x94_PowerDownEn_WIDTH                              1
#define D18F2x94_PowerDownEn_MASK                               0x8000
#define D18F2x94_PowerDownMode_OFFSET                           16
#define D18F2x94_PowerDownMode_WIDTH                            1
#define D18F2x94_PowerDownMode_MASK                             0x10000
#define D18F2x94_Reserved_19_17_OFFSET                          17
#define D18F2x94_Reserved_19_17_WIDTH                           3
#define D18F2x94_Reserved_19_17_MASK                            0xe0000
#define D18F2x94_SlowAccessMode_OFFSET                          20
#define D18F2x94_SlowAccessMode_WIDTH                           1
#define D18F2x94_SlowAccessMode_MASK                            0x100000
#define D18F2x94_Reserved_21_21_OFFSET                          21
#define D18F2x94_Reserved_21_21_WIDTH                           1
#define D18F2x94_Reserved_21_21_MASK                            0x200000
#define D18F2x94_BankSwizzleMode_OFFSET                         22
#define D18F2x94_BankSwizzleMode_WIDTH                          1
#define D18F2x94_BankSwizzleMode_MASK                           0x400000
#define D18F2x94_ProcOdtDis_OFFSET                              23
#define D18F2x94_ProcOdtDis_WIDTH                               1
#define D18F2x94_ProcOdtDis_MASK                                0x800000
#define D18F2x94_DcqBypassMax_OFFSET                            24
#define D18F2x94_DcqBypassMax_WIDTH                             4
#define D18F2x94_DcqBypassMax_MASK                              0xf000000
#define D18F2x94_FourActWindow_OFFSET                           28
#define D18F2x94_FourActWindow_WIDTH                            4
#define D18F2x94_FourActWindow_MASK                             0xf0000000

/// D18F2x94
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               MemClkFreq:5 ; ///<This field specifies the frequency and rate of the DRAM interface (MEMCLK). The rate defined below is twice the frequency. See D18F3xE8[DdrMaxRate]. Frequencies in internal text and marked as Reserved are not POR. 400 MHz is lowest supported frequency(non-tester).
    UINT32                                             Reserved_6_5:2 ; ///< Reserved for future expansion of MemClkFreq.
    UINT32                                            MemClkFreqVal:1 ; ///<System BIOS should set this bit when setting up D18F2x94[MemClkFreq] to the proper value. This indicates to the DRAM controller that it may start driving MEMCLK at the proper frequency. This bit should not be set if the DCT is disabled. See 2.10.4.6.
    UINT32                                             Reserved_9_8:2 ; ///<
    UINT32                                             ZqcsInterval:2 ; ///<This field specifies the programmable interval for the controller to send out the DRAM ZQ calibration short command.
    UINT32                                           Reserved_13_12:2 ; ///<
    UINT32                                         DisDramInterface:1 ; ///< This bit must be set if there are no DIMMs connected to the DCT. If this bit is set, BIOS must also disable the phy for the channel. See D18F2x9C_x0000_000B[DynModeChange]. If this bit is set, BIOS must program D18F2x9C_x0000_000C[CKETri]=11b for the channel a minimum of 24 MEMCLKs before setting DisDramInterface or D18F2x9C_x0000_000B[DynModeChange].
    UINT32                                              PowerDownEn:1 ; ///< When in power down mode, if all pages of the DRAMs associated with a CKE pin are closed, then these parts are placed in power down mode. Only precharge power down mode is supported, not active power down mode.
    UINT32                                            PowerDownMode:1 ; ///<This specifies how a DIMM enters power down mode, when enabled by D18F2x94[PowerDownEn]. A DIMM enters power down mode when the DCT de-asserts the CKE pin to that DIMM. The command and address signals tri-state one MEMCLK after CKE de-asserts. ERBT-640. Bit	Description 0b	Channel CKE control mode. The DRAM channel is placed in power down mode when all chip selects associated with the channel are idle. Both CKE pins for the channel operate in lock step, in terms of placing the channel DIMMs in power down mode. 1b	Chip select CKE control mode. A chip select or pair of chip selects is placed in power down mode when no transactions are pending for the chip select(s). This mode is expected to be used in mobile systems:  - CKE0 is associated with CS0 in 2-rank systems. - CKE1 is associated with CS1 in 2-rank systems. See D18F2x[4C:40].
    UINT32                                           Reserved_19_17:3 ; ///<
    UINT32                                           SlowAccessMode:1 ; ///<e., these signals are driven for two MEMCLK cycles rather than one. 2T mode may be needed in order to meet electrical requirements of certain DIMM speed and loading configurations. If tester mode, this field must be set to 0.
    UINT32                                           Reserved_21_21:1 ; ///<
    UINT32                                          BankSwizzleMode:1 ; ///< Each of the bank address bits, as specified in Table 145 of D18F2x80, are remapped as follows:  Define X as a bank address bit (e.g., X=15 if the bank bit is specified to be address bit 15). Define S(n) as the state of address bit n (0 or 1) and B as the remapped bank address bit. Then, B= S(X) ^ S(X + 3) ^ S(X + 6); for an 8-bank DRAM.  For example, encoding 02h of Table 145 would be remapped from bank[2:0]={A15, A14, A13} to the following for a 64-bit DCT: Bank[2:0] = {A15 ^ A18 ^ A21, A14 ^ A17 ^ A20, A13 ^ A16 ^ A19}.
    UINT32                                               ProcOdtDis:1 ; ///< See D18F2x9C_x0000_0000[ProcOdt] for ODT definitions.
    UINT32                                             DcqBypassMax:4 ; ///<The DRAM controller arbiter normally allows transactions to pass other transactions in order to optimize DRAM bandwidth. This field specifies the maximum number of times that the oldest memory-access request in the DRAM controller queue may be bypassed before the arbiter decision is overridden and the oldest memory-access request is serviced instead.
    UINT32                                            FourActWindow:4 ; ///<Specifies the rolling tFAW window during which no more than 4 banks in an 8-bank device are activated.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x94_STRUCT;

// **** D18F2x98 Register Definition ****
// Address
#define D18F2x98_ADDRESS                                        0x98

// Type
#define D18F2x98_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x98_DctOffset_OFFSET                               0
#define D18F2x98_DctOffset_WIDTH                                30
#define D18F2x98_DctOffset_MASK                                 0x3fffffff
#define D18F2x98_DctAccessWrite_OFFSET                          30
#define D18F2x98_DctAccessWrite_WIDTH                           1
#define D18F2x98_DctAccessWrite_MASK                            0x40000000
#define D18F2x98_DctAccessDone_OFFSET                           31
#define D18F2x98_DctAccessDone_WIDTH                            1
#define D18F2x98_DctAccessDone_MASK                             0x80000000

/// D18F2x98
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                DctOffset:30; ///<
    UINT32                                           DctAccessWrite:1 ; ///<
    UINT32                                            DctAccessDone:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x98_STRUCT;

// **** D18F2x9C Register Definition ****
// Address
#define D18F2x9C_ADDRESS                                        0x9c

// Type
#define D18F2x9C_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2x9C_DctDataPort_OFFSET                             0
#define D18F2x9C_DctDataPort_WIDTH                              32
#define D18F2x9C_DctDataPort_MASK                               0xffffffff

/// D18F2x9C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              DctDataPort:32; ///<See D18F2x98 for details about this port.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x9C_STRUCT;

// **** D18F2xA0 Register Definition ****
// Address
#define D18F2xA0_ADDRESS                                        0xa0

// Type
#define D18F2xA0_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2xA0_Reserved_2_0_OFFSET                            0
#define D18F2xA0_Reserved_2_0_WIDTH                             3
#define D18F2xA0_Reserved_2_0_MASK                              0x7
#define D18F2xA0_Reserved_3_3_OFFSET                            3
#define D18F2xA0_Reserved_3_3_WIDTH                             1
#define D18F2xA0_Reserved_3_3_MASK                              0x8
#define D18F2xA0_Reserved_9_4_OFFSET                            4
#define D18F2xA0_Reserved_9_4_WIDTH                             6
#define D18F2xA0_Reserved_9_4_MASK                              0x3f0
#define D18F2xA0_Reserved_10_10_OFFSET                          10
#define D18F2xA0_Reserved_10_10_WIDTH                           1
#define D18F2xA0_Reserved_10_10_MASK                            0x400
#define D18F2xA0_LoopbackBistReq_OFFSET                         11
#define D18F2xA0_LoopbackBistReq_WIDTH                          1
#define D18F2xA0_LoopbackBistReq_MASK                           0x800
#define D18F2xA0_TestByte_OFFSET                                12
#define D18F2xA0_TestByte_WIDTH                                 3
#define D18F2xA0_TestByte_MASK                                  0x7000
#define D18F2xA0_Reserved_15_15_OFFSET                          15
#define D18F2xA0_Reserved_15_15_WIDTH                           1
#define D18F2xA0_Reserved_15_15_MASK                            0x8000
#define D18F2xA0_ErrorCnt_OFFSET                                16
#define D18F2xA0_ErrorCnt_WIDTH                                 7
#define D18F2xA0_ErrorCnt_MASK                                  0x7f0000
#define D18F2xA0_ErrOverflow_OFFSET                             23
#define D18F2xA0_ErrOverflow_WIDTH                              1
#define D18F2xA0_ErrOverflow_MASK                               0x800000
#define D18F2xA0_BitMask_OFFSET                                 24
#define D18F2xA0_BitMask_WIDTH                                  8
#define D18F2xA0_BitMask_MASK                                   0xff000000

/// D18F2xA0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_2_0:3 ; ///<
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                             Reserved_9_4:6 ; ///<
    UINT32                                           Reserved_10_10:1 ; ///<
    UINT32                                          LoopbackBistReq:1 ; ///< The DRAM controller starts to continuously transmit data patterns to the pad. These patterns get looped back at the pad back to the receiver where the DRAM controller compares transmitted data with the received looped back data. Errors are reported through ErrorCnt. D18F2xF4_x20[DllStdbyBubbleMode] should be set before setting LoopbackBistReq. See D18F2x9C_x0000_000C[ChipSelTri].
    UINT32                                                 TestByte:3 ; ///<This field specifies one out of eight data byte lanes to be used for pattern comparison. This field is encoded as follows:
    UINT32                                           Reserved_15_15:1 ; ///<
    UINT32                                                 ErrorCnt:7 ; ///<This field provides the count of the number of mis-compares between the transmitted data and the looped back data when LoopbackBistReq=1. This count can overflow. It is cleared when LoopbackBistReq is programmed to 0. For every state change of this field, a 2 MEMCLK wide pulse is output to the M[B, A]_RESET_L pin.
    UINT32                                              ErrOverflow:1 ; ///< This bit is cleared when LoopbackBistReq is programmed to 0. If this bit is set and ErrorCnt=7Fh, then the transmit and receive LFSRs have failed to synchronize indicating an error with the loopback logic.
    UINT32                                                  BitMask:8 ; ///<Each bit of this field is used to mask errors on a bit within the TestByte. Bit[0] applies to bit 0 of TestByte; bit[1] applies to bit 1 of TestByte; etc.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2xA0_STRUCT;

// **** D18F2xA4 Register Definition ****
// Address
#define D18F2xA4_ADDRESS                                        0xa4

// Type
#define D18F2xA4_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2xA4_DoubleTrefRateEn_OFFSET                        0
#define D18F2xA4_DoubleTrefRateEn_WIDTH                         1
#define D18F2xA4_DoubleTrefRateEn_MASK                          0x1
#define D18F2xA4_ThrottleEn_OFFSET                              1
#define D18F2xA4_ThrottleEn_WIDTH                               2
#define D18F2xA4_ThrottleEn_MASK                                0x6
#define D18F2xA4_Reserved_31_3_OFFSET                           3
#define D18F2xA4_Reserved_31_3_WIDTH                            29
#define D18F2xA4_Reserved_31_3_MASK                             0xfffffff8

/// D18F2xA4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         DoubleTrefRateEn:1 ; ///<9 us auto-refresh interval when the EVENT_L pin is asserted. See 2.5.7.2 [EVENT_L].
    UINT32                                               ThrottleEn:2 ; ///<This field specifies the average utilization of the channel if the EVENT_L pin is asserted. Throttling is accomplished by reducing command issue bandwidth based on historical command throttle values (Precharge, Activate, and AutoPrecharge = 1, Read and Write = 4).
    UINT32                                            Reserved_31_3:29; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2xA4_STRUCT;

// **** D18F2xA8 Register Definition ****
// Address
#define D18F2xA8_ADDRESS                                        0xa8

// Type
#define D18F2xA8_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2xA8_RxFifoDbgThrottle_OFFSET                       0
#define D18F2xA8_RxFifoDbgThrottle_WIDTH                        4
#define D18F2xA8_RxFifoDbgThrottle_MASK                         0xf
#define D18F2xA8_FullLoopbackChk_OFFSET                         4
#define D18F2xA8_FullLoopbackChk_WIDTH                          1
#define D18F2xA8_FullLoopbackChk_MASK                           0x10
#define D18F2xA8_Reserved_7_5_OFFSET                            5
#define D18F2xA8_Reserved_7_5_WIDTH                             3
#define D18F2xA8_Reserved_7_5_MASK                              0xe0
#define D18F2xA8_DbeGskRdPtrStartCount_OFFSET                   8
#define D18F2xA8_DbeGskRdPtrStartCount_WIDTH                    8
#define D18F2xA8_DbeGskRdPtrStartCount_MASK                     0xff00
#define D18F2xA8_Reserved_18_16_OFFSET                          16
#define D18F2xA8_Reserved_18_16_WIDTH                           3
#define D18F2xA8_Reserved_18_16_MASK                            0x70000
#define D18F2xA8_PDPhyPSDis_OFFSET                              19
#define D18F2xA8_PDPhyPSDis_WIDTH                               1
#define D18F2xA8_PDPhyPSDis_MASK                                0x80000
#define D18F2xA8_BankSwap_OFFSET                                20
#define D18F2xA8_BankSwap_WIDTH                                 1
#define D18F2xA8_BankSwap_MASK                                  0x100000
#define D18F2xA8_DbeGskMemClkAlignMode_OFFSET                   21
#define D18F2xA8_DbeGskMemClkAlignMode_WIDTH                    2
#define D18F2xA8_DbeGskMemClkAlignMode_MASK                     0x600000
#define D18F2xA8_DbeGskCmdFifoErr_OFFSET                        23
#define D18F2xA8_DbeGskCmdFifoErr_WIDTH                         1
#define D18F2xA8_DbeGskCmdFifoErr_MASK                          0x800000
#define D18F2xA8_DbeGskDataFifoErr_OFFSET                       24
#define D18F2xA8_DbeGskDataFifoErr_WIDTH                        1
#define D18F2xA8_DbeGskDataFifoErr_MASK                         0x1000000
#define D18F2xA8_Reserved_31_25_OFFSET                          25
#define D18F2xA8_Reserved_31_25_WIDTH                           7
#define D18F2xA8_Reserved_31_25_MASK                            0xfe000000

/// D18F2xA8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        RxFifoDbgThrottle:4 ; ///<This specifies the maximum amount of DRAM read data outstanding at any given time. The hardware does not distinguish between 32 byte reads and 64 byte reads, so the amount of read data outstanding may be higher than the limit specified by this field. UBTS #180021.
    UINT32                                          FullLoopbackChk:1 ; ///< See D18F2xA0.
    UINT32                                             Reserved_7_5:3 ; ///<
    UINT32                                    DbeGskRdPtrStartCount:8 ; ///<Specifies the delay in PCLKs before the DBE gasket FIFO read pointer starts. This field is used for deterministic operation while in tester mode, and in that mode replaces the functionality of D18F2x78[RdPtrInit].
    UINT32                                           Reserved_18_16:3 ; ///<
    UINT32                                               PDPhyPSDis:1 ; ///<
    UINT32                                                 BankSwap:1 ; ///< If D18F2x114[DctSelBankSwap]==1 then normalized address bits 10:8 are swapped with bits 15:13 else normalized address bits 11:9 are swapped with bits 15:13. This swap happens before D18F2x94[BankSwizzleMode] is applied.
    UINT32                                    DbeGskMemClkAlignMode:2 ; ///<Specifies the method used to align DDR commands with MEMCLK. The 10b setting can not be used while doing DDR write levelization or DQS receiver enable training, which requires use of the phy PRE. If tester mode, this field must be set to 00b(10b setting will result in non-deterministic behavior).
    UINT32                                         DbeGskCmdFifoErr:1 ; ///<
    UINT32                                        DbeGskDataFifoErr:1 ; ///<
    UINT32                                           Reserved_31_25:7 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2xA8_STRUCT;

// **** D18F2xAC Register Definition ****
// Address
#define D18F2xAC_ADDRESS                                        0xac

// Type
#define D18F2xAC_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2xAC_MemTempHot_OFFSET                              0
#define D18F2xAC_MemTempHot_WIDTH                               1
#define D18F2xAC_MemTempHot_MASK                                0x1
#define D18F2xAC_Reserved_31_1_OFFSET                           1
#define D18F2xAC_Reserved_31_1_WIDTH                            31
#define D18F2xAC_Reserved_31_1_MASK                             0xfffffffe

/// D18F2xAC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               MemTempHot:1 ; ///< See 2.5.7.2 [EVENT_L].
    UINT32                                            Reserved_31_1:31; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2xAC_STRUCT;

// **** D18F2xCC Register Definition ****
// Address
#define D18F2xCC_ADDRESS                                        0xcc

// Type
#define D18F2xCC_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2xCC_TrcCmd0_OFFSET                                 0
#define D18F2xCC_TrcCmd0_WIDTH                                  1
#define D18F2xCC_TrcCmd0_MASK                                   0x1
#define D18F2xCC_TrcCmd1_OFFSET                                 1
#define D18F2xCC_TrcCmd1_WIDTH                                  1
#define D18F2xCC_TrcCmd1_MASK                                   0x2
#define D18F2xCC_Reserved_3_2_OFFSET                            2
#define D18F2xCC_Reserved_3_2_WIDTH                             2
#define D18F2xCC_Reserved_3_2_MASK                              0xc
#define D18F2xCC_TrcRsp0_OFFSET                                 4
#define D18F2xCC_TrcRsp0_WIDTH                                  1
#define D18F2xCC_TrcRsp0_MASK                                   0x10
#define D18F2xCC_TrcRsp1_OFFSET                                 5
#define D18F2xCC_TrcRsp1_WIDTH                                  1
#define D18F2xCC_TrcRsp1_MASK                                   0x20
#define D18F2xCC_Reserved_11_6_OFFSET                           6
#define D18F2xCC_Reserved_11_6_WIDTH                            6
#define D18F2xCC_Reserved_11_6_MASK                             0xfc0
#define D18F2xCC_TrcDat0_OFFSET                                 12
#define D18F2xCC_TrcDat0_WIDTH                                  1
#define D18F2xCC_TrcDat0_MASK                                   0x1000
#define D18F2xCC_TrcDat1_OFFSET                                 13
#define D18F2xCC_TrcDat1_WIDTH                                  1
#define D18F2xCC_TrcDat1_MASK                                   0x2000
#define D18F2xCC_MultiDatXbarSel_OFFSET                         14
#define D18F2xCC_MultiDatXbarSel_WIDTH                          1
#define D18F2xCC_MultiDatXbarSel_MASK                           0x4000
#define D18F2xCC_TrcCmdSrcPtr_OFFSET                            15
#define D18F2xCC_TrcCmdSrcPtr_WIDTH                             7
#define D18F2xCC_TrcCmdSrcPtr_MASK                              0x3f8000
#define D18F2xCC_MultiTscCapture_OFFSET                         22
#define D18F2xCC_MultiTscCapture_WIDTH                          1
#define D18F2xCC_MultiTscCapture_MASK                           0x400000
#define D18F2xCC_TscBase_OFFSET                                 23
#define D18F2xCC_TscBase_WIDTH                                  1
#define D18F2xCC_TscBase_MASK                                   0x800000
#define D18F2xCC_TrcCmdDstPtr_OFFSET                            24
#define D18F2xCC_TrcCmdDstPtr_WIDTH                             6
#define D18F2xCC_TrcCmdDstPtr_MASK                              0x3f000000
#define D18F2xCC_DisTscCapture_OFFSET                           30
#define D18F2xCC_DisTscCapture_WIDTH                            1
#define D18F2xCC_DisTscCapture_MASK                             0x40000000
#define D18F2xCC_TrcDatSrcDst_OFFSET                            31
#define D18F2xCC_TrcDatSrcDst_WIDTH                             1
#define D18F2xCC_TrcDatSrcDst_MASK                              0x80000000

/// D18F2xCC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  TrcCmd0:1 ; ///<
    UINT32                                                  TrcCmd1:1 ; ///<
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                                  TrcRsp0:1 ; ///<
    UINT32                                                  TrcRsp1:1 ; ///<
    UINT32                                            Reserved_11_6:6 ; ///<
    UINT32                                                  TrcDat0:1 ; ///<
    UINT32                                                  TrcDat1:1 ; ///<
    UINT32                                          MultiDatXbarSel:1 ; ///< On a given cycle if data from both XBAR write and XBAR read need to be written into the TCB, MultiDatXbarSel selects which XBAR data is written into the TCB. (the other data is dropped).
    UINT32                                             TrcCmdSrcPtr:7 ; ///<Each bit in this field defines one XBAR port. Bit	Definition [0]	Physical Core 0. UBTS #188182. [1]	Physical Core 1. UBTS #188182. [2]	Link [3]	DEV [4]	APIC [5]	Reserved [6]	Reserved
    UINT32                                          MultiTscCapture:1 ; ///< If trace is written to trace N, where (0<=N<=7), then the time stamp trace (PktType=11b) is written to trace N+1. If N=7 then N+1 is the trace 1 of the next TCB entry. Reserved if D18F2xCC[DisTscCapture]=1.
    UINT32                                                  TscBase:1 ; ///<
    UINT32                                             TrcCmdDstPtr:6 ; ///<Each bit in this field specifies one XBAR port. Bit	Definition [0]	Link [1]	Memory controller [2]	APIC [3]	Register [4]	SYSMGT [5]	DUMMY
    UINT32                                            DisTscCapture:1 ; ///< Trace records are used to capture command/response or data packets. Time stamp location with a trace record based on D18F2xCC[MultiTscCapture].
    UINT32                                             TrcDatSrcDst:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2xCC_STRUCT;

// **** D18F2xF0 Register Definition ****
// Address
#define D18F2xF0_ADDRESS                                        0xf0

// Type
#define D18F2xF0_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2xF0_DctOffset_OFFSET                               0
#define D18F2xF0_DctOffset_WIDTH                                28
#define D18F2xF0_DctOffset_MASK                                 0xfffffff
#define D18F2xF0_Reserved_29_28_OFFSET                          28
#define D18F2xF0_Reserved_29_28_WIDTH                           2
#define D18F2xF0_Reserved_29_28_MASK                            0x30000000
#define D18F2xF0_DctAccessWrite_OFFSET                          30
#define D18F2xF0_DctAccessWrite_WIDTH                           1
#define D18F2xF0_DctAccessWrite_MASK                            0x40000000
#define D18F2xF0_DctAccessDone_OFFSET                           31
#define D18F2xF0_DctAccessDone_WIDTH                            1
#define D18F2xF0_DctAccessDone_MASK                             0x80000000

/// D18F2xF0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                DctOffset:28; ///<
    UINT32                                           Reserved_29_28:2 ; ///<
    UINT32                                           DctAccessWrite:1 ; ///<
    UINT32                                            DctAccessDone:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2xF0_STRUCT;

// **** D18F2xF4 Register Definition ****
// Address
#define D18F2xF4_ADDRESS                                        0xf4

// Type
#define D18F2xF4_TYPE                                           TYPE_D18F2
// Field Data
#define D18F2xF4_DctExtDataPort_OFFSET                          0
#define D18F2xF4_DctExtDataPort_WIDTH                           32
#define D18F2xF4_DctExtDataPort_MASK                            0xffffffff

/// D18F2xF4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           DctExtDataPort:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2xF4_STRUCT;

// **** D18F2x110 Register Definition ****
// Address
#define D18F2x110_ADDRESS                                       0x110

// Type
#define D18F2x110_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x110_Reserved_0_0_OFFSET                           0
#define D18F2x110_Reserved_0_0_WIDTH                            1
#define D18F2x110_Reserved_0_0_MASK                             0x1
#define D18F2x110_Reserved_1_1_OFFSET                           1
#define D18F2x110_Reserved_1_1_WIDTH                            1
#define D18F2x110_Reserved_1_1_MASK                             0x2
#define D18F2x110_Reserved_2_2_OFFSET                           2
#define D18F2x110_Reserved_2_2_WIDTH                            1
#define D18F2x110_Reserved_2_2_MASK                             0x4
#define D18F2x110_MemClrInit_OFFSET                             3
#define D18F2x110_MemClrInit_WIDTH                              1
#define D18F2x110_MemClrInit_MASK                               0x8
#define D18F2x110_Reserved_5_4_OFFSET                           4
#define D18F2x110_Reserved_5_4_WIDTH                            2
#define D18F2x110_Reserved_5_4_MASK                             0x30
#define D18F2x110_Reserved_7_6_OFFSET                           6
#define D18F2x110_Reserved_7_6_WIDTH                            2
#define D18F2x110_Reserved_7_6_MASK                             0xc0
#define D18F2x110_DramEnable_OFFSET                             8
#define D18F2x110_DramEnable_WIDTH                              1
#define D18F2x110_DramEnable_MASK                               0x100
#define D18F2x110_MemClrBusy_OFFSET                             9
#define D18F2x110_MemClrBusy_WIDTH                              1
#define D18F2x110_MemClrBusy_MASK                               0x200
#define D18F2x110_MemCleared_OFFSET                             10
#define D18F2x110_MemCleared_WIDTH                              1
#define D18F2x110_MemCleared_MASK                               0x400
#define D18F2x110_Reserved_23_11_OFFSET                         11
#define D18F2x110_Reserved_23_11_WIDTH                          13
#define D18F2x110_Reserved_23_11_MASK                           0xfff800
#define D18F2x110_Reserved_31_24_OFFSET                         24
#define D18F2x110_Reserved_31_24_WIDTH                          8
#define D18F2x110_Reserved_31_24_MASK                           0xff000000

/// D18F2x110
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<DctSelHiRngEn.
    UINT32                                             Reserved_1_1:1 ; ///<DctSelHi.
    UINT32                                             Reserved_2_2:1 ; ///<DctSelIntLvEn.
    UINT32                                               MemClrInit:1 ; ///< If D18F1xF0[DramHoleValid]=1 then memory is cleared: from 0 ({D18F1x40[DramBase[39:24]], 00_0000h}) to ({00h,D18F1xF0[DramHoleBase[31:24]],000000h}-1). from 01_00000000h (4 GB) to {D18F1x40[DramLimit[39:24]], FF_FFFFh}. Undefined behavior may result if the DRAM hole is enabled (D18F1xF0[DramHoleValid]=1) and D18F1x40[DramLimit[39:32]]=00h. (The DRAM hole is enabled and the DRAM limit is below 4 GB.) The status of the memory clear operation can be determined by reading the MemClrBusy and MemCleared bits. This command is ignored if MemClrBusy=1 when the command is received. BIOS must set the following registers before setting MemClrInit: D18F1x40 [DRAM Base] D18F1xF0 [DRAM Hole Address] D18F2x80 [DRAM Bank Address Mapping] D18F2x[4C:40] [DRAM CS Base Address] D18F2x[64:60] [DRAM CS Mask] D18F2x110 [DRAM Controller Select Low] D18F2x114 [DRAM Controller Select High] DramEnable must be set before setting MemClrInit. The memory prefetcher (see D18F2x11C) must be disabled before memory clear initialization and then can be re-enabled when MemCleared=1.
    UINT32                                             Reserved_5_4:2 ; ///<
    UINT32                                             Reserved_7_6:2 ; ///<DctSelIntLvAddr[1:0]. This field must be remain zero or the address bit selection in D18F2xA8[BankSwap] will not function correctly.
    UINT32                                               DramEnable:1 ; ///<10.4.6 [DRAM Device Initialization]) or the DCT has exited from self refresh (D18F2x90[ExitSelfRef] transitions from 1 to 0).
    UINT32                                               MemClrBusy:1 ; ///< Reads or writes to DRAM while the memory clear operation is in progress result in undefined behavior.
    UINT32                                               MemCleared:1 ; ///< This bit is set by MemClrInit. See MemClrInit below.
    UINT32                                           Reserved_23_11:13; ///<DctSelBaseAddr[39:27].
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x110_STRUCT;

// **** D18F2x114 Register Definition ****
// Address
#define D18F2x114_ADDRESS                                       0x114

// Type
#define D18F2x114_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x114_Reserved_8_0_OFFSET                           0
#define D18F2x114_Reserved_8_0_WIDTH                            9
#define D18F2x114_Reserved_8_0_MASK                             0x1ff
#define D18F2x114_DctSelBankSwap_OFFSET                         9
#define D18F2x114_DctSelBankSwap_WIDTH                          1
#define D18F2x114_DctSelBankSwap_MASK                           0x200
#define D18F2x114_Reserved_23_10_OFFSET                         10
#define D18F2x114_Reserved_23_10_WIDTH                          14
#define D18F2x114_Reserved_23_10_MASK                           0xfffc00
#define D18F2x114_Reserved_31_24_OFFSET                         24
#define D18F2x114_Reserved_31_24_WIDTH                          8
#define D18F2x114_Reserved_31_24_MASK                           0xff000000

/// D18F2x114
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_8_0:9 ; ///<
    UINT32                                           DctSelBankSwap:1 ; ///<See D18F2xA8[BankSwap]. This bit is DctSelIntLvAddr[2] in the hardware.
    UINT32                                           Reserved_23_10:14; ///<DctSelBaseOffset[39:26].
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x114_STRUCT;

// **** D18F2x118 Register Definition ****
// Address
#define D18F2x118_ADDRESS                                       0x118

// Type
#define D18F2x118_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x118_MctPriCpuRd_OFFSET                            0
#define D18F2x118_MctPriCpuRd_WIDTH                             2
#define D18F2x118_MctPriCpuRd_MASK                              0x3
#define D18F2x118_MctPriCpuWr_OFFSET                            2
#define D18F2x118_MctPriCpuWr_WIDTH                             2
#define D18F2x118_MctPriCpuWr_MASK                              0xc
#define D18F2x118_MctPriHiRd_OFFSET                             4
#define D18F2x118_MctPriHiRd_WIDTH                              2
#define D18F2x118_MctPriHiRd_MASK                               0x30
#define D18F2x118_MctPriHiWr_OFFSET                             6
#define D18F2x118_MctPriHiWr_WIDTH                              2
#define D18F2x118_MctPriHiWr_MASK                               0xc0
#define D18F2x118_MctPriDefault_OFFSET                          8
#define D18F2x118_MctPriDefault_WIDTH                           2
#define D18F2x118_MctPriDefault_MASK                            0x300
#define D18F2x118_MctPriWr_OFFSET                               10
#define D18F2x118_MctPriWr_WIDTH                                2
#define D18F2x118_MctPriWr_MASK                                 0xc00
#define D18F2x118_Reserved_13_12_OFFSET                         12
#define D18F2x118_Reserved_13_12_WIDTH                          2
#define D18F2x118_Reserved_13_12_MASK                           0x3000
#define D18F2x118_MctPriTrace_OFFSET                            14
#define D18F2x118_MctPriTrace_WIDTH                             2
#define D18F2x118_MctPriTrace_MASK                              0xc000
#define D18F2x118_Reserved_18_16_OFFSET                         16
#define D18F2x118_Reserved_18_16_WIDTH                          3
#define D18F2x118_Reserved_18_16_MASK                           0x70000
#define D18F2x118_C6DramLock_OFFSET                             19
#define D18F2x118_C6DramLock_WIDTH                              1
#define D18F2x118_C6DramLock_MASK                               0x80000
#define D18F2x118_Reserved_27_20_OFFSET                         20
#define D18F2x118_Reserved_27_20_WIDTH                          8
#define D18F2x118_Reserved_27_20_MASK                           0xff00000
#define D18F2x118_MctVarPriCntLmt_OFFSET                        28
#define D18F2x118_MctVarPriCntLmt_WIDTH                         4
#define D18F2x118_MctVarPriCntLmt_MASK                          0xf0000000

/// D18F2x118
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              MctPriCpuRd:2 ; ///<
    UINT32                                              MctPriCpuWr:2 ; ///<See: MctPriCpuRd.
    UINT32                                               MctPriHiRd:2 ; ///<See: MctPriCpuRd.
    UINT32                                               MctPriHiWr:2 ; ///<See: MctPriCpuRd.
    UINT32                                            MctPriDefault:2 ; ///<See: MctPriCpuRd.
    UINT32                                                 MctPriWr:2 ; ///<See: MctPriCpuRd.
    UINT32                                           Reserved_13_12:2 ; ///<
    UINT32                                              MctPriTrace:2 ; ///<See: MctPriCpuRd.
    UINT32                                           Reserved_18_16:3 ; ///<
    UINT32                                               C6DramLock:1 ; ///<1=The following registers are read-only: D18F1x44 D18F1xF0 D18F2x[4C:40] D18F2x[64:60] D18F2x80 D18F2x10C D18F2x110 D18F2x114
    UINT32                                           Reserved_27_20:8 ; ///<
    UINT32                                          MctVarPriCntLmt:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x118_STRUCT;

// **** D18F2x11C Register Definition ****
// Address
#define D18F2x11C_ADDRESS                                       0x11c

// Type
#define D18F2x11C_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x11C_Reserved_1_0_OFFSET                           0
#define D18F2x11C_Reserved_1_0_WIDTH                            2
#define D18F2x11C_Reserved_1_0_MASK                             0x3
#define D18F2x11C_DctWrLimit_OFFSET                             2
#define D18F2x11C_DctWrLimit_WIDTH                              5
#define D18F2x11C_DctWrLimit_MASK                               0x7c
#define D18F2x11C_Reserved_11_7_OFFSET                          7
#define D18F2x11C_Reserved_11_7_WIDTH                           5
#define D18F2x11C_Reserved_11_7_MASK                            0xf80
#define D18F2x11C_PrefCpuDis_OFFSET                             12
#define D18F2x11C_PrefCpuDis_WIDTH                              1
#define D18F2x11C_PrefCpuDis_MASK                               0x1000
#define D18F2x11C_Reserved_13_13_OFFSET                         13
#define D18F2x11C_Reserved_13_13_WIDTH                          1
#define D18F2x11C_Reserved_13_13_MASK                           0x2000
#define D18F2x11C_PrefCpuRdSzDis_OFFSET                         14
#define D18F2x11C_PrefCpuRdSzDis_WIDTH                          1
#define D18F2x11C_PrefCpuRdSzDis_MASK                           0x4000
#define D18F2x11C_Reserved_17_15_OFFSET                         15
#define D18F2x11C_Reserved_17_15_WIDTH                          3
#define D18F2x11C_Reserved_17_15_MASK                           0x38000
#define D18F2x11C_PrefConfSat_OFFSET                            18
#define D18F2x11C_PrefConfSat_WIDTH                             2
#define D18F2x11C_PrefConfSat_MASK                              0xc0000
#define D18F2x11C_Reserved_21_20_OFFSET                         20
#define D18F2x11C_Reserved_21_20_WIDTH                          2
#define D18F2x11C_Reserved_21_20_MASK                           0x300000
#define D18F2x11C_PrefConf_OFFSET                               22
#define D18F2x11C_PrefConf_WIDTH                                3
#define D18F2x11C_PrefConf_MASK                                 0x1c00000
#define D18F2x11C_Reserved_28_25_OFFSET                         25
#define D18F2x11C_Reserved_28_25_WIDTH                          4
#define D18F2x11C_Reserved_28_25_MASK                           0x1e000000
#define D18F2x11C_FlushWrOnStpGnt_OFFSET                        29
#define D18F2x11C_FlushWrOnStpGnt_WIDTH                         1
#define D18F2x11C_FlushWrOnStpGnt_MASK                          0x20000000
#define D18F2x11C_FlushWr_OFFSET                                30
#define D18F2x11C_FlushWr_WIDTH                                 1
#define D18F2x11C_FlushWr_MASK                                  0x40000000
#define D18F2x11C_Reserved_31_31_OFFSET                         31
#define D18F2x11C_Reserved_31_31_WIDTH                          1
#define D18F2x11C_Reserved_31_31_MASK                           0x80000000

/// D18F2x11C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_1_0:2 ; ///<
    UINT32                                               DctWrLimit:5 ; ///<Specifies the number of low-priority writes held in the memory controller queue before they are burst into the DCT.
    UINT32                                            Reserved_11_7:5 ; ///<
    UINT32                                               PrefCpuDis:1 ; ///<
    UINT32                                           Reserved_13_13:1 ; ///<
    UINT32                                           PrefCpuRdSzDis:1 ; ///< This bit has no effect if PrefCpuDis=1. Leave disabled during bring up until feature is validated.
    UINT32                                           Reserved_17_15:3 ; ///<
    UINT32                                              PrefConfSat:2 ; ///<Specifies the point at which prefetch confidence level saturates and stops incrementing.
    UINT32                                           Reserved_21_20:2 ; ///<
    UINT32                                                 PrefConf:3 ; ///<Confidence level required to issue one prefetch which is 2 strides ahead. Steady state keeps 2 prefetches ahead.
    UINT32                                           Reserved_28_25:4 ; ///< [28]: RR defined as PrefDramTrainMode.
    UINT32                                          FlushWrOnStpGnt:1 ; ///< This bit should be set to ensure writes are drained to DRAM before reset is asserted for the suspend-to-RAM state.
    UINT32                                                  FlushWr:1 ; ///<Setting this bit causes write bursting to be cancelled and all outstanding writes to be flushed to DRAM. This bit is cleared when all writes are flushed to DRAM.
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x11C_STRUCT;

// **** D18F2x1C0 Register Definition ****
// Address
#define D18F2x1C0_ADDRESS                                       0x1c0

// Type
#define D18F2x1C0_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1C0_WrDramTrainMode_OFFSET                        0
#define D18F2x1C0_WrDramTrainMode_WIDTH                         1
#define D18F2x1C0_WrDramTrainMode_MASK                          0x1
#define D18F2x1C0_WrTrainGo_OFFSET                              1
#define D18F2x1C0_WrTrainGo_WIDTH                               1
#define D18F2x1C0_WrTrainGo_MASK                                0x2
#define D18F2x1C0_TrainLength_OFFSET                            2
#define D18F2x1C0_TrainLength_WIDTH                             16
#define D18F2x1C0_TrainLength_MASK                              0x3fffc
#define D18F2x1C0_Reserved_19_18_OFFSET                         18
#define D18F2x1C0_Reserved_19_18_WIDTH                          2
#define D18F2x1C0_Reserved_19_18_MASK                           0xc0000
#define D18F2x1C0_DramTrainPdbDis_OFFSET                        20
#define D18F2x1C0_DramTrainPdbDis_WIDTH                         1
#define D18F2x1C0_DramTrainPdbDis_MASK                          0x100000
#define D18F2x1C0_AltAddrEn_OFFSET                              21
#define D18F2x1C0_AltAddrEn_WIDTH                               1
#define D18F2x1C0_AltAddrEn_MASK                                0x200000
#define D18F2x1C0_RdDramTrainMode_OFFSET                        22
#define D18F2x1C0_RdDramTrainMode_WIDTH                         1
#define D18F2x1C0_RdDramTrainMode_MASK                          0x400000
#define D18F2x1C0_RdTrainGo_OFFSET                              23
#define D18F2x1C0_RdTrainGo_WIDTH                               1
#define D18F2x1C0_RdTrainGo_MASK                                0x800000
#define D18F2x1C0_Reserved_31_24_OFFSET                         24
#define D18F2x1C0_Reserved_31_24_WIDTH                          8
#define D18F2x1C0_Reserved_31_24_MASK                           0xff000000

/// D18F2x1C0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          WrDramTrainMode:1 ; ///< When WrDramTrainMode=1, RdDramTrainMode must be 0. See D18F2xC0[TcbClkEn].
    UINT32                                                WrTrainGo:1 ; ///< This bit is cleared by hardware when the transfer is complete. See 2.10.4.7.6 [DRAM Training Pattern Generation].
    UINT32                                              TrainLength:16; ///<Specifies the number of cache lines transferred from the write training buffer to the DRAM interface or from the DRAM interface to the read training buffer. See 2.10.4.7.6 [DRAM Training Pattern Generation].
    UINT32                                           Reserved_19_18:2 ; ///<
    UINT32                                          DramTrainPdbDis:1 ; ///< If this bit is 0, all prefetching must be disabled by setting D18F2x11C[PrefCpuRdSzDis, PrefCpuDis]=11b.
    UINT32                                                AltAddrEn:1 ; ///< See 2.10.4.7.6.2 [Alternative Address Mode].
    UINT32                                          RdDramTrainMode:1 ; ///< When RdDramTrainMode=1, WrDramTrainMode must be 0. See D18F2xC0[TcbClkEn].
    UINT32                                                RdTrainGo:1 ; ///< This bit is cleared by hardware when the transfer is complete. See 2.10.4.7.6 [DRAM Training Pattern Generation].
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1C0_STRUCT;

// **** D18F2x1C8 Register Definition ****
// Address
#define D18F2x1C8_ADDRESS                                       0x1c8

// Type
#define D18F2x1C8_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1C8_TrainAddrPtr_37_6__OFFSET                     0
#define D18F2x1C8_TrainAddrPtr_37_6__WIDTH                      32
#define D18F2x1C8_TrainAddrPtr_37_6__MASK                       0xffffffff

/// D18F2x1C8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       TrainAddrPtr_37_6_:32; ///<Specifies the lower bits of the DRAM address pointer in DRAM training mode. See D18F2x1CC. This field is a public mirror for D18F2xBC[TrcBufAdrPtr[37:6]].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1C8_STRUCT;

// **** D18F2x1CC Register Definition ****
// Address
#define D18F2x1CC_ADDRESS                                       0x1cc

// Type
#define D18F2x1CC_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1CC_AltAddr1Ptr_39_38__OFFSET                     0
#define D18F2x1CC_AltAddr1Ptr_39_38__WIDTH                      2
#define D18F2x1CC_AltAddr1Ptr_39_38__MASK                       0x3
#define D18F2x1CC_AltAddr1PtrIt_OFFSET                          2
#define D18F2x1CC_AltAddr1PtrIt_WIDTH                           6
#define D18F2x1CC_AltAddr1PtrIt_MASK                            0xfc
#define D18F2x1CC_AltAddr2Ptr_39_38__OFFSET                     8
#define D18F2x1CC_AltAddr2Ptr_39_38__WIDTH                      2
#define D18F2x1CC_AltAddr2Ptr_39_38__MASK                       0x300
#define D18F2x1CC_AltAddr2PtrIt_OFFSET                          10
#define D18F2x1CC_AltAddr2PtrIt_WIDTH                           6
#define D18F2x1CC_AltAddr2PtrIt_MASK                            0xfc00
#define D18F2x1CC_TrainAddrPtr_39_38__OFFSET                    16
#define D18F2x1CC_TrainAddrPtr_39_38__WIDTH                     2
#define D18F2x1CC_TrainAddrPtr_39_38__MASK                      0x30000
#define D18F2x1CC_TrainAddrPtrIt_OFFSET                         18
#define D18F2x1CC_TrainAddrPtrIt_WIDTH                          6
#define D18F2x1CC_TrainAddrPtrIt_MASK                           0xfc0000
#define D18F2x1CC_AltAddr3Ptr_39_38__OFFSET                     24
#define D18F2x1CC_AltAddr3Ptr_39_38__WIDTH                      2
#define D18F2x1CC_AltAddr3Ptr_39_38__MASK                       0x3000000
#define D18F2x1CC_AltAddr3PtrIt_OFFSET                          26
#define D18F2x1CC_AltAddr3PtrIt_WIDTH                           6
#define D18F2x1CC_AltAddr3PtrIt_MASK                            0xfc000000

/// D18F2x1CC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       AltAddr1Ptr_39_38_:2 ; ///<Specifies the upper bits of the DRAM first alternate address pointer. See D18F2x[1E0:1D8]. AltAddr1Ptr[39:6]={AltAddr1Ptr[39:38], D18F2x[1E0:1D8][AltAddr1Ptr[37:6]]}; See 2.10.4.7.6.2 [Alternative Address Mode].
    UINT32                                            AltAddr1PtrIt:6 ; ///<Specifies the number of times to iterate using AltAddr1Ptr before switching to AltAddr2Ptr. The number of cache lines transferred using AltAddr1Ptr is AltAddr1PtrIt + 1. See 2.10.4.7.6.2 [Alternative Address Mode].
    UINT32                                       AltAddr2Ptr_39_38_:2 ; ///<See AltAddr1Ptr[39:38].
    UINT32                                            AltAddr2PtrIt:6 ; ///<See AltAddr1PtrIt.
    UINT32                                      TrainAddrPtr_39_38_:2 ; ///<Specifies the upper bits of the DRAM address pointer in DRAM training mode. See D18F2x1C8. TrainAddrPtr[39:6]={TrainAddrPtr[39:38], D18F2x1C8[TrainAddrPtr[37:6]]}; See 2.10.4.7.6.1 [Continuous Pattern Generation] and 2.10.4.7.6.2 [Alternative Address Mode]. This field is a public mirror for D18F2xC0[TrcBufAdrPtr[39:38]].
    UINT32                                           TrainAddrPtrIt:6 ; ///<Specifies the number of times to iterate using TrainAddrPtr before switching to AltAddr1Ptr. The number of cache lines transferred using TrainAddrPtr is TrainAddrPtrIt + 1. See 2.10.4.7.6.2 [Alternative Address Mode].
    UINT32                                       AltAddr3Ptr_39_38_:2 ; ///<See AltAddr1Ptr[39:38].
    UINT32                                            AltAddr3PtrIt:6 ; ///<See AltAddr1PtrIt. Specifies the number of times to iterate using AltAddr3Ptr before switching to TrainAddrPtr.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1CC_STRUCT;

// **** D18F2x1D0 Register Definition ****
// Address
#define D18F2x1D0_ADDRESS                                       0x1d0

// Type
#define D18F2x1D0_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1D0_WrTrainBufAddr_OFFSET                         0
#define D18F2x1D0_WrTrainBufAddr_WIDTH                          10
#define D18F2x1D0_WrTrainBufAddr_MASK                           0x3ff
#define D18F2x1D0_Reserved_31_10_OFFSET                         10
#define D18F2x1D0_Reserved_31_10_WIDTH                          22
#define D18F2x1D0_Reserved_31_10_MASK                           0xfffffc00

/// D18F2x1D0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           WrTrainBufAddr:10; ///<Specifies the training data start address in the 1024-doubleword write training buffer. It is incremented by hardware after a write to D18F2x1D4. BIOS must program this register prior to filling the buffer or setting D18F2x1C0[WrTrainGo]. BIOS must write the lower four bits to 0h to begin on a cache line boundary. 
    UINT32                                           Reserved_31_10:22; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1D0_STRUCT;

// **** D18F2x1D4 Register Definition ****
// Address
#define D18F2x1D4_ADDRESS                                       0x1d4

// Type
#define D18F2x1D4_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1D4_WrTrainBufDat_OFFSET                          0
#define D18F2x1D4_WrTrainBufDat_WIDTH                           32
#define D18F2x1D4_WrTrainBufDat_MASK                            0xffffffff

/// D18F2x1D4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            WrTrainBufDat:32; ///< Writing to this register writes the next doubleword of the training pattern to the training write buffer and increments D18F2x1D0[WrTrainBufAddr]. See D18F2x1D0[WrTrainBufAddr].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1D4_STRUCT;

// **** D18F2x1D8 Register Definition ****
// Address
#define D18F2x1D8_ADDRESS                                       0x1d8

// Type
#define D18F2x1D8_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1D8_AltAddrPtr_35_6__OFFSET                       0
#define D18F2x1D8_AltAddrPtr_35_6__WIDTH                        30
#define D18F2x1D8_AltAddrPtr_35_6__MASK                         0x3fffffff
#define D18F2x1D8_Reserved_31_30_OFFSET                         30
#define D18F2x1D8_Reserved_31_30_WIDTH                          2
#define D18F2x1D8_Reserved_31_30_MASK                           0xc0000000

/// D18F2x1D8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         AltAddrPtr_35_6_:30; ///<If D18F2x1C0[AltAddrEn]=1 specifies the lower bits of the DRAM alternate address pointer in DRAM training mode. See D18F2x1CC.
    UINT32                                           Reserved_31_30:2 ; ///<AltAddrPtr[37:36].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1D8_STRUCT;

// **** D18F2x1DC Register Definition ****
// Address
#define D18F2x1DC_ADDRESS                                       0x1dc

// Type
#define D18F2x1DC_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1DC_AltAddrPtr_35_6__OFFSET                       0
#define D18F2x1DC_AltAddrPtr_35_6__WIDTH                        30
#define D18F2x1DC_AltAddrPtr_35_6__MASK                         0x3fffffff
#define D18F2x1DC_Reserved_31_30_OFFSET                         30
#define D18F2x1DC_Reserved_31_30_WIDTH                          2
#define D18F2x1DC_Reserved_31_30_MASK                           0xc0000000

/// D18F2x1DC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         AltAddrPtr_35_6_:30; ///<If D18F2x1C0[AltAddrEn]=1 specifies the lower bits of the DRAM alternate address pointer in DRAM training mode. See D18F2x1CC.
    UINT32                                           Reserved_31_30:2 ; ///<AltAddrPtr[37:36].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1DC_STRUCT;

// **** D18F2x1E0 Register Definition ****
// Address
#define D18F2x1E0_ADDRESS                                       0x1e0

// Type
#define D18F2x1E0_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1E0_AltAddrPtr_35_6__OFFSET                       0
#define D18F2x1E0_AltAddrPtr_35_6__WIDTH                        30
#define D18F2x1E0_AltAddrPtr_35_6__MASK                         0x3fffffff
#define D18F2x1E0_Reserved_31_30_OFFSET                         30
#define D18F2x1E0_Reserved_31_30_WIDTH                          2
#define D18F2x1E0_Reserved_31_30_MASK                           0xc0000000

/// D18F2x1E0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         AltAddrPtr_35_6_:30; ///<If D18F2x1C0[AltAddrEn]=1 specifies the lower bits of the DRAM alternate address pointer in DRAM training mode. See D18F2x1CC.
    UINT32                                           Reserved_31_30:2 ; ///<AltAddrPtr[37:36].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1E0_STRUCT;

// **** D18F2x1E8 Register Definition ****
// Address
#define D18F2x1E8_ADDRESS                                       0x1e8

// Type
#define D18F2x1E8_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1E8_TrainCmpSts_OFFSET                            0
#define D18F2x1E8_TrainCmpSts_WIDTH                             8
#define D18F2x1E8_TrainCmpSts_MASK                              0xff
#define D18F2x1E8_TrainCmpSts2_OFFSET                           8
#define D18F2x1E8_TrainCmpSts2_WIDTH                            8
#define D18F2x1E8_TrainCmpSts2_MASK                             0xff00
#define D18F2x1E8_Reserved_31_16_OFFSET                         16
#define D18F2x1E8_Reserved_31_16_WIDTH                          16
#define D18F2x1E8_Reserved_31_16_MASK                           0xffff0000

/// D18F2x1E8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              TrainCmpSts:8 ; ///<Contains the comparison results between write and read training data. TrainCmpSts[0] contains result for byte lane 0, TrainCmpSts[7] contains the result of byte lane 7. Hardware clears the field when D18F2x1C0[RdDramTrainMode] changes from 0 to 1.
    UINT32                                             TrainCmpSts2:8 ; ///<Contains the comparison results between write and read training data. The last beat of read data in all cache line transfers is ignored. The read data of beats 0 to 6 are compared against the write data of beats 1 to 7. TrainCmpSts2[0] contains result for byte lane 0, TrainCmpSts2[7] contains the result of byte lane 7. Hardware clears the field when D18F2x1C0[RdDramTrainMode] changes from 0 to 1.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1E8_STRUCT;

// **** D18F3x00 Register Definition ****
// Address
#define D18F3x00_ADDRESS                                        0x0

// Type
#define D18F3x00_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x00_VendorID_OFFSET                                0
#define D18F3x00_VendorID_WIDTH                                 16
#define D18F3x00_VendorID_MASK                                  0xffff
#define D18F3x00_DeviceID_OFFSET                                16
#define D18F3x00_DeviceID_WIDTH                                 16
#define D18F3x00_DeviceID_MASK                                  0xffff0000

/// D18F3x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VendorID:16; ///<
    UINT32                                                 DeviceID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x00_STRUCT;

// **** D18F3x04 Register Definition ****
// Address
#define D18F3x04_ADDRESS                                        0x4

// Type
#define D18F3x04_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x04_Command_OFFSET                                 0
#define D18F3x04_Command_WIDTH                                  16
#define D18F3x04_Command_MASK                                   0xffff
#define D18F3x04_Status_OFFSET                                  16
#define D18F3x04_Status_WIDTH                                   16
#define D18F3x04_Status_MASK                                    0xffff0000

/// D18F3x04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Command:16; ///<
    UINT32                                                   Status:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x04_STRUCT;

// **** D18F3x08 Register Definition ****
// Address
#define D18F3x08_ADDRESS                                        0x8

// Type
#define D18F3x08_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x08_RevID_OFFSET                                   0
#define D18F3x08_RevID_WIDTH                                    8
#define D18F3x08_RevID_MASK                                     0xff
#define D18F3x08_ClassCode_OFFSET                               8
#define D18F3x08_ClassCode_WIDTH                                24
#define D18F3x08_ClassCode_MASK                                 0xffffff00

/// D18F3x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    RevID:8 ; ///<
    UINT32                                                ClassCode:24; ///<Provides the host bridge class code as defined in the PCI specification.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x08_STRUCT;

// **** D18F3x0C Register Definition ****
// Address
#define D18F3x0C_ADDRESS                                        0xc

// Type
#define D18F3x0C_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x0C_HeaderTypeReg_OFFSET                           0
#define D18F3x0C_HeaderTypeReg_WIDTH                            32
#define D18F3x0C_HeaderTypeReg_MASK                             0xffffffff

/// D18F3x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            HeaderTypeReg:32; ///<The header type field indicates that there are multiple functions present in this device.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x0C_STRUCT;

// **** D18F3x34 Register Definition ****
// Address
#define D18F3x34_ADDRESS                                        0x34

// Type
#define D18F3x34_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x34_CapPtr_OFFSET                                  0
#define D18F3x34_CapPtr_WIDTH                                   8
#define D18F3x34_CapPtr_MASK                                    0xff
#define D18F3x34_Reserved_31_8_OFFSET                           8
#define D18F3x34_Reserved_31_8_WIDTH                            24
#define D18F3x34_Reserved_31_8_MASK                             0xffffff00

/// D18F3x34
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   CapPtr:8 ; ///<Specifies the configuration-space offset of the capabilities pointer.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x34_STRUCT;

// **** D18F3x40 Register Definition ****
// Address
#define D18F3x40_ADDRESS                                        0x40

// Type
#define D18F3x40_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x40_Reserved_4_0_OFFSET                            0
#define D18F3x40_Reserved_4_0_WIDTH                             5
#define D18F3x40_Reserved_4_0_MASK                              0x1f
#define D18F3x40_SyncFloodEn_OFFSET                             5
#define D18F3x40_SyncFloodEn_WIDTH                              1
#define D18F3x40_SyncFloodEn_MASK                               0x20
#define D18F3x40_Reserved_7_6_OFFSET                            6
#define D18F3x40_Reserved_7_6_WIDTH                             2
#define D18F3x40_Reserved_7_6_MASK                              0xc0
#define D18F3x40_MstrAbortEn_OFFSET                             8
#define D18F3x40_MstrAbortEn_WIDTH                              1
#define D18F3x40_MstrAbortEn_MASK                               0x100
#define D18F3x40_TgtAbortEn_OFFSET                              9
#define D18F3x40_TgtAbortEn_WIDTH                               1
#define D18F3x40_TgtAbortEn_MASK                                0x200
#define D18F3x40_Reserved_10_10_OFFSET                          10
#define D18F3x40_Reserved_10_10_WIDTH                           1
#define D18F3x40_Reserved_10_10_MASK                            0x400
#define D18F3x40_AtomicRMWEn_OFFSET                             11
#define D18F3x40_AtomicRMWEn_WIDTH                              1
#define D18F3x40_AtomicRMWEn_MASK                               0x800
#define D18F3x40_WDTRptEn_OFFSET                                12
#define D18F3x40_WDTRptEn_WIDTH                                 1
#define D18F3x40_WDTRptEn_MASK                                  0x1000
#define D18F3x40_DevErrEn_OFFSET                                13
#define D18F3x40_DevErrEn_WIDTH                                 1
#define D18F3x40_DevErrEn_MASK                                  0x2000
#define D18F3x40_Reserved_15_14_OFFSET                          14
#define D18F3x40_Reserved_15_14_WIDTH                           2
#define D18F3x40_Reserved_15_14_MASK                            0xc000
#define D18F3x40_OnionProtEn_OFFSET                             16
#define D18F3x40_OnionProtEn_WIDTH                              1
#define D18F3x40_OnionProtEn_MASK                               0x10000
#define D18F3x40_OnionDataEn_OFFSET                             17
#define D18F3x40_OnionDataEn_WIDTH                              1
#define D18F3x40_OnionDataEn_MASK                               0x20000
#define D18F3x40_Reserved_24_18_OFFSET                          18
#define D18F3x40_Reserved_24_18_WIDTH                           7
#define D18F3x40_Reserved_24_18_MASK                            0x1fc0000
#define D18F3x40_McaUsPwDatErrEn_OFFSET                         25
#define D18F3x40_McaUsPwDatErrEn_WIDTH                          1
#define D18F3x40_McaUsPwDatErrEn_MASK                           0x2000000
#define D18F3x40_Reserved_31_26_OFFSET                          26
#define D18F3x40_Reserved_31_26_WIDTH                           6
#define D18F3x40_Reserved_31_26_MASK                            0xfc000000

/// D18F3x40
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                              SyncFloodEn:1 ; ///<
    UINT32                                             Reserved_7_6:2 ; ///<
    UINT32                                              MstrAbortEn:1 ; ///< The NB returns an error response back to the requestor with any associated data all 1s independent of the state of this bit.
    UINT32                                               TgtAbortEn:1 ; ///< The NB returns an error response back to the requestor with any associated data all 1s independent of the state of this bit.
    UINT32                                           Reserved_10_10:1 ; ///<
    UINT32                                              AtomicRMWEn:1 ; ///< Atomic RMW commands are not supported. An atomic RMW command results in a link error response being generated back to the requesting IO device. The generation of the link error response is not affected by this bit.
    UINT32                                                 WDTRptEn:1 ; ///< The watchdog timer checks for NB system accesses for which a response is expected but no response is received. See D18F3x44 [MCA NB Configuration] for information regarding configuration of the watchdog timer duration. This bit does not affect operation of the watchdog timer in terms of its ability to complete an access that would otherwise cause a system hang. This bit only affects whether such errors are reported through MCA.
    UINT32                                                 DevErrEn:1 ; ///<
    UINT32                                           Reserved_15_14:2 ; ///<
    UINT32                                              OnionProtEn:1 ; ///<
    UINT32                                              OnionDataEn:1 ; ///<
    UINT32                                           Reserved_24_18:7 ; ///<
    UINT32                                          McaUsPwDatErrEn:1 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x40_STRUCT;

// **** D18F3x44 Register Definition ****
// Address
#define D18F3x44_ADDRESS                                        0x44

// Type
#define D18F3x44_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x44_Reserved_0_0_OFFSET                            0
#define D18F3x44_Reserved_0_0_WIDTH                             1
#define D18F3x44_Reserved_0_0_MASK                              0x1
#define D18F3x44_CpuRdDatErrEn_OFFSET                           1
#define D18F3x44_CpuRdDatErrEn_WIDTH                            1
#define D18F3x44_CpuRdDatErrEn_MASK                             0x2
#define D18F3x44_Reserved_2_2_OFFSET                            2
#define D18F3x44_Reserved_2_2_WIDTH                             1
#define D18F3x44_Reserved_2_2_MASK                              0x4
#define D18F3x44_Reserved_4_3_OFFSET                            3
#define D18F3x44_Reserved_4_3_WIDTH                             2
#define D18F3x44_Reserved_4_3_MASK                              0x18
#define D18F3x44_IoMstAbortDis_OFFSET                           5
#define D18F3x44_IoMstAbortDis_WIDTH                            1
#define D18F3x44_IoMstAbortDis_MASK                             0x20
#define D18F3x44_CpuErrDis_OFFSET                               6
#define D18F3x44_CpuErrDis_WIDTH                                1
#define D18F3x44_CpuErrDis_MASK                                 0x40
#define D18F3x44_IoErrDis_OFFSET                                7
#define D18F3x44_IoErrDis_WIDTH                                 1
#define D18F3x44_IoErrDis_MASK                                  0x80
#define D18F3x44_WDTDis_OFFSET                                  8
#define D18F3x44_WDTDis_WIDTH                                   1
#define D18F3x44_WDTDis_MASK                                    0x100
#define D18F3x44_WDTCntSel_2_0__OFFSET                          9
#define D18F3x44_WDTCntSel_2_0__WIDTH                           3
#define D18F3x44_WDTCntSel_2_0__MASK                            0xe00
#define D18F3x44_WDTBaseSel_OFFSET                              12
#define D18F3x44_WDTBaseSel_WIDTH                               2
#define D18F3x44_WDTBaseSel_MASK                                0x3000
#define D18F3x44_Reserved_19_14_OFFSET                          14
#define D18F3x44_Reserved_19_14_WIDTH                           6
#define D18F3x44_Reserved_19_14_MASK                            0xfc000
#define D18F3x44_SyncOnWDTEn_OFFSET                             20
#define D18F3x44_SyncOnWDTEn_WIDTH                              1
#define D18F3x44_SyncOnWDTEn_MASK                               0x100000
#define D18F3x44_SyncOnAnyErrEn_OFFSET                          21
#define D18F3x44_SyncOnAnyErrEn_WIDTH                           1
#define D18F3x44_SyncOnAnyErrEn_MASK                            0x200000
#define D18F3x44_Reserved_23_22_OFFSET                          22
#define D18F3x44_Reserved_23_22_WIDTH                           2
#define D18F3x44_Reserved_23_22_MASK                            0xc00000
#define D18F3x44_IoRdDatErrEn_OFFSET                            24
#define D18F3x44_IoRdDatErrEn_WIDTH                             1
#define D18F3x44_IoRdDatErrEn_MASK                              0x1000000
#define D18F3x44_DisPciCfgCpuErrRsp_OFFSET                      25
#define D18F3x44_DisPciCfgCpuErrRsp_WIDTH                       1
#define D18F3x44_DisPciCfgCpuErrRsp_MASK                        0x2000000
#define D18F3x44_CorrMcaExcEn_OFFSET                            26
#define D18F3x44_CorrMcaExcEn_WIDTH                             1
#define D18F3x44_CorrMcaExcEn_MASK                              0x4000000
#define D18F3x44_NbMcaToMstCpuEn_OFFSET                         27
#define D18F3x44_NbMcaToMstCpuEn_WIDTH                          1
#define D18F3x44_NbMcaToMstCpuEn_MASK                           0x8000000
#define D18F3x44_DisTgtAbtCpuErrRsp_OFFSET                      28
#define D18F3x44_DisTgtAbtCpuErrRsp_WIDTH                       1
#define D18F3x44_DisTgtAbtCpuErrRsp_MASK                        0x10000000
#define D18F3x44_DisMstAbtCpuErrRsp_OFFSET                      29
#define D18F3x44_DisMstAbtCpuErrRsp_WIDTH                       1
#define D18F3x44_DisMstAbtCpuErrRsp_MASK                        0x20000000
#define D18F3x44_Reserved_30_30_OFFSET                          30
#define D18F3x44_Reserved_30_30_WIDTH                           1
#define D18F3x44_Reserved_30_30_MASK                            0x40000000
#define D18F3x44_NbMcaLogEn_OFFSET                              31
#define D18F3x44_NbMcaLogEn_WIDTH                               1
#define D18F3x44_NbMcaLogEn_MASK                                0x80000000

/// D18F3x44
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                            CpuRdDatErrEn:1 ; ///< This bit should be clear if read data error logging is enabled for the remaining error reporting blocks in the CPU. Logging the same error in more than one block may cause a single error event to be treated as a multiple error event and cause the CPU to enter shutdown.
    UINT32                                             Reserved_2_2:1 ; ///<
    UINT32                                             Reserved_4_3:2 ; ///<
    UINT32                                            IoMstAbortDis:1 ; ///< When IoMstAbortDis and D18F3x180[MstAbtChgToNoErrs] are both set, D18F3x180[MstAbtChgToNoErrs] takes precedence.
    UINT32                                                CpuErrDis:1 ; ///<
    UINT32                                                 IoErrDis:1 ; ///<
    UINT32                                                   WDTDis:1 ; ///< The watchdog timer is enabled by default and checks for NB system accesses for which a response is expected and where no response is received. If such a condition is detected the outstanding access is completed by generating an error response back to the requestor. An MCA error may also be generated if enabled in D18F3x40 [MCA NB Control].
    UINT32                                           WDTCntSel_2_0_:3 ; ///<Selects the count used by the watchdog timer. WDTCntSel is a 4-bit field composed of {D18F3x180[WDTCntSel[3]], D18F3x44[WDTCntSel[2:0]]}. The counter selected by WDTCntSel determines the maximum count value in the time base selected by WDTBaseSel. WDTCntSel is encoded as: Because WDTCntSel is split between two registers, care must be taken when programming WDTCntSel to ensure that a reserved value is never used by the watchdog timer or undefined behavior could result.
    UINT32                                               WDTBaseSel:2 ; ///<Selects the time base used by the watchdog timer. The counter selected by WDTCntSel determines the maximum count value in the time base selected by WDTBaseSel.
    UINT32                                           Reserved_19_14:6 ; ///<
    UINT32                                              SyncOnWDTEn:1 ; ///< See 2.12.4.8 [SYNC_FLOOD Message].
    UINT32                                           SyncOnAnyErrEn:1 ; ///< See 2.12.4.8 [SYNC_FLOOD Message].
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                             IoRdDatErrEn:1 ; ///<
    UINT32                                       DisPciCfgCpuErrRsp:1 ; ///< Also, for NB WDT errors on PCI configuration accesses, this prevents sending an error response to the core, but does not affect logging and reporting of the NB WDT error. See D18F3x180[DisPciCfgCpuMstAbtRsp], which applies only to master aborts.
    UINT32                                             CorrMcaExcEn:1 ; ///<
    UINT32                                          NbMcaToMstCpuEn:1 ; ///< This field does not affect PCI-defined configuration space accesses to these registers, which are accessible from all cores. See 3.1 [Register Descriptions and Mnemonics] for a description of MSR space and 3 [Registers] for PCI-defined configuration space. When the CPU which originates a request is known, it is stored in D18F3x4C[ErrCPU], regardless of the setting of NbMcaToMstCpuEn. If IO originated the request, then the error is reported to core 0, regardless of the setting of NbMcaToMstCpuEn.
    UINT32                                       DisTgtAbtCpuErrRsp:1 ; ///< Target abort errors do not cause a sync flood when this bit is set.
    UINT32                                       DisMstAbtCpuErrRsp:1 ; ///< Master abort errors do not cause a sync flood when this bit is set.
    UINT32                                           Reserved_30_30:1 ; ///<
    UINT32                                               NbMcaLogEn:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x44_STRUCT;

// **** D18F3x48 Register Definition ****
// Address
#define D18F3x48_ADDRESS                                        0x48

// Type
#define D18F3x48_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x48_ErrorCode_OFFSET                               0
#define D18F3x48_ErrorCode_WIDTH                                16
#define D18F3x48_ErrorCode_MASK                                 0xffff
#define D18F3x48_ErrorCodeExt_OFFSET                            16
#define D18F3x48_ErrorCodeExt_WIDTH                             5
#define D18F3x48_ErrorCodeExt_MASK                              0x1f0000
#define D18F3x48_Reserved_31_21_OFFSET                          21
#define D18F3x48_Reserved_31_21_WIDTH                           11
#define D18F3x48_Reserved_31_21_MASK                            0xffe00000

/// D18F3x48
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                ErrorCode:16; ///<Logs an error code when an error is detected. See Table 93, Table 94, Table 95, Table 96, Table 97 for the ErrorCode encodings.
    UINT32                                             ErrorCodeExt:5 ; ///<Logs the extended error code when an error is detected. See Table 191 for the ErrorCodeExt encodings.
    UINT32                                           Reserved_31_21:11; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x48_STRUCT;

// **** D18F3x4C Register Definition ****
// Address
#define D18F3x4C_ADDRESS                                        0x4c

// Type
#define D18F3x4C_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x4C_ErrCPU_OFFSET                                  0
#define D18F3x4C_ErrCPU_WIDTH                                   2
#define D18F3x4C_ErrCPU_MASK                                    0x3
#define D18F3x4C_Reserved_3_2_OFFSET                            2
#define D18F3x4C_Reserved_3_2_WIDTH                             2
#define D18F3x4C_Reserved_3_2_MASK                              0xc
#define D18F3x4C_BusErr_OFFSET                                  4
#define D18F3x4C_BusErr_WIDTH                                   1
#define D18F3x4C_BusErr_MASK                                    0x10
#define D18F3x4C_Reserved_24_5_OFFSET                           5
#define D18F3x4C_Reserved_24_5_WIDTH                            20
#define D18F3x4C_Reserved_24_5_MASK                             0x1ffffe0
#define D18F3x4C_PCC_OFFSET                                     25
#define D18F3x4C_PCC_WIDTH                                      1
#define D18F3x4C_PCC_MASK                                       0x2000000
#define D18F3x4C_AddrV_OFFSET                                   26
#define D18F3x4C_AddrV_WIDTH                                    1
#define D18F3x4C_AddrV_MASK                                     0x4000000
#define D18F3x4C_Reserved_27_27_OFFSET                          27
#define D18F3x4C_Reserved_27_27_WIDTH                           1
#define D18F3x4C_Reserved_27_27_MASK                            0x8000000
#define D18F3x4C_En_OFFSET                                      28
#define D18F3x4C_En_WIDTH                                       1
#define D18F3x4C_En_MASK                                        0x10000000
#define D18F3x4C_UC_OFFSET                                      29
#define D18F3x4C_UC_WIDTH                                       1
#define D18F3x4C_UC_MASK                                        0x20000000
#define D18F3x4C_Over_OFFSET                                    30
#define D18F3x4C_Over_WIDTH                                     1
#define D18F3x4C_Over_MASK                                      0x40000000
#define D18F3x4C_Val_OFFSET                                     31
#define D18F3x4C_Val_WIDTH                                      1
#define D18F3x4C_Val_MASK                                       0x80000000

/// D18F3x4C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   ErrCPU:2 ; ///<This field indicates which core within the processor is associated with the error. IF (REVA0) THEN See UBTS #188182. ENDIF. ErrCPU[1] = Error associated with core 1. ErrCPU[0] = Error associated with core 0.
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                                   BusErr:1 ; ///<
    UINT32                                            Reserved_24_5:20; ///<
    UINT32                                                      PCC:1 ; ///< Reliable restarting might not be possible.
    UINT32                                                    AddrV:1 ; ///<
    UINT32                                           Reserved_27_27:1 ; ///<
    UINT32                                                       En:1 ; ///<
    UINT32                                                       UC:1 ; ///<
    UINT32                                                     Over:1 ; ///< When Over and UC are both set, critical error information may have been lost, and software should terminate system processing to prevent data corruption (see 2.19.2.4 [Handling Machine Check Exceptions]). For certain conditions, a new error seen while Val is set may cause Over to be set, regardless of error priority or whether information was lost. Therefore, if UC is not indicated, there is no need to terminate the system, as any lost information was not critical.  If the existing error is overwritten, Over is not set. Table 90 describes the conditions under which a younger error overwrites an older error.
    UINT32                                                      Val:1 ; ///< This bit should be cleared to 0 by software after the register has been read.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x4C_STRUCT;

// **** D18F3x50 Register Definition ****
// Address
#define D18F3x50_ADDRESS                                        0x50

// Type
#define D18F3x50_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x50_ErrorAddr_31_0__OFFSET                         0
#define D18F3x50_ErrorAddr_31_0__WIDTH                          32
#define D18F3x50_ErrorAddr_31_0__MASK                           0xffffffff

/// D18F3x50
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          ErrorAddr_31_0_:32; ///< Error address.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x50_STRUCT;

// **** D18F3x54 Register Definition ****
// Address
#define D18F3x54_ADDRESS                                        0x54

// Type
#define D18F3x54_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x54_ErrorAddr_39_32__OFFSET                        0
#define D18F3x54_ErrorAddr_39_32__WIDTH                         8
#define D18F3x54_ErrorAddr_39_32__MASK                          0xff
#define D18F3x54_Reserved_31_8_OFFSET                           8
#define D18F3x54_Reserved_31_8_WIDTH                            24
#define D18F3x54_Reserved_31_8_MASK                             0xffffff00

/// D18F3x54
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         ErrorAddr_39_32_:8 ; ///<
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x54_STRUCT;

// **** D18F3x64 Register Definition ****
// Address
#define D18F3x64_ADDRESS                                        0x64

// Type
#define D18F3x64_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x64_HtcEn_OFFSET                                   0
#define D18F3x64_HtcEn_WIDTH                                    1
#define D18F3x64_HtcEn_MASK                                     0x1
#define D18F3x64_Reserved_3_1_OFFSET                            1
#define D18F3x64_Reserved_3_1_WIDTH                             3
#define D18F3x64_Reserved_3_1_MASK                              0xe
#define D18F3x64_HtcAct_OFFSET                                  4
#define D18F3x64_HtcAct_WIDTH                                   1
#define D18F3x64_HtcAct_MASK                                    0x10
#define D18F3x64_HtcActSts_OFFSET                               5
#define D18F3x64_HtcActSts_WIDTH                                1
#define D18F3x64_HtcActSts_MASK                                 0x20
#define D18F3x64_PslApicHiEn_OFFSET                             6
#define D18F3x64_PslApicHiEn_WIDTH                              1
#define D18F3x64_PslApicHiEn_MASK                               0x40
#define D18F3x64_PslApicLoEn_OFFSET                             7
#define D18F3x64_PslApicLoEn_WIDTH                              1
#define D18F3x64_PslApicLoEn_MASK                               0x80
#define D18F3x64_Reserved_15_8_OFFSET                           8
#define D18F3x64_Reserved_15_8_WIDTH                            8
#define D18F3x64_Reserved_15_8_MASK                             0xff00
#define D18F3x64_HtcTmpLmt_OFFSET                               16
#define D18F3x64_HtcTmpLmt_WIDTH                                7
#define D18F3x64_HtcTmpLmt_MASK                                 0x7f0000
#define D18F3x64_HtcSlewSel_OFFSET                              23
#define D18F3x64_HtcSlewSel_WIDTH                               1
#define D18F3x64_HtcSlewSel_MASK                                0x800000
#define D18F3x64_HtcHystLmt_OFFSET                              24
#define D18F3x64_HtcHystLmt_WIDTH                               4
#define D18F3x64_HtcHystLmt_MASK                                0xf000000
#define D18F3x64_HtcPstateLimit_OFFSET                          28
#define D18F3x64_HtcPstateLimit_WIDTH                           3
#define D18F3x64_HtcPstateLimit_MASK                            0x70000000
#define D18F3x64_HtcLock_OFFSET                                 31
#define D18F3x64_HtcLock_WIDTH                                  1
#define D18F3x64_HtcLock_MASK                                   0x80000000

/// D18F3x64
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    HtcEn:1 ; ///< If Fuse[HtcMsrLock]=1, although HtcEn is reserved read-only 0, the logic acts like HtcEn=1.
    UINT32                                             Reserved_3_1:3 ; ///<
    UINT32                                                   HtcAct:1 ; ///<(Can be asserted out of reset when Fuse[HtcMsrLock]=1 and the processor immediately goes into the HTC-active state). BOZO: BenB to add statement regarding possibility of bad P-state transition when HtcAct toggles at about the same time as PROCHOT_L.
    UINT32                                                HtcActSts:1 ; ///<This bit is set by hardware when the processor enters the HTC-active state. It is cleared by writing a 1 to it.
    UINT32                                              PslApicHiEn:1 ; ///<See: PslApicLoEn.
    UINT32                                              PslApicLoEn:1 ; ///<PslApicLoEn and PslApicHiEn enable interrupts using APIC330 of each core when the active P-state limit in MSRC001_0061[CurPstateLimit] changes. PslApicLoEn enables the interrupt when the limit value becomes lower (indicating higher performance). PslApicHiEn enables the interrupt when the limit value becomes higher (indicating lower performance).
    UINT32                                            Reserved_15_8:8 ; ///<
    UINT32                                                HtcTmpLmt:7 ; ///<The processor enters the HTC-active state when the temperature selected by HtcSlewSel reaches or exceeds the temperature limit HtcTmpLmt.
    UINT32                                               HtcSlewSel:1 ; ///<
    UINT32                                               HtcHystLmt:4 ; ///<The processor exits the HTC-active state when the temperature selected by HtcSlewSel is less than the HTC temperature limit (HtcTmpLmt) minus the HTC hysteresis (HtcHystLmt).
    UINT32                                           HtcPstateLimit:3 ; ///<Specifies the P-state limit of all cores when in the P-state based HTC-active state. The HtcPstateLimit to apply is not changed if the value of this field is greater than MSRC001_0061[PstateMaxVal]. See 2.11.5.1 [PROCHOT_L and Hardware Thermal Control (HTC)].
    UINT32                                                  HtcLock:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x64_STRUCT;

// **** D18F3x6C Register Definition ****
// Address
#define D18F3x6C_ADDRESS                                        0x6c

// Type
#define D18F3x6C_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x6C_UpLoPreqDBC_OFFSET                             0
#define D18F3x6C_UpLoPreqDBC_WIDTH                              4
#define D18F3x6C_UpLoPreqDBC_MASK                               0xf
#define D18F3x6C_UpLoNpreqDBC_OFFSET                            4
#define D18F3x6C_UpLoNpreqDBC_WIDTH                             4
#define D18F3x6C_UpLoNpreqDBC_MASK                              0xf0
#define D18F3x6C_UpLoRespDBC_OFFSET                             8
#define D18F3x6C_UpLoRespDBC_WIDTH                              4
#define D18F3x6C_UpLoRespDBC_MASK                               0xf00
#define D18F3x6C_Reserved_15_12_OFFSET                          12
#define D18F3x6C_Reserved_15_12_WIDTH                           4
#define D18F3x6C_Reserved_15_12_MASK                            0xf000
#define D18F3x6C_UpHiPreqDBC_OFFSET                             16
#define D18F3x6C_UpHiPreqDBC_WIDTH                              4
#define D18F3x6C_UpHiPreqDBC_MASK                               0xf0000
#define D18F3x6C_UpHiNpreqDBC_OFFSET                            20
#define D18F3x6C_UpHiNpreqDBC_WIDTH                             4
#define D18F3x6C_UpHiNpreqDBC_MASK                              0xf00000
#define D18F3x6C_UpHiRespDBC_OFFSET                             24
#define D18F3x6C_UpHiRespDBC_WIDTH                              4
#define D18F3x6C_UpHiRespDBC_MASK                               0xf000000
#define D18F3x6C_Reserved_31_28_OFFSET                          28
#define D18F3x6C_Reserved_31_28_WIDTH                           4
#define D18F3x6C_Reserved_31_28_MASK                            0xf0000000

/// D18F3x6C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              UpLoPreqDBC:4 ; ///<
    UINT32                                             UpLoNpreqDBC:4 ; ///<
    UINT32                                              UpLoRespDBC:4 ; ///<
    UINT32                                           Reserved_15_12:4 ; ///<
    UINT32                                              UpHiPreqDBC:4 ; ///<
    UINT32                                             UpHiNpreqDBC:4 ; ///<
    UINT32                                              UpHiRespDBC:4 ; ///<Channel exists but the GNB does not initiate traffic using this channel.
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x6C_STRUCT;

// **** D18F3x74 Register Definition ****
// Address
#define D18F3x74_ADDRESS                                        0x74

// Type
#define D18F3x74_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x74_UpLoPreqCBC_OFFSET                             0
#define D18F3x74_UpLoPreqCBC_WIDTH                              4
#define D18F3x74_UpLoPreqCBC_MASK                               0xf
#define D18F3x74_UpLoNpreqCBC_OFFSET                            4
#define D18F3x74_UpLoNpreqCBC_WIDTH                             4
#define D18F3x74_UpLoNpreqCBC_MASK                              0xf0
#define D18F3x74_UpLoRespCBC_OFFSET                             8
#define D18F3x74_UpLoRespCBC_WIDTH                              4
#define D18F3x74_UpLoRespCBC_MASK                               0xf00
#define D18F3x74_Reserved_15_12_OFFSET                          12
#define D18F3x74_Reserved_15_12_WIDTH                           4
#define D18F3x74_Reserved_15_12_MASK                            0xf000
#define D18F3x74_UpHiPreqCBC_OFFSET                             16
#define D18F3x74_UpHiPreqCBC_WIDTH                              4
#define D18F3x74_UpHiPreqCBC_MASK                               0xf0000
#define D18F3x74_UpHiNpreqCBC_OFFSET                            20
#define D18F3x74_UpHiNpreqCBC_WIDTH                             4
#define D18F3x74_UpHiNpreqCBC_MASK                              0xf00000
#define D18F3x74_UpHiRespCBC_OFFSET                             24
#define D18F3x74_UpHiRespCBC_WIDTH                              4
#define D18F3x74_UpHiRespCBC_MASK                               0xf000000
#define D18F3x74_Reserved_31_28_OFFSET                          28
#define D18F3x74_Reserved_31_28_WIDTH                           4
#define D18F3x74_Reserved_31_28_MASK                            0xf0000000

/// D18F3x74
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              UpLoPreqCBC:4 ; ///<
    UINT32                                             UpLoNpreqCBC:4 ; ///<
    UINT32                                              UpLoRespCBC:4 ; ///<
    UINT32                                           Reserved_15_12:4 ; ///<
    UINT32                                              UpHiPreqCBC:4 ; ///<
    UINT32                                             UpHiNpreqCBC:4 ; ///<
    UINT32                                              UpHiRespCBC:4 ; ///<Channel exists but the GNB does not initiate traffic using this channel.
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x74_STRUCT;

// **** D18F3x7C Register Definition ****
// Address
#define D18F3x7C_ADDRESS                                        0x7c

// Type
#define D18F3x7C_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x7C_CpuBC_OFFSET                                   0
#define D18F3x7C_CpuBC_WIDTH                                    6
#define D18F3x7C_CpuBC_MASK                                     0x3f
#define D18F3x7C_Reserved_7_6_OFFSET                            6
#define D18F3x7C_Reserved_7_6_WIDTH                             2
#define D18F3x7C_Reserved_7_6_MASK                              0xc0
#define D18F3x7C_LoPriPBC_OFFSET                                8
#define D18F3x7C_LoPriPBC_WIDTH                                 6
#define D18F3x7C_LoPriPBC_MASK                                  0x3f00
#define D18F3x7C_Reserved_15_14_OFFSET                          14
#define D18F3x7C_Reserved_15_14_WIDTH                           2
#define D18F3x7C_Reserved_15_14_MASK                            0xc000
#define D18F3x7C_LoPriNPBC_OFFSET                               16
#define D18F3x7C_LoPriNPBC_WIDTH                                6
#define D18F3x7C_LoPriNPBC_MASK                                 0x3f0000
#define D18F3x7C_Reserved_23_22_OFFSET                          22
#define D18F3x7C_Reserved_23_22_WIDTH                           2
#define D18F3x7C_Reserved_23_22_MASK                            0xc00000
#define D18F3x7C_FreePoolBC_OFFSET                              24
#define D18F3x7C_FreePoolBC_WIDTH                               6
#define D18F3x7C_FreePoolBC_MASK                                0x3f000000
#define D18F3x7C_Reserved_31_30_OFFSET                          30
#define D18F3x7C_Reserved_31_30_WIDTH                           2
#define D18F3x7C_Reserved_31_30_MASK                            0xc0000000

/// D18F3x7C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CpuBC:6 ; ///<
    UINT32                                             Reserved_7_6:2 ; ///<
    UINT32                                                 LoPriPBC:6 ; ///<
    UINT32                                           Reserved_15_14:2 ; ///<
    UINT32                                                LoPriNPBC:6 ; ///<
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                               FreePoolBC:6 ; ///<This field must be at least 1 for DEV table walks, TCB-spill and PwrMgtMsg from INT.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x7C_STRUCT;

// **** D18F3x80 Register Definition ****
// Address
#define D18F3x80_ADDRESS                                        0x80

// Type
#define D18F3x80_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x80_Reserved_0_0_OFFSET                            0
#define D18F3x80_Reserved_0_0_WIDTH                             1
#define D18F3x80_Reserved_0_0_MASK                              0x1
#define D18F3x80_Smaf0DramSr_OFFSET                             1
#define D18F3x80_Smaf0DramSr_WIDTH                              1
#define D18F3x80_Smaf0DramSr_MASK                               0x2
#define D18F3x80_Smaf0DramMemClkTri_OFFSET                      2
#define D18F3x80_Smaf0DramMemClkTri_WIDTH                       1
#define D18F3x80_Smaf0DramMemClkTri_MASK                        0x4
#define D18F3x80_Reserved_3_3_OFFSET                            3
#define D18F3x80_Reserved_3_3_WIDTH                             1
#define D18F3x80_Reserved_3_3_MASK                              0x8
#define D18F3x80_Smaf0CpuAltVidEn_OFFSET                        4
#define D18F3x80_Smaf0CpuAltVidEn_WIDTH                         1
#define D18F3x80_Smaf0CpuAltVidEn_MASK                          0x10
#define D18F3x80_Reserved_8_5_OFFSET                            5
#define D18F3x80_Reserved_8_5_WIDTH                             4
#define D18F3x80_Reserved_8_5_MASK                              0x1e0
#define D18F3x80_Smaf1DramSr_OFFSET                             9
#define D18F3x80_Smaf1DramSr_WIDTH                              1
#define D18F3x80_Smaf1DramSr_MASK                               0x200
#define D18F3x80_Smaf1DramMemClkTri_OFFSET                      10
#define D18F3x80_Smaf1DramMemClkTri_WIDTH                       1
#define D18F3x80_Smaf1DramMemClkTri_MASK                        0x400
#define D18F3x80_Reserved_11_11_OFFSET                          11
#define D18F3x80_Reserved_11_11_WIDTH                           1
#define D18F3x80_Reserved_11_11_MASK                            0x800
#define D18F3x80_Smaf1CpuAltVidEn_OFFSET                        12
#define D18F3x80_Smaf1CpuAltVidEn_WIDTH                         1
#define D18F3x80_Smaf1CpuAltVidEn_MASK                          0x1000
#define D18F3x80_Reserved_16_13_OFFSET                          13
#define D18F3x80_Reserved_16_13_WIDTH                           4
#define D18F3x80_Reserved_16_13_MASK                            0x1e000
#define D18F3x80_Smaf2DramSr_OFFSET                             17
#define D18F3x80_Smaf2DramSr_WIDTH                              1
#define D18F3x80_Smaf2DramSr_MASK                               0x20000
#define D18F3x80_Smaf2DramMemClkTri_OFFSET                      18
#define D18F3x80_Smaf2DramMemClkTri_WIDTH                       1
#define D18F3x80_Smaf2DramMemClkTri_MASK                        0x40000
#define D18F3x80_Reserved_19_19_OFFSET                          19
#define D18F3x80_Reserved_19_19_WIDTH                           1
#define D18F3x80_Reserved_19_19_MASK                            0x80000
#define D18F3x80_Smaf2CpuAltVidEn_OFFSET                        20
#define D18F3x80_Smaf2CpuAltVidEn_WIDTH                         1
#define D18F3x80_Smaf2CpuAltVidEn_MASK                          0x100000
#define D18F3x80_Reserved_24_21_OFFSET                          21
#define D18F3x80_Reserved_24_21_WIDTH                           4
#define D18F3x80_Reserved_24_21_MASK                            0x1e00000
#define D18F3x80_Smaf3DramSr_OFFSET                             25
#define D18F3x80_Smaf3DramSr_WIDTH                              1
#define D18F3x80_Smaf3DramSr_MASK                               0x2000000
#define D18F3x80_Smaf3DramMemClkTri_OFFSET                      26
#define D18F3x80_Smaf3DramMemClkTri_WIDTH                       1
#define D18F3x80_Smaf3DramMemClkTri_MASK                        0x4000000
#define D18F3x80_Reserved_27_27_OFFSET                          27
#define D18F3x80_Reserved_27_27_WIDTH                           1
#define D18F3x80_Reserved_27_27_MASK                            0x8000000
#define D18F3x80_Smaf3CpuAltVidEn_OFFSET                        28
#define D18F3x80_Smaf3CpuAltVidEn_WIDTH                         1
#define D18F3x80_Smaf3CpuAltVidEn_MASK                          0x10000000
#define D18F3x80_Reserved_31_29_OFFSET                          29
#define D18F3x80_Reserved_31_29_WIDTH                           3
#define D18F3x80_Reserved_31_29_MASK                            0xe0000000

/// D18F3x80
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                              Smaf0DramSr:1 ; ///< See 2.5.7.1 [DRAM Self-Refresh].
    UINT32                                       Smaf0DramMemClkTri:1 ; ///< DramSr is required to be set if this bit is set. See 2.5.7.1 [DRAM Self-Refresh].
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                         Smaf0CpuAltVidEn:1 ; ///<
    UINT32                                             Reserved_8_5:4 ; ///<
    UINT32                                              Smaf1DramSr:1 ; ///< See 2.5.7.1 [DRAM Self-Refresh]. See: Smaf0DramSr.
    UINT32                                       Smaf1DramMemClkTri:1 ; ///< DramSr is required to be set if this bit is set. See 2.5.7.1 [DRAM Self-Refresh]. See: Smaf0DramMemClkTri.
    UINT32                                           Reserved_11_11:1 ; ///<
    UINT32                                         Smaf1CpuAltVidEn:1 ; ///< See: Smaf0CpuAltVidEn.
    UINT32                                           Reserved_16_13:4 ; ///<
    UINT32                                              Smaf2DramSr:1 ; ///< See 2.5.7.1 [DRAM Self-Refresh]. See: Smaf0DramSr.
    UINT32                                       Smaf2DramMemClkTri:1 ; ///< DramSr is required to be set if this bit is set. See 2.5.7.1 [DRAM Self-Refresh]. See: Smaf0DramMemClkTri.
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                         Smaf2CpuAltVidEn:1 ; ///< See: Smaf0CpuAltVidEn.
    UINT32                                           Reserved_24_21:4 ; ///<
    UINT32                                              Smaf3DramSr:1 ; ///< See 2.5.7.1 [DRAM Self-Refresh]. See: Smaf0DramSr.
    UINT32                                       Smaf3DramMemClkTri:1 ; ///< DramSr is required to be set if this bit is set. See 2.5.7.1 [DRAM Self-Refresh]. See: Smaf0DramMemClkTri.
    UINT32                                           Reserved_27_27:1 ; ///<
    UINT32                                         Smaf3CpuAltVidEn:1 ; ///< See: Smaf0CpuAltVidEn.
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x80_STRUCT;

// **** D18F3x84 Register Definition ****
// Address
#define D18F3x84_ADDRESS                                        0x84

// Type
#define D18F3x84_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x84_Reserved_0_0_OFFSET                            0
#define D18F3x84_Reserved_0_0_WIDTH                             1
#define D18F3x84_Reserved_0_0_MASK                              0x1
#define D18F3x84_Smaf4DramSr_OFFSET                             1
#define D18F3x84_Smaf4DramSr_WIDTH                              1
#define D18F3x84_Smaf4DramSr_MASK                               0x2
#define D18F3x84_Smaf4DramMemClkTri_OFFSET                      2
#define D18F3x84_Smaf4DramMemClkTri_WIDTH                       1
#define D18F3x84_Smaf4DramMemClkTri_MASK                        0x4
#define D18F3x84_Reserved_3_3_OFFSET                            3
#define D18F3x84_Reserved_3_3_WIDTH                             1
#define D18F3x84_Reserved_3_3_MASK                              0x8
#define D18F3x84_Smaf4CpuAltVidEn_OFFSET                        4
#define D18F3x84_Smaf4CpuAltVidEn_WIDTH                         1
#define D18F3x84_Smaf4CpuAltVidEn_MASK                          0x10
#define D18F3x84_Reserved_8_5_OFFSET                            5
#define D18F3x84_Reserved_8_5_WIDTH                             4
#define D18F3x84_Reserved_8_5_MASK                              0x1e0
#define D18F3x84_Smaf5DramSr_OFFSET                             9
#define D18F3x84_Smaf5DramSr_WIDTH                              1
#define D18F3x84_Smaf5DramSr_MASK                               0x200
#define D18F3x84_Smaf5DramMemClkTri_OFFSET                      10
#define D18F3x84_Smaf5DramMemClkTri_WIDTH                       1
#define D18F3x84_Smaf5DramMemClkTri_MASK                        0x400
#define D18F3x84_Reserved_11_11_OFFSET                          11
#define D18F3x84_Reserved_11_11_WIDTH                           1
#define D18F3x84_Reserved_11_11_MASK                            0x800
#define D18F3x84_Smaf5CpuAltVidEn_OFFSET                        12
#define D18F3x84_Smaf5CpuAltVidEn_WIDTH                         1
#define D18F3x84_Smaf5CpuAltVidEn_MASK                          0x1000
#define D18F3x84_Reserved_16_13_OFFSET                          13
#define D18F3x84_Reserved_16_13_WIDTH                           4
#define D18F3x84_Reserved_16_13_MASK                            0x1e000
#define D18F3x84_Smaf6DramSr_OFFSET                             17
#define D18F3x84_Smaf6DramSr_WIDTH                              1
#define D18F3x84_Smaf6DramSr_MASK                               0x20000
#define D18F3x84_Smaf6DramMemClkTri_OFFSET                      18
#define D18F3x84_Smaf6DramMemClkTri_WIDTH                       1
#define D18F3x84_Smaf6DramMemClkTri_MASK                        0x40000
#define D18F3x84_Reserved_19_19_OFFSET                          19
#define D18F3x84_Reserved_19_19_WIDTH                           1
#define D18F3x84_Reserved_19_19_MASK                            0x80000
#define D18F3x84_Smaf6CpuAltVidEn_OFFSET                        20
#define D18F3x84_Smaf6CpuAltVidEn_WIDTH                         1
#define D18F3x84_Smaf6CpuAltVidEn_MASK                          0x100000
#define D18F3x84_Reserved_24_21_OFFSET                          21
#define D18F3x84_Reserved_24_21_WIDTH                           4
#define D18F3x84_Reserved_24_21_MASK                            0x1e00000
#define D18F3x84_Smaf7DramSr_OFFSET                             25
#define D18F3x84_Smaf7DramSr_WIDTH                              1
#define D18F3x84_Smaf7DramSr_MASK                               0x2000000
#define D18F3x84_Smaf7DramMemClkTri_OFFSET                      26
#define D18F3x84_Smaf7DramMemClkTri_WIDTH                       1
#define D18F3x84_Smaf7DramMemClkTri_MASK                        0x4000000
#define D18F3x84_Reserved_27_27_OFFSET                          27
#define D18F3x84_Reserved_27_27_WIDTH                           1
#define D18F3x84_Reserved_27_27_MASK                            0x8000000
#define D18F3x84_Smaf7CpuAltVidEn_OFFSET                        28
#define D18F3x84_Smaf7CpuAltVidEn_WIDTH                         1
#define D18F3x84_Smaf7CpuAltVidEn_MASK                          0x10000000
#define D18F3x84_Reserved_31_29_OFFSET                          29
#define D18F3x84_Reserved_31_29_WIDTH                           3
#define D18F3x84_Reserved_31_29_MASK                            0xe0000000

/// D18F3x84
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                              Smaf4DramSr:1 ; ///< See 2.5.7.1 [DRAM Self-Refresh].
    UINT32                                       Smaf4DramMemClkTri:1 ; ///< DramSr is required to be set if this bit is set. See 2.5.7.1 [DRAM Self-Refresh].
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                         Smaf4CpuAltVidEn:1 ; ///<
    UINT32                                             Reserved_8_5:4 ; ///<
    UINT32                                              Smaf5DramSr:1 ; ///< See: D18F3x84[Smaf4DramSr].
    UINT32                                       Smaf5DramMemClkTri:1 ; ///< See: D18F3x84[Smaf4DramMemClkTri].
    UINT32                                           Reserved_11_11:1 ; ///<
    UINT32                                         Smaf5CpuAltVidEn:1 ; ///< See: D18F3x84[Smaf4CpuAltVidEn].
    UINT32                                           Reserved_16_13:4 ; ///<
    UINT32                                              Smaf6DramSr:1 ; ///<See: D18F3x84[Smaf4DramSr].
    UINT32                                       Smaf6DramMemClkTri:1 ; ///<See: D18F3x84[Smaf4DramMemClkTri].
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                         Smaf6CpuAltVidEn:1 ; ///< See: D18F3x84[Smaf4CpuAltVidEn].
    UINT32                                           Reserved_24_21:4 ; ///<
    UINT32                                              Smaf7DramSr:1 ; ///< See: D18F3x84[Smaf4DramSr].
    UINT32                                       Smaf7DramMemClkTri:1 ; ///< See: D18F3x84[Smaf4DramMemClkTri].
    UINT32                                           Reserved_27_27:1 ; ///<
    UINT32                                         Smaf7CpuAltVidEn:1 ; ///< See: D18F3x84[Smaf4CpuAltVidEn].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x84_STRUCT;

// **** D18F3x88 Register Definition ****
// Address
#define D18F3x88_ADDRESS                                        0x88

// Type
#define D18F3x88_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x88_Reserved_4_0_OFFSET                            0
#define D18F3x88_Reserved_4_0_WIDTH                             5
#define D18F3x88_Reserved_4_0_MASK                              0x1f
#define D18F3x88_ForceNcLdtOrder_OFFSET                         5
#define D18F3x88_ForceNcLdtOrder_WIDTH                          1
#define D18F3x88_ForceNcLdtOrder_MASK                           0x20
#define D18F3x88_ForceCpuSzPrb_OFFSET                           6
#define D18F3x88_ForceCpuSzPrb_WIDTH                            1
#define D18F3x88_ForceCpuSzPrb_MASK                             0x40
#define D18F3x88_DisApicThermLVT_OFFSET                         7
#define D18F3x88_DisApicThermLVT_WIDTH                          1
#define D18F3x88_DisApicThermLVT_MASK                           0x80
#define D18F3x88_DisP2PMstAbort_OFFSET                          8
#define D18F3x88_DisP2PMstAbort_WIDTH                           1
#define D18F3x88_DisP2PMstAbort_MASK                            0x100
#define D18F3x88_EnNonPostP2PMstAbort_OFFSET                    9
#define D18F3x88_EnNonPostP2PMstAbort_WIDTH                     1
#define D18F3x88_EnNonPostP2PMstAbort_MASK                      0x200
#define D18F3x88_Reserved_13_10_OFFSET                          10
#define D18F3x88_Reserved_13_10_WIDTH                           4
#define D18F3x88_Reserved_13_10_MASK                            0x3c00
#define D18F3x88_ForceWrSzDramRd_OFFSET                         14
#define D18F3x88_ForceWrSzDramRd_WIDTH                          1
#define D18F3x88_ForceWrSzDramRd_MASK                           0x4000
#define D18F3x88_Reserved_16_15_OFFSET                          15
#define D18F3x88_Reserved_16_15_WIDTH                           2
#define D18F3x88_Reserved_16_15_MASK                            0x18000
#define D18F3x88_ForceWrSzRetDat_OFFSET                         17
#define D18F3x88_ForceWrSzRetDat_WIDTH                          1
#define D18F3x88_ForceWrSzRetDat_MASK                           0x20000
#define D18F3x88_Reserved_21_18_OFFSET                          18
#define D18F3x88_Reserved_21_18_WIDTH                           4
#define D18F3x88_Reserved_21_18_MASK                            0x3c0000
#define D18F3x88_ForceSzPrb_OFFSET                              22
#define D18F3x88_ForceSzPrb_WIDTH                               1
#define D18F3x88_ForceSzPrb_MASK                                0x400000
#define D18F3x88_Reserved_23_23_OFFSET                          23
#define D18F3x88_Reserved_23_23_WIDTH                           1
#define D18F3x88_Reserved_23_23_MASK                            0x800000
#define D18F3x88_UseApicMT_OFFSET                               24
#define D18F3x88_UseApicMT_WIDTH                                1
#define D18F3x88_UseApicMT_MASK                                 0x1000000
#define D18F3x88_DisRckBypass_OFFSET                            25
#define D18F3x88_DisRckBypass_WIDTH                             1
#define D18F3x88_DisRckBypass_MASK                              0x2000000
#define D18F3x88_Reserved_26_26_OFFSET                          26
#define D18F3x88_Reserved_26_26_WIDTH                           1
#define D18F3x88_Reserved_26_26_MASK                            0x4000000
#define D18F3x88_Reserved_27_27_OFFSET                          27
#define D18F3x88_Reserved_27_27_WIDTH                           1
#define D18F3x88_Reserved_27_27_MASK                            0x8000000
#define D18F3x88_Reserved_29_28_OFFSET                          28
#define D18F3x88_Reserved_29_28_WIDTH                           2
#define D18F3x88_Reserved_29_28_MASK                            0x30000000
#define D18F3x88_DisPciCfg_OFFSET                               30
#define D18F3x88_DisPciCfg_WIDTH                                1
#define D18F3x88_DisPciCfg_MASK                                 0x40000000
#define D18F3x88_Reserved_31_31_OFFSET                          31
#define D18F3x88_Reserved_31_31_WIDTH                           1
#define D18F3x88_Reserved_31_31_MASK                            0x80000000

/// D18F3x88
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                          ForceNcLdtOrder:1 ; ///<
    UINT32                                            ForceCpuSzPrb:1 ; ///<Forces probes to be issued for all CPU-generated RdSized and WrSized commands, regardless of the cacheability of the target address. Normally probes are not issued for accesses to addresses that are declared as uncacheable (UC) in the MTRRs.
    UINT32                                          DisApicThermLVT:1 ; ///<
    UINT32                                           DisP2PMstAbort:1 ; ///<Disables generation of master aborts for peer to peer accesses to compat space.
    UINT32                                     EnNonPostP2PMstAbort:1 ; ///< This bit must be set to 1 to avoid CNB and GNB deadlock conditions.
    UINT32                                           Reserved_13_10:4 ; ///<
    UINT32                                          ForceWrSzDramRd:1 ; ///<Forces a DRAM read on behalf of a WrSized operation to DRAM irrespective of the size of the data write. Normally DRAM is not read for writes that update all 64 bytes.
    UINT32                                           Reserved_16_15:2 ; ///<
    UINT32                                          ForceWrSzRetDat:1 ; ///<Forces probes issued on behalf of write sized commands to return dirty data for a probe hit, regardless of the size of the data write. Normally probes issued on behalf of writes that update all 64 bytes do not cause modified data to be returned.
    UINT32                                           Reserved_21_18:4 ; ///<
    UINT32                                               ForceSzPrb:1 ; ///< This bit must be 0 if D18F2x11C[PrefIoNonCohDis]=1.
    UINT32                                           Reserved_23_23:1 ; ///<
    UINT32                                                UseApicMT:1 ; ///<Causes the processor to interpret incoming interrupt link packets using the message types (MT) defined in the APIC specification, rather than the ones defined in the link specification.
    UINT32                                             DisRckBypass:1 ; ///<Disables a performance optimization in which new requests are allowed to bypass the RCK.
    UINT32                                           Reserved_26_26:1 ; ///<
    UINT32                                           Reserved_27_27:1 ; ///<
    UINT32                                           Reserved_29_28:2 ; ///<
    UINT32                                                DisPciCfg:1 ; ///<Disables accessing the PCI configuration address/data registers at CF8h and CFCh. Instead, these accesses produce normal IO accesses routed to a link.
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x88_STRUCT;

// **** D18F3x8C Register Definition ****
// Address
#define D18F3x8C_ADDRESS                                        0x8c

// Type
#define D18F3x8C_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3x8C_Reserved_0_0_OFFSET                            0
#define D18F3x8C_Reserved_0_0_WIDTH                             1
#define D18F3x8C_Reserved_0_0_MASK                              0x1
#define D18F3x8C_DisNBRegSec_OFFSET                             1
#define D18F3x8C_DisNBRegSec_WIDTH                              1
#define D18F3x8C_DisNBRegSec_MASK                               0x2
#define D18F3x8C_Reserved_2_2_OFFSET                            2
#define D18F3x8C_Reserved_2_2_WIDTH                             1
#define D18F3x8C_Reserved_2_2_MASK                              0x4
#define D18F3x8C_ForceCompatPW_OFFSET                           3
#define D18F3x8C_ForceCompatPW_WIDTH                            1
#define D18F3x8C_ForceCompatPW_MASK                             0x8
#define D18F3x8C_Reserved_4_4_OFFSET                            4
#define D18F3x8C_Reserved_4_4_WIDTH                             1
#define D18F3x8C_Reserved_4_4_MASK                              0x10
#define D18F3x8C_DisNPCompat_OFFSET                             5
#define D18F3x8C_DisNPCompat_WIDTH                              1
#define D18F3x8C_DisNPCompat_MASK                               0x20
#define D18F3x8C_DisApcTimerComp_OFFSET                         6
#define D18F3x8C_DisApcTimerComp_WIDTH                          1
#define D18F3x8C_DisApcTimerComp_MASK                           0x40
#define D18F3x8C_Reserved_9_7_OFFSET                            7
#define D18F3x8C_Reserved_9_7_WIDTH                             3
#define D18F3x8C_Reserved_9_7_MASK                              0x380
#define D18F3x8C_EnaPStateSpCyc_OFFSET                          10
#define D18F3x8C_EnaPStateSpCyc_WIDTH                           1
#define D18F3x8C_EnaPStateSpCyc_MASK                            0x400
#define D18F3x8C_DisGenLVTInt_OFFSET                            11
#define D18F3x8C_DisGenLVTInt_WIDTH                             1
#define D18F3x8C_DisGenLVTInt_MASK                              0x800
#define D18F3x8C_DisExtApcSpceRptng_OFFSET                      12
#define D18F3x8C_DisExtApcSpceRptng_WIDTH                       1
#define D18F3x8C_DisExtApcSpceRptng_MASK                        0x1000
#define D18F3x8C_DisUsSysMgtReqToNcHt_OFFSET                    13
#define D18F3x8C_DisUsSysMgtReqToNcHt_WIDTH                     1
#define D18F3x8C_DisUsSysMgtReqToNcHt_MASK                      0x2000
#define D18F3x8C_EnableCf8ExtCfg_OFFSET                         14
#define D18F3x8C_EnableCf8ExtCfg_WIDTH                          1
#define D18F3x8C_EnableCf8ExtCfg_MASK                           0x4000
#define D18F3x8C_DisProcHotPin_OFFSET                           15
#define D18F3x8C_DisProcHotPin_WIDTH                            1
#define D18F3x8C_DisProcHotPin_MASK                             0x8000
#define D18F3x8C_Reserved_22_16_OFFSET                          16
#define D18F3x8C_Reserved_22_16_WIDTH                           7
#define D18F3x8C_Reserved_22_16_MASK                            0x7f0000
#define D18F3x8C_EnaDiv1CpuLowPwr_OFFSET                        23
#define D18F3x8C_EnaDiv1CpuLowPwr_WIDTH                         1
#define D18F3x8C_EnaDiv1CpuLowPwr_MASK                          0x800000
#define D18F3x8C_Reserved_25_24_OFFSET                          24
#define D18F3x8C_Reserved_25_24_WIDTH                           2
#define D18F3x8C_Reserved_25_24_MASK                            0x3000000
#define D18F3x8C_EnConvertToNonIsoc_OFFSET                      26
#define D18F3x8C_EnConvertToNonIsoc_WIDTH                       1
#define D18F3x8C_EnConvertToNonIsoc_MASK                        0x4000000
#define D18F3x8C_Reserved_30_27_OFFSET                          27
#define D18F3x8C_Reserved_30_27_WIDTH                           4
#define D18F3x8C_Reserved_30_27_MASK                            0x78000000
#define D18F3x8C_DisExtApicReg_OFFSET                           31
#define D18F3x8C_DisExtApicReg_WIDTH                            1
#define D18F3x8C_DisExtApicReg_MASK                             0x80000000

/// D18F3x8C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                              DisNBRegSec:1 ; ///< When this bit is set, the secure registers are accessible through PCI configuration accesses. 
    UINT32                                             Reserved_2_2:1 ; ///<
    UINT32                                            ForceCompatPW:1 ; ///<Normally writes to the compat space are non-posted. This bit applies to CPU-generated MMIO accesses only (The range 0 to FC_FFFF_FFFFh).
    UINT32                                             Reserved_4_4:1 ; ///<
    UINT32                                              DisNPCompat:1 ; ///<Disables restrictions on non-posted accesses to the compat-space IO link. Normally non-posted accesses to compat space must be issued individually in order to avoid deadlock conditions.
    UINT32                                          DisApcTimerComp:1 ; ///<
    UINT32                                             Reserved_9_7:3 ; ///<
    UINT32                                           EnaPStateSpCyc:1 ; ///<
    UINT32                                             DisGenLVTInt:1 ; ///<Disables the generalized LVT definition. When set, local vector tables revert back to K8 compatible definitions.
    UINT32                                       DisExtApcSpceRptng:1 ; ///<
    UINT32                                     DisUsSysMgtReqToNcHt:1 ; ///< See 2.12.4.6 [CPU Virtual Wires and STPCLK Legacy Upstream Messages].
    UINT32                                          EnableCf8ExtCfg:1 ; ///<
    UINT32                                            DisProcHotPin:1 ; ///< If this bit is set while in HTC-active and the processor entered HTC active because PROCHOT_L was asserted, the processor does not leave the HTCactive state until PROCHOT_L is de-asserted. See 2.11.5.1 [PROCHOT_L and Hardware Thermal Control (HTC)].
    UINT32                                           Reserved_22_16:7 ; ///<
    UINT32                                         EnaDiv1CpuLowPwr:1 ; ///<Enables power management actions in the core even when the requested clock divisor is /1. Normally a /1 clock divisor does not generate power management actions.
    UINT32                                           Reserved_25_24:2 ; ///<
    UINT32                                       EnConvertToNonIsoc:1 ; ///< In non-IFCM mode, the link-defined Isoc bit in the request packet is cleared as it is reflected downstream in a peer-to-peer access as well.
    UINT32                                           Reserved_30_27:4 ; ///<
    UINT32                                            DisExtApicReg:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x8C_STRUCT;

// **** D18F3xA0 Register Definition ****
// Address
#define D18F3xA0_ADDRESS                                        0xa0

// Type
#define D18F3xA0_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xA0_PsiVid_OFFSET                                  0
#define D18F3xA0_PsiVid_WIDTH                                   7
#define D18F3xA0_PsiVid_MASK                                    0x7f
#define D18F3xA0_PsiVidEn_OFFSET                                7
#define D18F3xA0_PsiVidEn_WIDTH                                 1
#define D18F3xA0_PsiVidEn_MASK                                  0x80
#define D18F3xA0_Reserved_8_8_OFFSET                            8
#define D18F3xA0_Reserved_8_8_WIDTH                             1
#define D18F3xA0_Reserved_8_8_MASK                              0x100
#define D18F3xA0_SviHighFreqSel_OFFSET                          9
#define D18F3xA0_SviHighFreqSel_WIDTH                           1
#define D18F3xA0_SviHighFreqSel_MASK                            0x200
#define D18F3xA0_Reserved_15_10_OFFSET                          10
#define D18F3xA0_Reserved_15_10_WIDTH                           6
#define D18F3xA0_Reserved_15_10_MASK                            0xfc00
#define D18F3xA0_ConfigId_OFFSET                                16
#define D18F3xA0_ConfigId_WIDTH                                 12
#define D18F3xA0_ConfigId_MASK                                  0xfff0000
#define D18F3xA0_Reserved_30_28_OFFSET                          28
#define D18F3xA0_Reserved_30_28_WIDTH                           3
#define D18F3xA0_Reserved_30_28_MASK                            0x70000000
#define D18F3xA0_CofVidProg_OFFSET                              31
#define D18F3xA0_CofVidProg_WIDTH                               1
#define D18F3xA0_CofVidProg_MASK                                0x80000000

/// D18F3xA0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   PsiVid:7 ; ///<If D18F3xA0[PsiVidEn]==1, this field specifies a VID code that determines the state of the PSI_L bit for the VDD plane. Whenever the VID code generated by the processor for the VDD plane is less than (voltage is greater than) PsiVid, the PSI_L bit is sent as a 1. Whenever the VID code generated by the processor for the VDD plane is greater than or equal to (voltage less than or equal to) PsiVid, the PSI_L bit is sent as a 0. See 2.5.2.4.1 [PSI_L Bit].
    UINT32                                                 PsiVidEn:1 ; ///<This bit specifies how the PSI_L bit for VDD is controlled.
    UINT32                                             Reserved_8_8:1 ; ///<
    UINT32                                           SviHighFreqSel:1 ; ///<4 MHz. Writes to this field take effect after the next SVI command.
    UINT32                                           Reserved_15_10:6 ; ///<
    UINT32                                                 ConfigId:12; ///<Specifies the configuration ID associated with the product. This field indicates the fuse recipe (PSDD source) used to generate the part. The configuration ID is unique within a D18F4x160 [Native Die CPUID Family/Model/Stepping] and CPUID_Fn8000_0001_EBX[PkgType] combination.
    UINT32                                           Reserved_30_28:3 ; ///<
    UINT32                                               CofVidProg:1 ; ///<See 2.6 [Processor State Transition Sequences].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xA0_STRUCT;

// **** D18F3xA4 Register Definition ****
// Address
#define D18F3xA4_ADDRESS                                        0xa4

// Type
#define D18F3xA4_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xA4_PerStepTimeUp_OFFSET                           0
#define D18F3xA4_PerStepTimeUp_WIDTH                            5
#define D18F3xA4_PerStepTimeUp_MASK                             0x1f
#define D18F3xA4_TmpMaxDiffUp_OFFSET                            5
#define D18F3xA4_TmpMaxDiffUp_WIDTH                             2
#define D18F3xA4_TmpMaxDiffUp_MASK                              0x60
#define D18F3xA4_TmpSlewDnEn_OFFSET                             7
#define D18F3xA4_TmpSlewDnEn_WIDTH                              1
#define D18F3xA4_TmpSlewDnEn_MASK                               0x80
#define D18F3xA4_PerStepTimeDn_OFFSET                           8
#define D18F3xA4_PerStepTimeDn_WIDTH                            5
#define D18F3xA4_PerStepTimeDn_MASK                             0x1f00
#define D18F3xA4_Reserved_15_13_OFFSET                          13
#define D18F3xA4_Reserved_15_13_WIDTH                           3
#define D18F3xA4_Reserved_15_13_MASK                            0xe000
#define D18F3xA4_CurTmpTjSel_OFFSET                             16
#define D18F3xA4_CurTmpTjSel_WIDTH                              2
#define D18F3xA4_CurTmpTjSel_MASK                               0x30000
#define D18F3xA4_CurTmpTjSlewSel_OFFSET                         18
#define D18F3xA4_CurTmpTjSlewSel_WIDTH                          1
#define D18F3xA4_CurTmpTjSlewSel_MASK                           0x40000
#define D18F3xA4_CurTmpRangeSel_OFFSET                          19
#define D18F3xA4_CurTmpRangeSel_WIDTH                           1
#define D18F3xA4_CurTmpRangeSel_MASK                            0x80000
#define D18F3xA4_Reserved_20_20_OFFSET                          20
#define D18F3xA4_Reserved_20_20_WIDTH                           1
#define D18F3xA4_Reserved_20_20_MASK                            0x100000
#define D18F3xA4_CurTmp_OFFSET                                  21
#define D18F3xA4_CurTmp_WIDTH                                   11
#define D18F3xA4_CurTmp_MASK                                    0xffe00000

/// D18F3xA4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            PerStepTimeUp:5 ; ///<This specifies the time per 1/8 step of Tctl when the measured temperature is greater than the reported temperature. It is encoded as follows:
    UINT32                                             TmpMaxDiffUp:2 ; ///<This specifies the maximum difference between Tctl and the measured temperature, when the measured value is greater than Tctl (i.e., when the temperature has risen). If this difference exceeds the specified value, Tctl jumps to the measured temperature value. This field is encoded as follows:
    UINT32                                              TmpSlewDnEn:1 ; ///<
    UINT32                                            PerStepTimeDn:5 ; ///<This specifies the time per 1/8 step of Tctl when the measured temperature is less than the Tctl. It is encoded the same as PerStepTimeUp.
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                              CurTmpTjSel:2 ; ///<These bits may be used to provide the current state of Tj or control the value of Tj for diagnostic software. See 2.11.1.1 [Thermcontrol (TCON)]. This bits are encoded as:
    UINT32                                          CurTmpTjSlewSel:1 ; ///<
    UINT32                                           CurTmpRangeSel:1 ; ///<875.875.
    UINT32                                           Reserved_20_20:1 ; ///<
    UINT32                                                   CurTmp:11; ///<Specifies the current control temperature with the slew-rate controls applied. See 2.11.2 [The Tctl Temperature Scale].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xA4_STRUCT;

// **** D18F3xD4 Register Definition ****
// Address
#define D18F3xD4_ADDRESS                                        0xd4

// Type
#define D18F3xD4_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xD4_MainPllOpFreqId_OFFSET                         0
#define D18F3xD4_MainPllOpFreqId_WIDTH                          6
#define D18F3xD4_MainPllOpFreqId_MASK                           0x3f
#define D18F3xD4_MainPllOpFreqIdEn_OFFSET                       6
#define D18F3xD4_MainPllOpFreqIdEn_WIDTH                        1
#define D18F3xD4_MainPllOpFreqIdEn_MASK                         0x40
#define D18F3xD4_Reserved_7_7_OFFSET                            7
#define D18F3xD4_Reserved_7_7_WIDTH                             1
#define D18F3xD4_Reserved_7_7_MASK                              0x80
#define D18F3xD4_ClkRampHystSel_OFFSET                          8
#define D18F3xD4_ClkRampHystSel_WIDTH                           4
#define D18F3xD4_ClkRampHystSel_MASK                            0xf00
#define D18F3xD4_OnionOutHyst_OFFSET                            12
#define D18F3xD4_OnionOutHyst_WIDTH                             4
#define D18F3xD4_OnionOutHyst_MASK                              0xf000
#define D18F3xD4_DisNclkGatingIdle_OFFSET                       16
#define D18F3xD4_DisNclkGatingIdle_WIDTH                        1
#define D18F3xD4_DisNclkGatingIdle_MASK                         0x10000
#define D18F3xD4_ClockGatingEnDram_OFFSET                       17
#define D18F3xD4_ClockGatingEnDram_WIDTH                        1
#define D18F3xD4_ClockGatingEnDram_MASK                         0x20000
#define D18F3xD4_Reserved_18_18_OFFSET                          18
#define D18F3xD4_Reserved_18_18_WIDTH                           1
#define D18F3xD4_Reserved_18_18_MASK                            0x40000
#define D18F3xD4_PstateSpecFuseSel_OFFSET                       19
#define D18F3xD4_PstateSpecFuseSel_WIDTH                        8
#define D18F3xD4_PstateSpecFuseSel_MASK                         0x7f80000
#define D18F3xD4_Reserved_31_27_OFFSET                          27
#define D18F3xD4_Reserved_31_27_WIDTH                           5
#define D18F3xD4_Reserved_31_27_MASK                            0xf8000000

/// D18F3xD4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          MainPllOpFreqId:6 ; ///<Along with D18F3xD4[MainPllOpFreqIdEn], this field specifies the COF of the main PLL. If D18F3xD4[MainPllOpFreqIdEn] == 1, the main PLL COF = 100 MHz * (D18F3xD4[MainPllOpFreqId] + 10h). If D18F3xD4[MainPllOpFreqIdEn] == 0, the main PLL COF = 1600 MHz. D18F3xD4[MainPllOpFreqId] and Fuse[MainPllOpFreqIdStartup] must be programmed as specified by MSRC001_0071[MainPllOpFreqIdMax]. The PLL is only expected to support up to 4 GHz in actual silicon. If (MSRC001_0071[MainPllOpFreqIdMax]>0) then programming D18F3xD4[MainPllOpFreqId] >MSRC001_0071[MainPllOpFreqIdMax] results in a frequency equal to MSRC001_0071[MainPllOpFreqIdMax].
    UINT32                                        MainPllOpFreqIdEn:1 ; ///<See D18F3xD4[MainPllOpFreqId].
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                           ClkRampHystSel:4 ; ///<Specifies the hysteresis time used when ramping up to service probe requests. Hysteresis time= 320 ns * (1 + ClkRampHystSel). See 2.5.4.2.5 [C-states and Probe Requests].
    UINT32                                             OnionOutHyst:4 ; ///<Specifies the hysteresis time after the IFQ is emptied until the CNB de-asserts the ONION outbound wake signal. See 2.5.5.3 [NB Clock Gating].
    UINT32                                        DisNclkGatingIdle:1 ; ///< See 2.5.5.2 [NB Clock Ramping] and 2.5.5.3 [NB Clock Gating].
    UINT32                                        ClockGatingEnDram:1 ; ///<Specifies whether NCLK gating to the DRAM controller is enabled. See 2.5.5.3 [NB Clock Gating].
    UINT32                                           Reserved_18_18:1 ; ///<
    UINT32                                        PstateSpecFuseSel:8 ; ///<Each bit in this field corresponds to P-state defined in D18F4x1[FC:E0]. For instance, bit 0 of this field corresponds to the P-state defined in D18F4x1E0, bit 1 of this field corresponds to the P-state defined in D18F4x1E4, and so on. Setting or clearing each bit in this field has the following effect on P-state changes: 0=HW uses the values from D18F4x1[FC:E0] when making P-state changes. The values in this field do not affect reads to or writes from D18F4x1[FC:E0]. Reads/writes always return or write the values in D18F4x1[FC:E0], not the fused values.
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xD4_STRUCT;

// **** D18F3xD8 Register Definition ****
// Address
#define D18F3xD8_ADDRESS                                        0xd8

// Type
#define D18F3xD8_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xD8_Reserved_3_0_OFFSET                            0
#define D18F3xD8_Reserved_3_0_WIDTH                             4
#define D18F3xD8_Reserved_3_0_MASK                              0xf
#define D18F3xD8_VSRampSlamTime_OFFSET                          4
#define D18F3xD8_VSRampSlamTime_WIDTH                           3
#define D18F3xD8_VSRampSlamTime_MASK                            0x70
#define D18F3xD8_ExtndTriDly_OFFSET                             7
#define D18F3xD8_ExtndTriDly_WIDTH                              5
#define D18F3xD8_ExtndTriDly_MASK                               0xf80
#define D18F3xD8_Reserved_28_12_OFFSET                          12
#define D18F3xD8_Reserved_28_12_WIDTH                           17
#define D18F3xD8_Reserved_28_12_MASK                            0x1ffff000
#define D18F3xD8_SlamModeSelect_OFFSET                          29
#define D18F3xD8_SlamModeSelect_WIDTH                           1
#define D18F3xD8_SlamModeSelect_MASK                            0x20000000
#define D18F3xD8_Reserved_31_30_OFFSET                          30
#define D18F3xD8_Reserved_31_30_WIDTH                           2
#define D18F3xD8_Reserved_31_30_MASK                            0xc0000000

/// D18F3xD8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                           VSRampSlamTime:3 ; ///<Specifies the time the processor waits for voltage increases to complete before beginning an additional voltage change or a frequency change. See D18F3xD8[SlamModeSelect] and 2.5.2.5.1 [Hardware-Initiated Voltage Transitions].  Ramp time = (VSRampSlamTime / 12.5 mV) * ABS(destination voltage - current voltage).   1.	Voltage Ramp Time = maximum time to change VDD or VDDNB by 12.5 mV rounded to the next higher encoding.  For example, if the VDD regulator slew rate is 8 mV/us and the VDDNB regulator slew rate is 5.5 mV/us, it takes the VDD regulator 1.56 us to change 12.5 mV and it takes the VDDNB regulator 2.27 us to change 12.5 mV. In this case, BIOS should set this field to 2.5 us.
    UINT32                                              ExtndTriDly:5 ; ///<Specifies a delay in REFCLKs that the processor leaves the SVD signal tri-stated after receiving an ACK from the voltage regulator.
    UINT32                                           Reserved_28_12:17; ///<
    UINT32                                           SlamModeSelect:1 ; ///<This bit specifies the method used to calculate the time the processor waits for voltage stabilization after a voltage change is requested.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xD8_STRUCT;

// **** D18F3xDC Register Definition ****
// Address
#define D18F3xDC_ADDRESS                                        0xdc

// Type
#define D18F3xDC_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xDC_AltVid_OFFSET                                  0
#define D18F3xDC_AltVid_WIDTH                                   7
#define D18F3xDC_AltVid_MASK                                    0x7f
#define D18F3xDC_Reserved_7_7_OFFSET                            7
#define D18F3xDC_Reserved_7_7_WIDTH                             1
#define D18F3xDC_Reserved_7_7_MASK                              0x80
#define D18F3xDC_PstateMaxVal_OFFSET                            8
#define D18F3xDC_PstateMaxVal_WIDTH                             3
#define D18F3xDC_PstateMaxVal_MASK                              0x700
#define D18F3xDC_Reserved_11_11_OFFSET                          11
#define D18F3xDC_Reserved_11_11_WIDTH                           1
#define D18F3xDC_Reserved_11_11_MASK                            0x800
#define D18F3xDC_NbPs0Vid_OFFSET                                12
#define D18F3xDC_NbPs0Vid_WIDTH                                 7
#define D18F3xDC_NbPs0Vid_MASK                                  0x7f000
#define D18F3xDC_NclkFreqDone_OFFSET                            19
#define D18F3xDC_NclkFreqDone_WIDTH                             1
#define D18F3xDC_NclkFreqDone_MASK                              0x80000
#define D18F3xDC_NbPs0NclkDiv_OFFSET                            20
#define D18F3xDC_NbPs0NclkDiv_WIDTH                             7
#define D18F3xDC_NbPs0NclkDiv_MASK                              0x7f00000
#define D18F3xDC_NbClockGateHyst_OFFSET                         27
#define D18F3xDC_NbClockGateHyst_WIDTH                          3
#define D18F3xDC_NbClockGateHyst_MASK                           0x38000000
#define D18F3xDC_NbClockGateEn_OFFSET                           30
#define D18F3xDC_NbClockGateEn_WIDTH                            1
#define D18F3xDC_NbClockGateEn_MASK                             0x40000000
#define D18F3xDC_CnbCifClockGateEn_OFFSET                       31
#define D18F3xDC_CnbCifClockGateEn_WIDTH                        1
#define D18F3xDC_CnbCifClockGateEn_MASK                         0x80000000

/// D18F3xDC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   AltVid:7 ; ///<Specifies the VID driven to the VDD power plane(s) while in PC4. See 2.5.2.4.2 [Alternate Low Power Voltages]. This field is required to be programmed within the bounds specified by MSRC001_0071[MaxVid and MinVid].
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                             PstateMaxVal:3 ; ///<Reset: specified by the reset state of MSRC001_00[6B:64][PstateEn]; the reset value (fused value) is the highest P-state number corresponding to the MSR in which PstateEn is set (e.g., if MSRC001_0064 and MSRC001_0065 have this bit set and the others do not, then PstateMaxVal=1; if PstateEn is not set in any of these MSRs, then PstateMaxVal=0). This specifies the highest P-state value (lowest performance state) supported by the hardware. See MSRC001_0061[PstateMaxVal].
    UINT32                                           Reserved_11_11:1 ; ///<
    UINT32                                                 NbPs0Vid:7 ; ///<Specifies the VID for VDDNB when in NBP0. Writes to this field cause the VID being output for VDDNB to change if the processor is currently in NBP0. This occurs regardless of the state of D18F6x90[NbPsCap]. See the AMD Voltage Regulator Specification, #40182 for encodings. See 2.5.5.1 [NB P-states]. See D18F3xA0[CofVidProg].  Writing this field while D18F6x90[NbPsCtrlDis] == 0 may result in undefined behavior. Whenever this field is written, software must wait the RampTime specified by D18F3xD8[VSRampSlamTime] before clearing D18F6x90[NbPsCtrlDis] to 0, changing the value of D18F3xDC[NbPs0NclkDiv], or changing the value of D18F6x90[NbPsForceSel].
    UINT32                                             NclkFreqDone:1 ; ///<
    UINT32                                             NbPs0NclkDiv:7 ; ///<Specifies the NCLK divisor when in NBP0.  The clock divisor can be calculated using the following table: 50% clock duty cycles are obtained at integer and half-integer divisors only. For example, /2, /2.5, /3.0, and /3.5 give 50% clock duty cycles whereas /3.25 does not. Divisor examples: Example: If D18F3xDC[NbPs0NclkDiv] = 0Ch = 12d, then the NCLK divisor = 12 * 0.25 = /3.0 The NCLK COF can be calculated using the following equation: COF = (main PLL frequency specified by D18F3xD4[MainPllOpFreqId]) / clock divisor. Example: If D18F3xD4[MainPllOpFreqId] = 10h = 3.2 GHz and D18F3xDC[NbPs0NclkDiv] = 3Eh = /15.5, then the NCLK COF = 206.45 MHz. Writes that change the value of this field cause NCLK to transition to the new divisor if the processor is currently in NBP0. This occurs regardless of the state of D18F6x90[NbPsCap]. Software may only change the value of this field if either: The sequence described in 2.10.4 [DCT/DRAM Initialization and Resume] has not been run, or DRAM has been placed into self-refresh. See D18F2x90[EnterSelfRef].  See 2.5.5.1 [NB P-states].
    UINT32                                          NbClockGateHyst:3 ; ///<Reset: 0.Specifies how long hardware waits after the IFQ is empty and all cores are in a non-C0 state before gating the NB clocks. See 2.5.5.2 [NB Clock Ramping].
    UINT32                                            NbClockGateEn:1 ; ///<Specifies whether dynamic clock gating on the NB is enabled. See 2.5.5.2 [NB Clock Ramping].
    UINT32                                        CnbCifClockGateEn:1 ; ///<Specifies whether dynamic clock gating on the CNBCIF is enabled. See 2.5.5.2 [NB Clock Ramping].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xDC_STRUCT;

// **** D18F3xE4 Register Definition ****
// Address
#define D18F3xE4_ADDRESS                                        0xe4

// Type
#define D18F3xE4_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xE4_Reserved_0_0_OFFSET                            0
#define D18F3xE4_Reserved_0_0_WIDTH                             1
#define D18F3xE4_Reserved_0_0_MASK                              0x1
#define D18F3xE4_Thermtp_OFFSET                                 1
#define D18F3xE4_Thermtp_WIDTH                                  1
#define D18F3xE4_Thermtp_MASK                                   0x2
#define D18F3xE4_Reserved_2_2_OFFSET                            2
#define D18F3xE4_Reserved_2_2_WIDTH                             1
#define D18F3xE4_Reserved_2_2_MASK                              0x4
#define D18F3xE4_ThermtpSense_OFFSET                            3
#define D18F3xE4_ThermtpSense_WIDTH                             1
#define D18F3xE4_ThermtpSense_MASK                              0x8
#define D18F3xE4_Reserved_4_4_OFFSET                            4
#define D18F3xE4_Reserved_4_4_WIDTH                             1
#define D18F3xE4_Reserved_4_4_MASK                              0x10
#define D18F3xE4_ThermtpEn_OFFSET                               5
#define D18F3xE4_ThermtpEn_WIDTH                                1
#define D18F3xE4_ThermtpEn_MASK                                 0x20
#define D18F3xE4_Reserved_7_6_OFFSET                            6
#define D18F3xE4_Reserved_7_6_WIDTH                             2
#define D18F3xE4_Reserved_7_6_MASK                              0xc0
#define D18F3xE4_DiodeOffset_OFFSET                             8
#define D18F3xE4_DiodeOffset_WIDTH                              7
#define D18F3xE4_DiodeOffset_MASK                               0x7f00
#define D18F3xE4_Reserved_17_15_OFFSET                          15
#define D18F3xE4_Reserved_17_15_WIDTH                           3
#define D18F3xE4_Reserved_17_15_MASK                            0x38000
#define D18F3xE4_SetC0LHtcAct_OFFSET                            18
#define D18F3xE4_SetC0LHtcAct_WIDTH                             1
#define D18F3xE4_SetC0LHtcAct_MASK                              0x40000
#define D18F3xE4_SetC1LHtcAct_OFFSET                            19
#define D18F3xE4_SetC1LHtcAct_WIDTH                             1
#define D18F3xE4_SetC1LHtcAct_MASK                              0x80000
#define D18F3xE4_Reserved_29_20_OFFSET                          20
#define D18F3xE4_Reserved_29_20_WIDTH                           10
#define D18F3xE4_Reserved_29_20_MASK                            0x3ff00000
#define D18F3xE4_SetHtcAct_OFFSET                               30
#define D18F3xE4_SetHtcAct_WIDTH                                1
#define D18F3xE4_SetHtcAct_MASK                                 0x40000000
#define D18F3xE4_SwThermtp_OFFSET                               31
#define D18F3xE4_SwThermtp_WIDTH                                1
#define D18F3xE4_SwThermtp_MASK                                 0x80000000

/// D18F3xE4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                                  Thermtp:1 ; ///<
    UINT32                                             Reserved_2_2:1 ; ///<
    UINT32                                             ThermtpSense:1 ; ///< This bit is also set when the diagnostic bit SwThermtp = 1. ThermtpSense does not indicate a ThermTrip event if the Fuse[ThermTripLimit] is exceeded during cold reset after FuseValPwrOk asserts. ThermTrip is functionally unaffected after cold reset except for ThermtpSense not indicating the ThermTrip. UBTS #202864. K8G defined as ThermtpSense0.
    UINT32                                             Reserved_4_4:1 ; ///<
    UINT32                                                ThermtpEn:1 ; ///<11.5.4 [THERMTRIP] is supported by the processor.
    UINT32                                             Reserved_7_6:2 ; ///<
    UINT32                                              DiodeOffset:7 ; ///<This field is used to specify the correction value to the thermal diode connected to pins. See 2.11.4 [Thermal Diode]. It is encoded as follows: Diode not planned for customer use.
    UINT32                                           Reserved_17_15:3 ; ///<
    UINT32                                             SetC0LHtcAct:1 ; ///< UBTS #188182.
    UINT32                                             SetC1LHtcAct:1 ; ///< UBTS #188182.
    UINT32                                           Reserved_29_20:10; ///<
    UINT32                                                SetHtcAct:1 ; ///<
    UINT32                                                SwThermtp:1 ; ///<Writing a 1 to this bit position induces a THERMTRIP event. This bit returns 0 when read. This is a diagnostic bit, and it should be used for testing purposes only.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xE4_STRUCT;

// **** D18F3xE8 Register Definition ****
// Address
#define D18F3xE8_ADDRESS                                        0xe8

// Type
#define D18F3xE8_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xE8_Reserved_0_0_OFFSET                            0
#define D18F3xE8_Reserved_0_0_WIDTH                             1
#define D18F3xE8_Reserved_0_0_MASK                              0x1
#define D18F3xE8_Reserved_4_1_OFFSET                            1
#define D18F3xE8_Reserved_4_1_WIDTH                             4
#define D18F3xE8_Reserved_4_1_MASK                              0x1e
#define D18F3xE8_DdrMaxRate_OFFSET                              5
#define D18F3xE8_DdrMaxRate_WIDTH                               3
#define D18F3xE8_DdrMaxRate_MASK                                0xe0
#define D18F3xE8_MctCap_OFFSET                                  8
#define D18F3xE8_MctCap_WIDTH                                   1
#define D18F3xE8_MctCap_MASK                                    0x100
#define D18F3xE8_SvmCapable_OFFSET                              9
#define D18F3xE8_SvmCapable_WIDTH                               1
#define D18F3xE8_SvmCapable_MASK                                0x200
#define D18F3xE8_HtcCapable_OFFSET                              10
#define D18F3xE8_HtcCapable_WIDTH                               1
#define D18F3xE8_HtcCapable_MASK                                0x400
#define D18F3xE8_Reserved_11_11_OFFSET                          11
#define D18F3xE8_Reserved_11_11_WIDTH                           1
#define D18F3xE8_Reserved_11_11_MASK                            0x800
#define D18F3xE8_CmpCap_OFFSET                                  12
#define D18F3xE8_CmpCap_WIDTH                                   1
#define D18F3xE8_CmpCap_MASK                                    0x1000
#define D18F3xE8_Reserved_27_13_OFFSET                          13
#define D18F3xE8_Reserved_27_13_WIDTH                           15
#define D18F3xE8_Reserved_27_13_MASK                            0xfffe000
#define D18F3xE8_LHtcCapable_OFFSET                             28
#define D18F3xE8_LHtcCapable_WIDTH                              1
#define D18F3xE8_LHtcCapable_MASK                               0x10000000
#define D18F3xE8_Reserved_31_29_OFFSET                          29
#define D18F3xE8_Reserved_31_29_WIDTH                           3
#define D18F3xE8_Reserved_31_29_MASK                            0xe0000000

/// D18F3xE8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<DctDualCap. UBTS #212619.
    UINT32                                             Reserved_4_1:4 ; ///<
    UINT32                                               DdrMaxRate:3 ; ///< Specifies the maximum DRAM data rate that the processor is designed to support.
    UINT32                                                   MctCap:1 ; ///<
    UINT32                                               SvmCapable:1 ; ///<
    UINT32                                               HtcCapable:1 ; ///<Affects D18F3x64.
    UINT32                                           Reserved_11_11:1 ; ///<
    UINT32                                                   CmpCap:1 ; ///<Specifies the number of cores enabled on the device. Controlled by the following equation: C-D, where C=number of cores on the die and D=the number of Fuse[CoreDis] bits that are set. See 2.4.2 [Processor Cores and Downcoring]. CmpCap is used by microcode to compute CPUID_Fn8000_0008_ECX[NC], CPUID_Fn8000_0001_EBX[LogicalProcessorCount], CPUID_Fn0000_0001_EDX[HTT], CPUID_Fn8000_0001_ECX[CmpLegacy].
    UINT32                                           Reserved_27_13:15; ///< Bit 13 is CmpCap[1].
    UINT32                                              LHtcCapable:1 ; ///<
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xE8_STRUCT;

// **** D18F3xF0 Register Definition ****
// Address
#define D18F3xF0_ADDRESS                                        0xf0

// Type
#define D18F3xF0_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xF0_Reserved_31_0_OFFSET                           0
#define D18F3xF0_Reserved_31_0_WIDTH                            32
#define D18F3xF0_Reserved_31_0_MASK                             0xffffffff

/// D18F3xF0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_31_0:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xF0_STRUCT;

// **** D18F3xF4 Register Definition ****
// Address
#define D18F3xF4_ADDRESS                                        0xf4

// Type
#define D18F3xF4_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xF4_Reserved_31_0_OFFSET                           0
#define D18F3xF4_Reserved_31_0_WIDTH                            32
#define D18F3xF4_Reserved_31_0_MASK                             0xffffffff

/// D18F3xF4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_31_0:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xF4_STRUCT;

// **** D18F3xF8 Register Definition ****
// Address
#define D18F3xF8_ADDRESS                                        0xf8

// Type
#define D18F3xF8_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xF8_Reserved_31_0_OFFSET                           0
#define D18F3xF8_Reserved_31_0_WIDTH                            32
#define D18F3xF8_Reserved_31_0_MASK                             0xffffffff

/// D18F3xF8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_31_0:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xF8_STRUCT;

// **** D18F3xFC Register Definition ****
// Address
#define D18F3xFC_ADDRESS                                        0xfc

// Type
#define D18F3xFC_TYPE                                           TYPE_D18F3
// Field Data
#define D18F3xFC_Stepping_OFFSET                                0
#define D18F3xFC_Stepping_WIDTH                                 4
#define D18F3xFC_Stepping_MASK                                  0xf
#define D18F3xFC_BaseModel_OFFSET                               4
#define D18F3xFC_BaseModel_WIDTH                                4
#define D18F3xFC_BaseModel_MASK                                 0xf0
#define D18F3xFC_BaseFamily_OFFSET                              8
#define D18F3xFC_BaseFamily_WIDTH                               4
#define D18F3xFC_BaseFamily_MASK                                0xf00
#define D18F3xFC_Reserved_15_12_OFFSET                          12
#define D18F3xFC_Reserved_15_12_WIDTH                           4
#define D18F3xFC_Reserved_15_12_MASK                            0xf000
#define D18F3xFC_ExtendedModel_OFFSET                           16
#define D18F3xFC_ExtendedModel_WIDTH                            4
#define D18F3xFC_ExtendedModel_MASK                             0xf0000
#define D18F3xFC_ExtendedFamily_OFFSET                          20
#define D18F3xFC_ExtendedFamily_WIDTH                           8
#define D18F3xFC_ExtendedFamily_MASK                            0xff00000
#define D18F3xFC_Reserved_31_28_OFFSET                          28
#define D18F3xFC_Reserved_31_28_WIDTH                           4
#define D18F3xFC_Reserved_31_28_MASK                            0xf0000000

/// D18F3xFC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 Stepping:4 ; ///<
    UINT32                                                BaseModel:4 ; ///<
    UINT32                                               BaseFamily:4 ; ///<
    UINT32                                           Reserved_15_12:4 ; ///<
    UINT32                                            ExtendedModel:4 ; ///<
    UINT32                                           ExtendedFamily:8 ; ///<
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3xFC_STRUCT;

// **** D18F3x128 Register Definition ****
// Address
#define D18F3x128_ADDRESS                                       0x128

// Type
#define D18F3x128_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x128_C6Vid_OFFSET                                  0
#define D18F3x128_C6Vid_WIDTH                                   7
#define D18F3x128_C6Vid_MASK                                    0x7f
#define D18F3x128_Reserved_7_7_OFFSET                           7
#define D18F3x128_Reserved_7_7_WIDTH                            1
#define D18F3x128_Reserved_7_7_MASK                             0x80
#define D18F3x128_NbPsiVid_OFFSET                               8
#define D18F3x128_NbPsiVid_WIDTH                                7
#define D18F3x128_NbPsiVid_MASK                                 0x7f00
#define D18F3x128_NbPsiVidEn_OFFSET                             15
#define D18F3x128_NbPsiVidEn_WIDTH                              1
#define D18F3x128_NbPsiVidEn_MASK                               0x8000
#define D18F3x128_Reserved_31_16_OFFSET                         16
#define D18F3x128_Reserved_31_16_WIDTH                          16
#define D18F3x128_Reserved_31_16_MASK                           0xffff0000

/// D18F3x128
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    C6Vid:7 ; ///<Specifies the VID driven in the package PC6 state. See 2.5.4.2.3 [C-state Actions]. This field must be programmed within the limits specified by MSRC001_0071[MaxVid, MinVid].
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                 NbPsiVid:7 ; ///<If D18F3x128[NbPsiVidEn]==1, this field specifies a VID code that determines the state of the PSI_L bit for the VDDNB plane. Whenever the VID code generated by the processor for the VDDNB plane is less than (voltage is greater than) NbPsiVid, the PSI_L bit is sent as a 1. Whenever the VID code generated by the processor for the VDDNB plane is greater than or equal to (voltage less than or equal to) NbPsiVid, the PSI_L bit is sent as a 0. See 2.5.2.4.1 [PSI_L Bit].
    UINT32                                               NbPsiVidEn:1 ; ///<This bit specifies how the PSI_L bit for VDDNB is controlled.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x128_STRUCT;

// **** D18F3x15C Register Definition ****
// Address
#define D18F3x15C_ADDRESS                                       0x15c

// Type
#define D18F3x15C_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x15C_SclkVidLevel0_OFFSET                          0
#define D18F3x15C_SclkVidLevel0_WIDTH                           7
#define D18F3x15C_SclkVidLevel0_MASK                            0x7f
#define D18F3x15C_Reserved_7_7_OFFSET                           7
#define D18F3x15C_Reserved_7_7_WIDTH                            1
#define D18F3x15C_Reserved_7_7_MASK                             0x80
#define D18F3x15C_SclkVidLevel1_OFFSET                          8
#define D18F3x15C_SclkVidLevel1_WIDTH                           7
#define D18F3x15C_SclkVidLevel1_MASK                            0x7f00
#define D18F3x15C_Reserved_15_15_OFFSET                         15
#define D18F3x15C_Reserved_15_15_WIDTH                          1
#define D18F3x15C_Reserved_15_15_MASK                           0x8000
#define D18F3x15C_SclkVidLevel2_OFFSET                          16
#define D18F3x15C_SclkVidLevel2_WIDTH                           7
#define D18F3x15C_SclkVidLevel2_MASK                            0x7f0000
#define D18F3x15C_Reserved_23_23_OFFSET                         23
#define D18F3x15C_Reserved_23_23_WIDTH                          1
#define D18F3x15C_Reserved_23_23_MASK                           0x800000
#define D18F3x15C_SclkVidLevel3_OFFSET                          24
#define D18F3x15C_SclkVidLevel3_WIDTH                           7
#define D18F3x15C_SclkVidLevel3_MASK                            0x7f000000
#define D18F3x15C_Reserved_31_31_OFFSET                         31
#define D18F3x15C_Reserved_31_31_WIDTH                          1
#define D18F3x15C_Reserved_31_31_MASK                           0x80000000

/// D18F3x15C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            SclkVidLevel0:7 ; ///<Specifies a voltage level used for various GNB power management features. See 2.5.6 [GPU and Root Complex Power Management]. See the AMD Voltage Regulator Specification, #40182 for encodings. If the VID code specified is 00h, software should consider the VID code invalid.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                            SclkVidLevel1:7 ; ///<See D18F3x15C[SclkVidLevel0].
    UINT32                                           Reserved_15_15:1 ; ///<
    UINT32                                            SclkVidLevel2:7 ; ///<See D18F3x15C[SclkVidLevel0].
    UINT32                                           Reserved_23_23:1 ; ///<
    UINT32                                            SclkVidLevel3:7 ; ///<See D18F3x15C[SclkVidLevel0].
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x15C_STRUCT;

// **** D18F3x17C Register Definition ****
// Address
#define D18F3x17C_ADDRESS                                       0x17c

// Type
#define D18F3x17C_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x17C_HiPriPBC_OFFSET                               0
#define D18F3x17C_HiPriPBC_WIDTH                                6
#define D18F3x17C_HiPriPBC_MASK                                 0x3f
#define D18F3x17C_Reserved_7_6_OFFSET                           6
#define D18F3x17C_Reserved_7_6_WIDTH                            2
#define D18F3x17C_Reserved_7_6_MASK                             0xc0
#define D18F3x17C_HiPriNPBC_OFFSET                              8
#define D18F3x17C_HiPriNPBC_WIDTH                               6
#define D18F3x17C_HiPriNPBC_MASK                                0x3f00
#define D18F3x17C_Reserved_31_14_OFFSET                         14
#define D18F3x17C_Reserved_31_14_WIDTH                          18
#define D18F3x17C_Reserved_31_14_MASK                           0xffffc000

/// D18F3x17C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 HiPriPBC:6 ; ///<
    UINT32                                             Reserved_7_6:2 ; ///<
    UINT32                                                HiPriNPBC:6 ; ///<
    UINT32                                           Reserved_31_14:18; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x17C_STRUCT;

// **** D18F3x180 Register Definition ****
// Address
#define D18F3x180_ADDRESS                                       0x180

// Type
#define D18F3x180_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x180_McaLogUsPwDataErrEn_OFFSET                    0
#define D18F3x180_McaLogUsPwDataErrEn_WIDTH                     1
#define D18F3x180_McaLogUsPwDataErrEn_MASK                      0x1
#define D18F3x180_SyncFloodOnUsPwDataErr_OFFSET                 1
#define D18F3x180_SyncFloodOnUsPwDataErr_WIDTH                  1
#define D18F3x180_SyncFloodOnUsPwDataErr_MASK                   0x2
#define D18F3x180_WDTCntSel_3__OFFSET                           2
#define D18F3x180_WDTCntSel_3__WIDTH                            1
#define D18F3x180_WDTCntSel_3__MASK                             0x4
#define D18F3x180_DatErrChgToTgtAbt_OFFSET                      3
#define D18F3x180_DatErrChgToTgtAbt_WIDTH                       1
#define D18F3x180_DatErrChgToTgtAbt_MASK                        0x8
#define D18F3x180_MstAbtChgToNoErrs_OFFSET                      4
#define D18F3x180_MstAbtChgToNoErrs_WIDTH                       1
#define D18F3x180_MstAbtChgToNoErrs_MASK                        0x10
#define D18F3x180_DisPciCfgCpuMstAbtRsp_OFFSET                  5
#define D18F3x180_DisPciCfgCpuMstAbtRsp_WIDTH                   1
#define D18F3x180_DisPciCfgCpuMstAbtRsp_MASK                    0x20
#define D18F3x180_SyncFloodOnDatErr_OFFSET                      6
#define D18F3x180_SyncFloodOnDatErr_WIDTH                       1
#define D18F3x180_SyncFloodOnDatErr_MASK                        0x40
#define D18F3x180_SyncFloodOnTgtAbtErr_OFFSET                   7
#define D18F3x180_SyncFloodOnTgtAbtErr_WIDTH                    1
#define D18F3x180_SyncFloodOnTgtAbtErr_MASK                     0x80
#define D18F3x180_SyncOnHtProtEn_OFFSET                         8
#define D18F3x180_SyncOnHtProtEn_WIDTH                          1
#define D18F3x180_SyncOnHtProtEn_MASK                           0x100
#define D18F3x180_Reserved_20_9_OFFSET                          9
#define D18F3x180_Reserved_20_9_WIDTH                           12
#define D18F3x180_Reserved_20_9_MASK                            0x1ffe00
#define D18F3x180_SyncFloodOnCpuLeakErr_OFFSET                  21
#define D18F3x180_SyncFloodOnCpuLeakErr_WIDTH                   1
#define D18F3x180_SyncFloodOnCpuLeakErr_MASK                    0x200000
#define D18F3x180_Reserved_31_22_OFFSET                         22
#define D18F3x180_Reserved_31_22_WIDTH                          10
#define D18F3x180_Reserved_31_22_MASK                           0xffc00000

/// D18F3x180
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                      McaLogUsPwDataErrEn:1 ; ///< Upstream posted write data errors do not cause a sync flood when this bit is zero.
    UINT32                                   SyncFloodOnUsPwDataErr:1 ; ///< See 2.12.4.8 [SYNC_FLOOD Message].
    UINT32                                             WDTCntSel_3_:1 ; ///<See D18F3x44[WDTCntSel].
    UINT32                                        DatErrChgToTgtAbt:1 ; ///<
    UINT32                                        MstAbtChgToNoErrs:1 ; ///< When MstAbtChgToNoErrs and D18F3x44[IoMstAbortDis] are both set, MstAbtChgToNoErrs takes precedence.
    UINT32                                    DisPciCfgCpuMstAbtRsp:1 ; ///< It is recommended that this bit be set in order to avoid MCA exceptions being generated from master aborts for PCI configuration accesses, which are common during device enumeration.
    UINT32                                        SyncFloodOnDatErr:1 ; ///< See 2.12.4.8 [SYNC_FLOOD Message].
    UINT32                                     SyncFloodOnTgtAbtErr:1 ; ///< See 2.12.4.8 [SYNC_FLOOD Message].
    UINT32                                           SyncOnHtProtEn:1 ; ///< See 2.12.4.8 [SYNC_FLOOD Message].
    UINT32                                            Reserved_20_9:12; ///<
    UINT32                                    SyncFloodOnCpuLeakErr:1 ; ///<
    UINT32                                           Reserved_31_22:10; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x180_STRUCT;

// **** D18F3x188 Register Definition ****
// Address
#define D18F3x188_ADDRESS                                       0x188

// Type
#define D18F3x188_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x188_DisNbIntPendSbc_OFFSET                        0
#define D18F3x188_DisNbIntPendSbc_WIDTH                         1
#define D18F3x188_DisNbIntPendSbc_MASK                          0x1
#define D18F3x188_Reserved_7_1_OFFSET                           1
#define D18F3x188_Reserved_7_1_WIDTH                            7
#define D18F3x188_Reserved_7_1_MASK                             0xfe
#define D18F3x188_Reserved_8_8_OFFSET                           8
#define D18F3x188_Reserved_8_8_WIDTH                            1
#define D18F3x188_Reserved_8_8_MASK                             0x100
#define D18F3x188_DramSrNclkDivDis_OFFSET                       9
#define D18F3x188_DramSrNclkDivDis_WIDTH                        1
#define D18F3x188_DramSrNclkDivDis_MASK                         0x200
#define D18F3x188_Reserved_12_10_OFFSET                         10
#define D18F3x188_Reserved_12_10_WIDTH                          3
#define D18F3x188_Reserved_12_10_MASK                           0x1c00
#define D18F3x188_Reserved_13_13_OFFSET                         13
#define D18F3x188_Reserved_13_13_WIDTH                          1
#define D18F3x188_Reserved_13_13_MASK                           0x2000
#define D18F3x188_DisCpuSerWrBehindNpIoWr_OFFSET                14
#define D18F3x188_DisCpuSerWrBehindNpIoWr_WIDTH                 1
#define D18F3x188_DisCpuSerWrBehindNpIoWr_MASK                  0x4000
#define D18F3x188_Reserved_15_15_OFFSET                         15
#define D18F3x188_Reserved_15_15_WIDTH                          1
#define D18F3x188_Reserved_15_15_MASK                           0x8000
#define D18F3x188_DisShortLife_OFFSET                           16
#define D18F3x188_DisShortLife_WIDTH                            1
#define D18F3x188_DisShortLife_MASK                             0x10000
#define D18F3x188_Reserved_18_17_OFFSET                         17
#define D18F3x188_Reserved_18_17_WIDTH                          2
#define D18F3x188_Reserved_18_17_MASK                           0x60000
#define D18F3x188_DisCpuOrdBetweenDramOpandNonDramOp_OFFSET     19
#define D18F3x188_DisCpuOrdBetweenDramOpandNonDramOp_WIDTH      1
#define D18F3x188_DisCpuOrdBetweenDramOpandNonDramOp_MASK       0x80000
#define D18F3x188_EnStallDramSzBehindIoPost_OFFSET              20
#define D18F3x188_EnStallDramSzBehindIoPost_WIDTH               1
#define D18F3x188_EnStallDramSzBehindIoPost_MASK                0x100000
#define D18F3x188_EnCpuSerWrBehindIoRd_OFFSET                   21
#define D18F3x188_EnCpuSerWrBehindIoRd_WIDTH                    1
#define D18F3x188_EnCpuSerWrBehindIoRd_MASK                     0x200000
#define D18F3x188_EnCpuSerRdBehindNpIoWr_OFFSET                 22
#define D18F3x188_EnCpuSerRdBehindNpIoWr_WIDTH                  1
#define D18F3x188_EnCpuSerRdBehindNpIoWr_MASK                   0x400000
#define D18F3x188_EnCpuSerRdBehindIoRd_OFFSET                   23
#define D18F3x188_EnCpuSerRdBehindIoRd_WIDTH                    1
#define D18F3x188_EnCpuSerRdBehindIoRd_MASK                     0x800000
#define D18F3x188_FeArbCpuWeightOverLoPrio_OFFSET               24
#define D18F3x188_FeArbCpuWeightOverLoPrio_WIDTH                4
#define D18F3x188_FeArbCpuWeightOverLoPrio_MASK                 0xf000000
#define D18F3x188_FeArbCpuWeightOverHiPrio_OFFSET               28
#define D18F3x188_FeArbCpuWeightOverHiPrio_WIDTH                4
#define D18F3x188_FeArbCpuWeightOverHiPrio_MASK                 0xf0000000

/// D18F3x188
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          DisNbIntPendSbc:1 ; ///<
    UINT32                                             Reserved_7_1:7 ; ///<
    UINT32                                             Reserved_8_8:1 ; ///<
    UINT32                                         DramSrNclkDivDis:1 ; ///<
    UINT32                                           Reserved_12_10:3 ; ///<
    UINT32                                           Reserved_13_13:1 ; ///<
    UINT32                                  DisCpuSerWrBehindNpIoWr:1 ; ///< (RuleH in RTL.) UBTS #13408=WONTFIX (Requires DisCpuSerWrBehindNpIoWr=0)
    UINT32                                           Reserved_15_15:1 ; ///<
    UINT32                                             DisShortLife:1 ; ///< This bit must be 0 for DRAM training.
    UINT32                                           Reserved_18_17:2 ; ///<
    UINT32                       DisCpuOrdBetweenDramOpandNonDramOp:1 ; ///< Setting this bit may break some producer consumer scenarios. This bit can be used as deadlock avoidance if the downstream ONION posted channel can be blocked.
    UINT32                                EnStallDramSzBehindIoPost:1 ; ///< This bit can be used as deadlock avoidance if the downstream ONION posted channel can be blocked
    UINT32                                     EnCpuSerWrBehindIoRd:1 ; ///< (RuleG in RTL.)
    UINT32                                   EnCpuSerRdBehindNpIoWr:1 ; ///< (RuleC in RTL.)
    UINT32                                     EnCpuSerRdBehindIoRd:1 ; ///< (RuleB in RTL.)
    UINT32                                 FeArbCpuWeightOverLoPrio:4 ; ///<This value is the number of times (out of 16) that the arbiter favors the CPU when both a CPU and the Low Priority channel are requesting. FeArbCpuWeightOverLoPrio must be >= FeArbCpuWeightOverHiPrio. When two CPUs are enabled each CPU is granted half of this value on average.
    UINT32                                 FeArbCpuWeightOverHiPrio:4 ; ///<This value is the number of times (out of 16) that the arbiter favors the CPU when both a CPU and the High Priority channel are requesting. FeArbCpuWeightOverHiPrio must be >= 1. When two CPUs are enabled each CPU is granted half of this value on average.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x188_STRUCT;

// **** D18F3x1CC Register Definition ****
// Address
#define D18F3x1CC_ADDRESS                                       0x1cc

// Type
#define D18F3x1CC_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x1CC_LvtOffset_OFFSET                              0
#define D18F3x1CC_LvtOffset_WIDTH                               4
#define D18F3x1CC_LvtOffset_MASK                                0xf
#define D18F3x1CC_Reserved_7_4_OFFSET                           4
#define D18F3x1CC_Reserved_7_4_WIDTH                            4
#define D18F3x1CC_Reserved_7_4_MASK                             0xf0
#define D18F3x1CC_LvtOffsetVal_OFFSET                           8
#define D18F3x1CC_LvtOffsetVal_WIDTH                            1
#define D18F3x1CC_LvtOffsetVal_MASK                             0x100
#define D18F3x1CC_Reserved_31_9_OFFSET                          9
#define D18F3x1CC_Reserved_31_9_WIDTH                           23
#define D18F3x1CC_Reserved_31_9_MASK                            0xfffffe00

/// D18F3x1CC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                LvtOffset:4 ; ///<This specifies the address of the IBS LVT entry in the APIC registers as follows: See APIC[530:500].
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                             LvtOffsetVal:1 ; ///< This bit is just a reporting bit between BIOS and OS and has no function in hardware.
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x1CC_STRUCT;

// **** D18F3x1E4 Register Definition ****
// Address
#define D18F3x1E4_ADDRESS                                       0x1e4

// Type
#define D18F3x1E4_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x1E4_Reserved_0_0_OFFSET                           0
#define D18F3x1E4_Reserved_0_0_WIDTH                            1
#define D18F3x1E4_Reserved_0_0_MASK                             0x1
#define D18F3x1E4_SbTsiDis_OFFSET                               1
#define D18F3x1E4_SbTsiDis_WIDTH                                1
#define D18F3x1E4_SbTsiDis_MASK                                 0x2
#define D18F3x1E4_Reserved_3_2_OFFSET                           2
#define D18F3x1E4_Reserved_3_2_WIDTH                            2
#define D18F3x1E4_Reserved_3_2_MASK                             0xc
#define D18F3x1E4_SbiAddr_OFFSET                                4
#define D18F3x1E4_SbiAddr_WIDTH                                 3
#define D18F3x1E4_SbiAddr_MASK                                  0x70
#define D18F3x1E4_Reserved_11_7_OFFSET                          7
#define D18F3x1E4_Reserved_11_7_WIDTH                           5
#define D18F3x1E4_Reserved_11_7_MASK                            0xf80
#define D18F3x1E4_EnMtHdtBcast_OFFSET                           12
#define D18F3x1E4_EnMtHdtBcast_WIDTH                            1
#define D18F3x1E4_EnMtHdtBcast_MASK                             0x1000
#define D18F3x1E4_Reserved_30_13_OFFSET                         13
#define D18F3x1E4_Reserved_30_13_WIDTH                          18
#define D18F3x1E4_Reserved_30_13_MASK                           0x7fffe000
#define D18F3x1E4_SbiRegWrDn_OFFSET                             31
#define D18F3x1E4_SbiRegWrDn_WIDTH                              1
#define D18F3x1E4_SbiRegWrDn_MASK                               0x80000000

/// D18F3x1E4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                                 SbTsiDis:1 ; ///<
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                                  SbiAddr:3 ; ///<Specifies bits[3:1] of the SMBus address of the processor SBI ports. SMBus address bits [3:1] = {~SA[2],SA[1:0]}.
    UINT32                                            Reserved_11_7:5 ; ///<
    UINT32                                             EnMtHdtBcast:1 ; ///<
    UINT32                                           Reserved_30_13:18; ///<
    UINT32                                               SbiRegWrDn:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x1E4_STRUCT;

// **** D18F3x1E8 Register Definition ****
// Address
#define D18F3x1E8_ADDRESS                                       0x1e8

// Type
#define D18F3x1E8_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x1E8_SbiRegAddr_OFFSET                             0
#define D18F3x1E8_SbiRegAddr_WIDTH                              8
#define D18F3x1E8_SbiRegAddr_MASK                               0xff
#define D18F3x1E8_Reserved_31_8_OFFSET                          8
#define D18F3x1E8_Reserved_31_8_WIDTH                           24
#define D18F3x1E8_Reserved_31_8_MASK                            0xffffff00

/// D18F3x1E8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               SbiRegAddr:8 ; ///<This field specifies the 8-bit address of the SB-TSI register to access.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x1E8_STRUCT;

// **** D18F3x1EC Register Definition ****
// Address
#define D18F3x1EC_ADDRESS                                       0x1ec

// Type
#define D18F3x1EC_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x1EC_SbiRegDat0_OFFSET                             0
#define D18F3x1EC_SbiRegDat0_WIDTH                              8
#define D18F3x1EC_SbiRegDat0_MASK                               0xff
#define D18F3x1EC_Reserved_31_8_OFFSET                          8
#define D18F3x1EC_Reserved_31_8_WIDTH                           24
#define D18F3x1EC_Reserved_31_8_MASK                            0xffffff00

/// D18F3x1EC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               SbiRegDat0:8 ; ///<This field specifies the data to be read or written to the SBI register selected by D18F3x1E8.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x1EC_STRUCT;

// **** D18F3x1F0 Register Definition ****
// Address
#define D18F3x1F0_ADDRESS                                       0x1f0

// Type
#define D18F3x1F0_TYPE                                          TYPE_D18F3
// Field Data
#define D18F3x1F0_BrandId_OFFSET                                0
#define D18F3x1F0_BrandId_WIDTH                                 16
#define D18F3x1F0_BrandId_MASK                                  0xffff
#define D18F3x1F0_Reserved_18_16_OFFSET                         16
#define D18F3x1F0_Reserved_18_16_WIDTH                          3
#define D18F3x1F0_Reserved_18_16_MASK                           0x70000
#define D18F3x1F0_SerialNumRdDis_OFFSET                         19
#define D18F3x1F0_SerialNumRdDis_WIDTH                          1
#define D18F3x1F0_SerialNumRdDis_MASK                           0x80000
#define D18F3x1F0_Reserved_31_20_OFFSET                         20
#define D18F3x1F0_Reserved_31_20_WIDTH                          12
#define D18F3x1F0_Reserved_31_20_MASK                           0xfff00000

/// D18F3x1F0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  BrandId:16; ///<Brand identifier. This is identical to CPUID_Fn8000_0001_EBX[BrandId].
    UINT32                                           Reserved_18_16:3 ; ///<
    UINT32                                           SerialNumRdDis:1 ; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F3x1F0_STRUCT;

// **** D18F4x00 Register Definition ****
// Address
#define D18F4x00_ADDRESS                                        0x0

// Type
#define D18F4x00_TYPE                                           TYPE_D18F4
// Field Data
#define D18F4x00_VendorID_OFFSET                                0
#define D18F4x00_VendorID_WIDTH                                 16
#define D18F4x00_VendorID_MASK                                  0xffff
#define D18F4x00_DeviceID_OFFSET                                16
#define D18F4x00_DeviceID_WIDTH                                 16
#define D18F4x00_DeviceID_MASK                                  0xffff0000

/// D18F4x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VendorID:16; ///<
    UINT32                                                 DeviceID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x00_STRUCT;

// **** D18F4x04 Register Definition ****
// Address
#define D18F4x04_ADDRESS                                        0x4

// Type
#define D18F4x04_TYPE                                           TYPE_D18F4
// Field Data
#define D18F4x04_Command_OFFSET                                 0
#define D18F4x04_Command_WIDTH                                  16
#define D18F4x04_Command_MASK                                   0xffff
#define D18F4x04_Status_OFFSET                                  16
#define D18F4x04_Status_WIDTH                                   16
#define D18F4x04_Status_MASK                                    0xffff0000

/// D18F4x04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Command:16; ///<
    UINT32                                                   Status:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x04_STRUCT;

// **** D18F4x08 Register Definition ****
// Address
#define D18F4x08_ADDRESS                                        0x8

// Type
#define D18F4x08_TYPE                                           TYPE_D18F4
// Field Data
#define D18F4x08_RevID_OFFSET                                   0
#define D18F4x08_RevID_WIDTH                                    8
#define D18F4x08_RevID_MASK                                     0xff
#define D18F4x08_ClassCode_OFFSET                               8
#define D18F4x08_ClassCode_WIDTH                                24
#define D18F4x08_ClassCode_MASK                                 0xffffff00

/// D18F4x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    RevID:8 ; ///<
    UINT32                                                ClassCode:24; ///<Provides the host bridge class code as defined in the PCI specification.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x08_STRUCT;

// **** D18F4x0C Register Definition ****
// Address
#define D18F4x0C_ADDRESS                                        0xc

// Type
#define D18F4x0C_TYPE                                           TYPE_D18F4
// Field Data
#define D18F4x0C_HeaderTypeReg_OFFSET                           0
#define D18F4x0C_HeaderTypeReg_WIDTH                            32
#define D18F4x0C_HeaderTypeReg_MASK                             0xffffffff

/// D18F4x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            HeaderTypeReg:32; ///<The header type field indicates that there are multiple functions present in this device.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x0C_STRUCT;

// **** D18F4x34 Register Definition ****
// Address
#define D18F4x34_ADDRESS                                        0x34

// Type
#define D18F4x34_TYPE                                           TYPE_D18F4
// Field Data
#define D18F4x34_CapPtr_OFFSET                                  0
#define D18F4x34_CapPtr_WIDTH                                   8
#define D18F4x34_CapPtr_MASK                                    0xff
#define D18F4x34_Reserved_31_8_OFFSET                           8
#define D18F4x34_Reserved_31_8_WIDTH                            24
#define D18F4x34_Reserved_31_8_MASK                             0xffffff00

/// D18F4x34
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   CapPtr:8 ; ///<
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x34_STRUCT;

// **** D18F4x118 Register Definition ****
// Address
#define D18F4x118_ADDRESS                                       0x118

// Type
#define D18F4x118_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x118_CstAct0_OFFSET                                0
#define D18F4x118_CstAct0_WIDTH                                 3
#define D18F4x118_CstAct0_MASK                                  0x7
#define D18F4x118_Reserved_7_3_OFFSET                           3
#define D18F4x118_Reserved_7_3_WIDTH                            5
#define D18F4x118_Reserved_7_3_MASK                             0xf8
#define D18F4x118_CstAct1_OFFSET                                8
#define D18F4x118_CstAct1_WIDTH                                 3
#define D18F4x118_CstAct1_MASK                                  0x700
#define D18F4x118_Reserved_15_11_OFFSET                         11
#define D18F4x118_Reserved_15_11_WIDTH                          5
#define D18F4x118_Reserved_15_11_MASK                           0xf800
#define D18F4x118_CstAct2_OFFSET                                16
#define D18F4x118_CstAct2_WIDTH                                 3
#define D18F4x118_CstAct2_MASK                                  0x70000
#define D18F4x118_Reserved_23_19_OFFSET                         19
#define D18F4x118_Reserved_23_19_WIDTH                          5
#define D18F4x118_Reserved_23_19_MASK                           0xf80000
#define D18F4x118_CstAct3_OFFSET                                24
#define D18F4x118_CstAct3_WIDTH                                 3
#define D18F4x118_CstAct3_MASK                                  0x7000000
#define D18F4x118_Reserved_31_27_OFFSET                         27
#define D18F4x118_Reserved_31_27_WIDTH                          5
#define D18F4x118_Reserved_31_27_MASK                           0xf8000000

/// D18F4x118
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  CstAct0:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr]. See Table 196.
    UINT32                                             Reserved_7_3:5 ; ///<
    UINT32                                                  CstAct1:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr + 1]. See Table 196.
    UINT32                                           Reserved_15_11:5 ; ///<
    UINT32                                                  CstAct2:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr + 2]. See Table 196.
    UINT32                                           Reserved_23_19:5 ; ///<
    UINT32                                                  CstAct3:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr + 3]. See Table 196.
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x118_STRUCT;

// **** D18F4x11C Register Definition ****
// Address
#define D18F4x11C_ADDRESS                                       0x11c

// Type
#define D18F4x11C_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x11C_CstAct4_OFFSET                                0
#define D18F4x11C_CstAct4_WIDTH                                 3
#define D18F4x11C_CstAct4_MASK                                  0x7
#define D18F4x11C_Reserved_7_3_OFFSET                           3
#define D18F4x11C_Reserved_7_3_WIDTH                            5
#define D18F4x11C_Reserved_7_3_MASK                             0xf8
#define D18F4x11C_CstAct5_OFFSET                                8
#define D18F4x11C_CstAct5_WIDTH                                 3
#define D18F4x11C_CstAct5_MASK                                  0x700
#define D18F4x11C_Reserved_15_11_OFFSET                         11
#define D18F4x11C_Reserved_15_11_WIDTH                          5
#define D18F4x11C_Reserved_15_11_MASK                           0xf800
#define D18F4x11C_CstAct6_OFFSET                                16
#define D18F4x11C_CstAct6_WIDTH                                 3
#define D18F4x11C_CstAct6_MASK                                  0x70000
#define D18F4x11C_Reserved_23_19_OFFSET                         19
#define D18F4x11C_Reserved_23_19_WIDTH                          5
#define D18F4x11C_Reserved_23_19_MASK                           0xf80000
#define D18F4x11C_CstAct7_OFFSET                                24
#define D18F4x11C_CstAct7_WIDTH                                 3
#define D18F4x11C_CstAct7_MASK                                  0x7000000
#define D18F4x11C_Reserved_31_27_OFFSET                         27
#define D18F4x11C_Reserved_31_27_WIDTH                          5
#define D18F4x11C_Reserved_31_27_MASK                           0xf8000000

/// D18F4x11C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  CstAct4:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr + 4]. See Table 196.
    UINT32                                             Reserved_7_3:5 ; ///<
    UINT32                                                  CstAct5:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr + 5]. See Table 196.
    UINT32                                           Reserved_15_11:5 ; ///<
    UINT32                                                  CstAct6:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr + 6]. See Table 196.
    UINT32                                           Reserved_23_19:5 ; ///<
    UINT32                                                  CstAct7:3 ; ///<Specifies the actions attempted by the core when software reads from the IO address specified by MSRC001_0073[CstateAddr + 7]. See Table 196.
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x11C_STRUCT;

// **** D18F4x120 Register Definition ****
// Address
#define D18F4x120_ADDRESS                                       0x120

// Type
#define D18F4x120_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x120_Reserved_12_0_OFFSET                          0
#define D18F4x120_Reserved_12_0_WIDTH                           13
#define D18F4x120_Reserved_12_0_MASK                            0x1fff
#define D18F4x120_CstDMATrackHyst_OFFSET                        13
#define D18F4x120_CstDMATrackHyst_WIDTH                         3
#define D18F4x120_CstDMATrackHyst_MASK                          0xe000
#define D18F4x120_DeepCstDMATrackEn_OFFSET                      16
#define D18F4x120_DeepCstDMATrackEn_WIDTH                       2
#define D18F4x120_DeepCstDMATrackEn_MASK                        0x30000
#define D18F4x120_AltVidTOPol_OFFSET                            18
#define D18F4x120_AltVidTOPol_WIDTH                             1
#define D18F4x120_AltVidTOPol_MASK                              0x40000
#define D18F4x120_DeepCstTOPol_OFFSET                           19
#define D18F4x120_DeepCstTOPol_WIDTH                            1
#define D18F4x120_DeepCstTOPol_MASK                             0x80000
#define D18F4x120_FchTO_OFFSET                                  20
#define D18F4x120_FchTO_WIDTH                                   3
#define D18F4x120_FchTO_MASK                                    0x700000
#define D18F4x120_AltVidAllowMsgEn_OFFSET                       23
#define D18F4x120_AltVidAllowMsgEn_WIDTH                        1
#define D18F4x120_AltVidAllowMsgEn_MASK                         0x800000
#define D18F4x120_DeepCstAllowMsgEn_OFFSET                      24
#define D18F4x120_DeepCstAllowMsgEn_WIDTH                       1
#define D18F4x120_DeepCstAllowMsgEn_MASK                        0x1000000
#define D18F4x120_Reserved_25_25_OFFSET                         25
#define D18F4x120_Reserved_25_25_WIDTH                          1
#define D18F4x120_Reserved_25_25_MASK                           0x2000000
#define D18F4x120_HltMsgType_OFFSET                             26
#define D18F4x120_HltMsgType_WIDTH                              1
#define D18F4x120_HltMsgType_MASK                               0x4000000
#define D18F4x120_CoreOffWriPri_OFFSET                          27
#define D18F4x120_CoreOffWriPri_WIDTH                           2
#define D18F4x120_CoreOffWriPri_MASK                            0x18000000
#define D18F4x120_Reserved_29_29_OFFSET                         29
#define D18F4x120_Reserved_29_29_WIDTH                          1
#define D18F4x120_Reserved_29_29_MASK                           0x20000000
#define D18F4x120_TrackEnterAltvidEn_OFFSET                     30
#define D18F4x120_TrackEnterAltvidEn_WIDTH                      1
#define D18F4x120_TrackEnterAltvidEn_MASK                       0x40000000
#define D18F4x120_CstateMsgDis_OFFSET                           31
#define D18F4x120_CstateMsgDis_WIDTH                            1
#define D18F4x120_CstateMsgDis_MASK                             0x80000000

/// D18F4x120
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_12_0:13; ///<
    UINT32                                          CstDMATrackHyst:3 ; ///<Specifies the hysteresis time for DMA activity tracking. See 2.5.4.2.4.1 [DMA Tracking] for more details.
    UINT32                                        DeepCstDMATrackEn:2 ; ///<Specifies the type of DMA activity to track when determining whether to allow access to PC6. See D18F4x120[CstDMATrackHyst] and 2.5.4.2.4.1 [DMA Tracking] for more details.
    UINT32                                              AltVidTOPol:1 ; ///<Specifies the action to take if a timeout occurs while waiting for a response from the FCH after requesting access to PC4. See 2.5.4.2.4.2 [FCH Messaging].  IF (!REVA0 && !REVA1 && (AltVidAllowMsgEn==1)) THEN AltVidTOPol also selects one of two methods by which a clock divider and/or voltage increase is applied to one core while the other core exits power gating. See AltVidAllowMsgEn. UBTS #249284. AltVidTOPol=0 specifies that LHTC is used to transition the core into the P-state specified by LHtcPstateLimit while the other core exits power gating. LHTC is released when the wake event is completed, allowing the core to return to its previous P-state. When AltVidAllowMsgEn=1 and AltVidTOPol=0: D18F3x138[LHtcEn] must be 0. D18F3x138[LHtcActC0] or D18F3x138[LHtcActC1] will be 1 while the other core exits power gating, regardless of Fuse[LHtcCap] and D18F3x138[LHtcEn]. MSRC001_0063[CurPstate] will be equal to D18F3x138[LHtcPstateLimit] while the other core exits power gating, regardless of MSRC001_0061[PstateMaxVal]. If D18F3x138[LHtcPstateLimit] > MSRC001_0061[PStateMaxVal], a Linux kernel patch is required. The PService state clock divider must be equal to the clock divider of the P-state specified by D18F3x138[LHtcPstateLimit]. Fuse[LHtcCap] may be 0 or 1. The value of Fuse[LHtcCap] does not affect this logic. AltVidTOPol=1 specifies that the clock divider of the core is increased to MSRC001_006B[CpuDidMSD, CpuDidLSD] while the other core exits power gating. If the clock divider of the core is greater than the divider specified by MSRC001_006B[CpuDidMSD, CpuDidLSD], no change is made. When the wake event is completed, the core clock divider is transitioned to the divider specified by its current P-state. ENDIF.
    UINT32                                             DeepCstTOPol:1 ; ///<Specifies the action to take if a timeout occurs while waiting for a response from the FCH after requesting access to PC6. See 2.5.4.2.4.2 [FCH Messaging].
    UINT32                                                    FchTO:3 ; ///<Specifies the time to wait for the response from the FCH after requesting access to a package C-state. See D18F4x120[DeepCstTOPol], D18F4x120[AltVidTOPol] and 2.5.4.2.4.2 [FCH Messaging].
    UINT32                                         AltVidAllowMsgEn:1 ; ///<Specifies whether the processor prevents or allows access to PC4 based on FCH messaging. This field should not be set to 1 if D18F4x120[TrackEnterAltvidEn]=1. Doing so results in undefined behavior. See 2.5.4.2.4.2 [FCH Messaging].  IF (!REVA0 && !REVA1) THEN AltVidAllowMsgEn=1 also enables a temporary clock divider and/or voltage increase on one core while the other core exits power gating. Software must not program AltVidAllowMsgEn=1 if D18F3xE8[CmpCap]=0. Two methods of clock divider and/or voltage increase are available, see AltVidTOPol. UBTS #249284. ENDIF.
    UINT32                                        DeepCstAllowMsgEn:1 ; ///<Specifies whether the processor prevents or allows access to PC6 based on FCH messaging. This field should not be set to 1 if D18F4x120[TrackEnterAltvidEn]=1. Doing so results in undefined behavior. See 2.5.4.2.4.2 [FCH Messaging].
    UINT32                                           Reserved_25_25:1 ; ///<
    UINT32                                               HltMsgType:1 ; ///<If D18F4x120[CstateMsgDis]==0, this bit specifies what type of message the processor sends when a package C-state transition occurs, regardless of the C-state entry mechanism (i.e. executing the HLT instruction does not imply that the halt message is sent, nor does entering a C-state via an IO instruction imply that the C-state change message is sent). The number of halt messages sent is equal to the number of cores in the system. Halt exit messages may not be sent when the idle residency is very brief. UBTS #246916. A single message is sent.  See 2.5.4.2.4.2 [FCH Messaging] and Table 51. This field is not expected to be used in silicon. It was only left in place for verification use.
    UINT32                                            CoreOffWriPri:2 ; ///<Specifies the priority given to DRAM writes and reads when saving and restoring data to enter or exit the CC6 state. See D18F2x118 for more details about DRAM transaction priorities. See 2.5.4.2.3.2 [Core C6 (CC6) State].
    UINT32                                           Reserved_29_29:1 ; ///<
    UINT32                                       TrackEnterAltvidEn:1 ; ///<Specifies whether the use of DMAACTIVE_L is enabled. See 2.5.4.2.4.1 [DMA Tracking] for more details. This field should not be set to 1 if D18F4x120[AltvidAllowMsgEn]=1. Doing so results in undefined behavior. See the FDS for details on the DMAACTIVE_L pin. The CNB internal name for this signal is EnterAltvidEn and its polarity is inverted from DMAACTIVE_L.
    UINT32                                             CstateMsgDis:1 ; ///<Specifies whether a message is sent to the FCH when a package C-state transition occurs. See 2.5.4.2.4.2 [FCH Messaging] for details.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x120_STRUCT;

// **** D18F4x124 Register Definition ****
// Address
#define D18F4x124_ADDRESS                                       0x124

// Type
#define D18F4x124_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x124_C0MonCC6En_OFFSET                             0
#define D18F4x124_C0MonCC6En_WIDTH                              1
#define D18F4x124_C0MonCC6En_MASK                               0x1
#define D18F4x124_C0MonCC6Lmt_OFFSET                            1
#define D18F4x124_C0MonCC6Lmt_WIDTH                             3
#define D18F4x124_C0MonCC6Lmt_MASK                              0xe
#define D18F4x124_C0MonCC6Cntr_OFFSET                           4
#define D18F4x124_C0MonCC6Cntr_WIDTH                            3
#define D18F4x124_C0MonCC6Cntr_MASK                             0x70
#define D18F4x124_Reserved_13_7_OFFSET                          7
#define D18F4x124_Reserved_13_7_WIDTH                           7
#define D18F4x124_Reserved_13_7_MASK                            0x3f80
#define D18F4x124_MonitorEnableMode_OFFSET                      14
#define D18F4x124_MonitorEnableMode_WIDTH                       1
#define D18F4x124_MonitorEnableMode_MASK                        0x4000
#define D18F4x124_TimerTickIntvlScale_OFFSET                    15
#define D18F4x124_TimerTickIntvlScale_WIDTH                     1
#define D18F4x124_TimerTickIntvlScale_MASK                      0x8000
#define D18F4x124_TrackTimerTickInterEn_OFFSET                  16
#define D18F4x124_TrackTimerTickInterEn_WIDTH                   1
#define D18F4x124_TrackTimerTickInterEn_MASK                    0x10000
#define D18F4x124_IntMonCC6En_OFFSET                            17
#define D18F4x124_IntMonCC6En_WIDTH                             1
#define D18F4x124_IntMonCC6En_MASK                              0x20000
#define D18F4x124_IntMonCC6Lmt_OFFSET                           18
#define D18F4x124_IntMonCC6Lmt_WIDTH                            4
#define D18F4x124_IntMonCC6Lmt_MASK                             0x3c0000
#define D18F4x124_IntMonPkgC6En_OFFSET                          22
#define D18F4x124_IntMonPkgC6En_WIDTH                           1
#define D18F4x124_IntMonPkgC6En_MASK                            0x400000
#define D18F4x124_IntMonPkgC6Lmt_OFFSET                         23
#define D18F4x124_IntMonPkgC6Lmt_WIDTH                          4
#define D18F4x124_IntMonPkgC6Lmt_MASK                           0x7800000
#define D18F4x124_IntMonIntrvl_OFFSET                           27
#define D18F4x124_IntMonIntrvl_WIDTH                            4
#define D18F4x124_IntMonIntrvl_MASK                             0x78000000
#define D18F4x124_IntMonWakeEn_OFFSET                           31
#define D18F4x124_IntMonWakeEn_WIDTH                            1
#define D18F4x124_IntMonWakeEn_MASK                             0x80000000

/// D18F4x124
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               C0MonCC6En:1 ; ///<Specifies whether the C0 residency monitor is enabled for the CC6 state. See 2.5.4.2.4.4 [Residency Monitors].
    UINT32                                              C0MonCC6Lmt:3 ; ///<Specifies the time threshold for the last C0 residency before incrementing the C0 residency counter. See 2.5.4.2.4.4 [Residency Monitors].
    UINT32                                             C0MonCC6Cntr:3 ; ///<Specifies the threshold for the C0 residency counter. See 2.5.4.2.4.4 [Residency Monitors].
    UINT32                                            Reserved_13_7:7 ; ///<
    UINT32                                        MonitorEnableMode:1 ; ///<Specifies when the C0 residency counter for each core stops counting in relation to core C-state entry. See 2.5.4.2.4.4 [Residency Monitors].
    UINT32                                      TimerTickIntvlScale:1 ; ///<See D18F4x124[IntMonPkgC6Lmt].
    UINT32                                    TrackTimerTickInterEn:1 ; ///<Specifies the timer tick monitor mode. See 2.5.4.2.4.3 [Interrupt Monitors].
    UINT32                                              IntMonCC6En:1 ; ///<Specifies whether the interrupt monitor is enabled for the core C6 state.
    UINT32                                             IntMonCC6Lmt:4 ; ///<Specifies the threshold for disallowing access to the core C6 state. See: D18F4x124[IntMonPkgC6Lmt]. See 2.5.4.2.4.3 [Interrupt Monitors].
    UINT32                                            IntMonPkgC6En:1 ; ///<Specifies whether the interrupt monitor is enabled for the package C6 state.
    UINT32                                           IntMonPkgC6Lmt:4 ; ///<Specifies the threshold for disallowing access to the package C6 state. See 2.5.4.2.4.3 [Interrupt Monitors].
    UINT32                                             IntMonIntrvl:4 ; ///<Specifies the time between timer tick interrupts last reported by the FCH. See 2.12.4.13 [Exit C-state Message] and 2.5.4.2.4.3 [Interrupt Monitors].
    UINT32                                             IntMonWakeEn:1 ; ///<Specifies whether a Timer Tick message from the FCH with encoding 1111b will automatically wake all cores from a C-state. See 2.12.4.13 [Exit C-state Message] and 2.5.4.2.4.3 [Interrupt Monitors].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x124_STRUCT;

// **** D18F4x128 Register Definition ****
// Address
#define D18F4x128_ADDRESS                                       0x128

// Type
#define D18F4x128_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x128_NonC0MonCC6En_OFFSET                          0
#define D18F4x128_NonC0MonCC6En_WIDTH                           1
#define D18F4x128_NonC0MonCC6En_MASK                            0x1
#define D18F4x128_NonC0MonCC6Lmt_OFFSET                         1
#define D18F4x128_NonC0MonCC6Lmt_WIDTH                          5
#define D18F4x128_NonC0MonCC6Lmt_MASK                           0x3e
#define D18F4x128_Reserved_31_6_OFFSET                          6
#define D18F4x128_Reserved_31_6_WIDTH                           26
#define D18F4x128_Reserved_31_6_MASK                            0xffffffc0

/// D18F4x128
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            NonC0MonCC6En:1 ; ///<Specifies whether the non-C0 residency monitor is enabled for the CC6 state. See 2.5.4.2.4.4.2 [Non-C0 residency Monitor].
    UINT32                                           NonC0MonCC6Lmt:5 ; ///<Specifies the non-C0 residency time required on a single non-C0 entry before transitions to CC6 are allowed. See 2.5.4.2.4.4.2 [Non-C0 residency Monitor] for additional details.
    UINT32                                            Reserved_31_6:26; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x128_STRUCT;

// **** D18F4x12C Register Definition ****
// Address
#define D18F4x12C_ADDRESS                                       0x12c

// Type
#define D18F4x12C_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x12C_C6Base_35_24__OFFSET                          0
#define D18F4x12C_C6Base_35_24__WIDTH                           12
#define D18F4x12C_C6Base_35_24__MASK                            0xfff
#define D18F4x12C_Reserved_15_12_OFFSET                         12
#define D18F4x12C_Reserved_15_12_WIDTH                          4
#define D18F4x12C_Reserved_15_12_MASK                           0xf000
#define D18F4x12C_Reserved_31_16_OFFSET                         16
#define D18F4x12C_Reserved_31_16_WIDTH                          16
#define D18F4x12C_Reserved_31_16_MASK                           0xffff0000

/// D18F4x12C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            C6Base_35_24_:12; ///<Specifies the DRAM base address of the memory region used to store data for the CC6 C-state. See 2.5.4.2.3.2 [Core C6 (CC6) State], 2.4.9.2.1 [Microcode Patch Procedure Overview] and 2.10.7 [DRAM CC6/PC6 Storage].
    UINT32                                           Reserved_15_12:4 ; ///<C6Base[39:36].
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x12C_STRUCT;

// **** D18F4x134 Register Definition ****
// Address
#define D18F4x134_ADDRESS                                       0x134

// Type
#define D18F4x134_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x134_IntRatePkgC6MaxDepth_OFFSET                   0
#define D18F4x134_IntRatePkgC6MaxDepth_WIDTH                    4
#define D18F4x134_IntRatePkgC6MaxDepth_MASK                     0xf
#define D18F4x134_IntRatePkgC6Threshold_OFFSET                  4
#define D18F4x134_IntRatePkgC6Threshold_WIDTH                   4
#define D18F4x134_IntRatePkgC6Threshold_MASK                    0xf0
#define D18F4x134_IntRatePkgC6BurstLen_OFFSET                   8
#define D18F4x134_IntRatePkgC6BurstLen_WIDTH                    3
#define D18F4x134_IntRatePkgC6BurstLen_MASK                     0x700
#define D18F4x134_IntRatePkgC6DecrRate_OFFSET                   11
#define D18F4x134_IntRatePkgC6DecrRate_WIDTH                    5
#define D18F4x134_IntRatePkgC6DecrRate_MASK                     0xf800
#define D18F4x134_IntRateCC6MaxDepth_OFFSET                     16
#define D18F4x134_IntRateCC6MaxDepth_WIDTH                      4
#define D18F4x134_IntRateCC6MaxDepth_MASK                       0xf0000
#define D18F4x134_IntRateCC6Threshold_OFFSET                    20
#define D18F4x134_IntRateCC6Threshold_WIDTH                     4
#define D18F4x134_IntRateCC6Threshold_MASK                      0xf00000
#define D18F4x134_IntRateCC6BurstLen_OFFSET                     24
#define D18F4x134_IntRateCC6BurstLen_WIDTH                      3
#define D18F4x134_IntRateCC6BurstLen_MASK                       0x7000000
#define D18F4x134_IntRateCC6DecrRate_OFFSET                     27
#define D18F4x134_IntRateCC6DecrRate_WIDTH                      5
#define D18F4x134_IntRateCC6DecrRate_MASK                       0xf8000000

/// D18F4x134
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                     IntRatePkgC6MaxDepth:4 ; ///<Specifies the saturation point of the PC6 interrupt counter.
    UINT32                                    IntRatePkgC6Threshold:4 ; ///<Specifies the threshold the PC6 interrupt counter must reach before access to PC6 is denied.
    UINT32                                     IntRatePkgC6BurstLen:3 ; ///<If the processor receives multiple interrupts within the time window specified by this field, the PC6 interrupt counter is only incremented by one.
    UINT32                                     IntRatePkgC6DecrRate:5 ; ///<Specifies the rate at which the PC6 interrupt counter is decremented.
    UINT32                                       IntRateCC6MaxDepth:4 ; ///<Specifies the saturation point of the CC6 interrupt counter.
    UINT32                                      IntRateCC6Threshold:4 ; ///<Specifies the threshold the CC6 interrupt counter must reach before access to CC6 is denied.
    UINT32                                       IntRateCC6BurstLen:3 ; ///<If the processor receives multiple interrupts within the time window specified by this field, the CC6 interrupt counter is only incremented by one. See D18F4x134[IntRatePkgC6BurstLen] for encodings.
    UINT32                                       IntRateCC6DecrRate:5 ; ///<Specifies the rate at which the CC6 interrupt counter is decremented. See D18F4x134[IntRatePkgC6DecrRate] for encodings.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x134_STRUCT;

// **** D18F4x138 Register Definition ****
// Address
#define D18F4x138_ADDRESS                                       0x138

// Type
#define D18F4x138_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x138_Smaf0Did_OFFSET                               0
#define D18F4x138_Smaf0Did_WIDTH                                5
#define D18F4x138_Smaf0Did_MASK                                 0x1f
#define D18F4x138_Reserved_7_5_OFFSET                           5
#define D18F4x138_Reserved_7_5_WIDTH                            3
#define D18F4x138_Reserved_7_5_MASK                             0xe0
#define D18F4x138_Smaf1Did_OFFSET                               8
#define D18F4x138_Smaf1Did_WIDTH                                5
#define D18F4x138_Smaf1Did_MASK                                 0x1f00
#define D18F4x138_Reserved_15_13_OFFSET                         13
#define D18F4x138_Reserved_15_13_WIDTH                          3
#define D18F4x138_Reserved_15_13_MASK                           0xe000
#define D18F4x138_Smaf2Did_OFFSET                               16
#define D18F4x138_Smaf2Did_WIDTH                                5
#define D18F4x138_Smaf2Did_MASK                                 0x1f0000
#define D18F4x138_Reserved_23_21_OFFSET                         21
#define D18F4x138_Reserved_23_21_WIDTH                          3
#define D18F4x138_Reserved_23_21_MASK                           0xe00000
#define D18F4x138_Smaf3Did_OFFSET                               24
#define D18F4x138_Smaf3Did_WIDTH                                5
#define D18F4x138_Smaf3Did_MASK                                 0x1f000000
#define D18F4x138_Reserved_31_29_OFFSET                         29
#define D18F4x138_Reserved_31_29_WIDTH                          3
#define D18F4x138_Reserved_31_29_MASK                           0xe0000000

/// D18F4x138
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 Smaf0Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF0. See D18F3x80 and D18F3x84.   See D18F4x1A8[SingleHaltCpuDid].
    UINT32                                             Reserved_7_5:3 ; ///<
    UINT32                                                 Smaf1Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF1. See D18F4x13C[Smaf0Did].
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                                 Smaf2Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF2. See D18F4x13C[Smaf0Did].
    UINT32                                           Reserved_23_21:3 ; ///<
    UINT32                                                 Smaf3Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF3. See D18F4x13C[Smaf0Did].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x138_STRUCT;

// **** D18F4x13C Register Definition ****
// Address
#define D18F4x13C_ADDRESS                                       0x13c

// Type
#define D18F4x13C_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x13C_Smaf4Did_OFFSET                               0
#define D18F4x13C_Smaf4Did_WIDTH                                5
#define D18F4x13C_Smaf4Did_MASK                                 0x1f
#define D18F4x13C_Reserved_7_5_OFFSET                           5
#define D18F4x13C_Reserved_7_5_WIDTH                            3
#define D18F4x13C_Reserved_7_5_MASK                             0xe0
#define D18F4x13C_Smaf5Did_OFFSET                               8
#define D18F4x13C_Smaf5Did_WIDTH                                5
#define D18F4x13C_Smaf5Did_MASK                                 0x1f00
#define D18F4x13C_Reserved_15_13_OFFSET                         13
#define D18F4x13C_Reserved_15_13_WIDTH                          3
#define D18F4x13C_Reserved_15_13_MASK                           0xe000
#define D18F4x13C_Smaf6Did_OFFSET                               16
#define D18F4x13C_Smaf6Did_WIDTH                                5
#define D18F4x13C_Smaf6Did_MASK                                 0x1f0000
#define D18F4x13C_Reserved_23_21_OFFSET                         21
#define D18F4x13C_Reserved_23_21_WIDTH                          3
#define D18F4x13C_Reserved_23_21_MASK                           0xe00000
#define D18F4x13C_Smaf7Did_OFFSET                               24
#define D18F4x13C_Smaf7Did_WIDTH                                5
#define D18F4x13C_Smaf7Did_MASK                                 0x1f000000
#define D18F4x13C_Reserved_31_29_OFFSET                         29
#define D18F4x13C_Reserved_31_29_WIDTH                          3
#define D18F4x13C_Reserved_31_29_MASK                           0xe0000000

/// D18F4x13C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 Smaf4Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF4. See D18F4x138[Smaf0Did].
    UINT32                                             Reserved_7_5:3 ; ///<
    UINT32                                                 Smaf5Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF5. See D18F4x138[Smaf0Did].
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                                 Smaf6Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF6. See D18F4x138[Smaf0Did].
    UINT32                                           Reserved_23_21:3 ; ///<
    UINT32                                                 Smaf7Did:5 ; ///<Specifies the clock divisor used when entering a low power state associated with SMAF7. See D18F4x138[Smaf0Did].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x13C_STRUCT;

// **** D18F4x15C Register Definition ****
// Address
#define D18F4x15C_ADDRESS                                       0x15c

// Type
#define D18F4x15C_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x15C_BoostSrc_OFFSET                               0
#define D18F4x15C_BoostSrc_WIDTH                                2
#define D18F4x15C_BoostSrc_MASK                                 0x3
#define D18F4x15C_NumBoostStates_OFFSET                         2
#define D18F4x15C_NumBoostStates_WIDTH                          3
#define D18F4x15C_NumBoostStates_MASK                           0x1c
#define D18F4x15C_Reserved_28_5_OFFSET                          5
#define D18F4x15C_Reserved_28_5_WIDTH                           24
#define D18F4x15C_Reserved_28_5_MASK                            0x1fffffc0
#define D18F4x15C_BoostEnAllCores_OFFSET                        29
#define D18F4x15C_BoostEnAllCores_WIDTH                         1
#define D18F4x15C_BoostEnAllCores_MASK                          0x20000000
#define D18F4x15C_Reserved_31_30_OFFSET                         30
#define D18F4x15C_Reserved_31_30_WIDTH                          2
#define D18F4x15C_Reserved_31_30_MASK                           0xc0000000

/// D18F4x15C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 BoostSrc:2 ; ///<Specifies whether CPB is enabled or disabled.
    UINT32                                           NumBoostStates:3 ; ///<Specifies the number of P-states that are considered boosted P-states.
    UINT32                                            Reserved_28_5:24; ///<
    UINT32                                          BoostEnAllCores:1 ; ///<
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x15C_STRUCT;

// **** D18F4x164 Register Definition ****
// Address
#define D18F4x164_ADDRESS                                       0x164

// Type
#define D18F4x164_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x164_FixedErrata_OFFSET                            0
#define D18F4x164_FixedErrata_WIDTH                             32
#define D18F4x164_FixedErrata_MASK                              0xffffffff

/// D18F4x164
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              FixedErrata:32; ///< See the Revision Guide for AMD Family 14h Models 00h-0Fh Processors for the definition of this field.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x164_STRUCT;

// **** D18F4x1A4 Register Definition ****
// Address
#define D18F4x1A4_ADDRESS                                       0x1a4

// Type
#define D18F4x1A4_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x1A4_IntRateMonMask_OFFSET                         0
#define D18F4x1A4_IntRateMonMask_WIDTH                          8
#define D18F4x1A4_IntRateMonMask_MASK                           0xff
#define D18F4x1A4_TimerTickMonMask_OFFSET                       8
#define D18F4x1A4_TimerTickMonMask_WIDTH                        8
#define D18F4x1A4_TimerTickMonMask_MASK                         0xff00
#define D18F4x1A4_NonC0MonMask_OFFSET                           16
#define D18F4x1A4_NonC0MonMask_WIDTH                            8
#define D18F4x1A4_NonC0MonMask_MASK                             0xff0000
#define D18F4x1A4_C0MonMask_OFFSET                              24
#define D18F4x1A4_C0MonMask_WIDTH                               8
#define D18F4x1A4_C0MonMask_MASK                                0xff000000

/// D18F4x1A4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           IntRateMonMask:8 ; ///<Specifies whether the interrupt rate monitor is masked. See 2.5.4.2.4.3 [Interrupt Monitors].
    UINT32                                         TimerTickMonMask:8 ; ///<Specifies whether the timer tick monitor is masked. See 2.5.4.2.4.3 [Interrupt Monitors].
    UINT32                                             NonC0MonMask:8 ; ///<Specifies whether the non-C0 residency monitor is masked. See 2.5.4.2.4.4 [Residency Monitors].
    UINT32                                                C0MonMask:8 ; ///<Specifies whether the C0 residency monitor is masked. See 2.5.4.2.4.4 [Residency Monitors].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x1A4_STRUCT;

// **** D18F4x1A8 Register Definition ****
// Address
#define D18F4x1A8_ADDRESS                                       0x1a8

// Type
#define D18F4x1A8_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x1A8_SingleHaltCpuDid_OFFSET                       0
#define D18F4x1A8_SingleHaltCpuDid_WIDTH                        5
#define D18F4x1A8_SingleHaltCpuDid_MASK                         0x1f
#define D18F4x1A8_AllHaltCpuDid_OFFSET                          5
#define D18F4x1A8_AllHaltCpuDid_WIDTH                           5
#define D18F4x1A8_AllHaltCpuDid_MASK                            0x3e0
#define D18F4x1A8_AltVidCpuDid_OFFSET                           10
#define D18F4x1A8_AltVidCpuDid_WIDTH                            5
#define D18F4x1A8_AltVidCpuDid_MASK                             0x7c00
#define D18F4x1A8_CpuProbEn_OFFSET                              15
#define D18F4x1A8_CpuProbEn_WIDTH                               1
#define D18F4x1A8_CpuProbEn_MASK                                0x8000
#define D18F4x1A8_ProbePServiceEn_OFFSET                        16
#define D18F4x1A8_ProbePServiceEn_WIDTH                         1
#define D18F4x1A8_ProbePServiceEn_MASK                          0x10000
#define D18F4x1A8_PService_OFFSET                               17
#define D18F4x1A8_PService_WIDTH                                3
#define D18F4x1A8_PService_MASK                                 0xe0000
#define D18F4x1A8_PServiceTmr_OFFSET                            20
#define D18F4x1A8_PServiceTmr_WIDTH                             3
#define D18F4x1A8_PServiceTmr_MASK                              0x700000
#define D18F4x1A8_PServiceTmrEn_OFFSET                          23
#define D18F4x1A8_PServiceTmrEn_WIDTH                           1
#define D18F4x1A8_PServiceTmrEn_MASK                            0x800000
#define D18F4x1A8_DramSrEn_OFFSET                               24
#define D18F4x1A8_DramSrEn_WIDTH                                1
#define D18F4x1A8_DramSrEn_MASK                                 0x1000000
#define D18F4x1A8_MemTriStateEn_OFFSET                          25
#define D18F4x1A8_MemTriStateEn_WIDTH                           1
#define D18F4x1A8_MemTriStateEn_MASK                            0x2000000
#define D18F4x1A8_DramSrHyst_OFFSET                             26
#define D18F4x1A8_DramSrHyst_WIDTH                              3
#define D18F4x1A8_DramSrHyst_MASK                               0x1c000000
#define D18F4x1A8_DramSrHystEnable_OFFSET                       29
#define D18F4x1A8_DramSrHystEnable_WIDTH                        1
#define D18F4x1A8_DramSrHystEnable_MASK                         0x20000000
#define D18F4x1A8_AltVidDMATrackEn_OFFSET                       30
#define D18F4x1A8_AltVidDMATrackEn_WIDTH                        2
#define D18F4x1A8_AltVidDMATrackEn_MASK                         0xc0000000

/// D18F4x1A8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         SingleHaltCpuDid:5 ; ///<On a processor with multiple cores, this specifies the divisor used when ramping core clocks down after a single core has entered the clocks ramped state. BOZO: Need to find out which values are being verified and only expose those.  The divisor must be 32 or greater. UBTS #218644. See also UBTS #207234. If an unsupported DID is programmed, hardware will try to go to that DID, but unsupported DIDs do not need to be verified or validated. If MSRC001_00[6B:64][CpuDidMSD] of the current P-state is greater than or equal to SingleHaltCpuDid, then no frequency change is made when entering the low-power state associated with this register. The COF = (the frequency specified by D18F3xD4[MainPllOpFreqId, MainPllOpFreqIdEn]) / (the divisor specified by this field).
    UINT32                                            AllHaltCpuDid:5 ; ///<Specifies the divisor used when entering PC1 with or without auto-Pmin. See 2.5.4.2.3.3 [Package C1 (PC1) State]. BOZO: Need to find out which values are being verified and only expose those.  See D18F4x1A8[SingleHaltCpuDid].
    UINT32                                             AltVidCpuDid:5 ; ///<Specifies the divisor used when entering PC4. See D18F4x1A8[SingleHaltCpuDid] for encodings and COF formula. See 2.5.4.2.3.4 [Package C4 (PC4) State].
    UINT32                                                CpuProbEn:1 ; ///<Specifies the core frequency used to service probes when ramping from CC1 or PC1. See 2.5.4.2.5 [C-states and Probe Requests].
    UINT32                                          ProbePServiceEn:1 ; ///<Specifies the P-state the core enters when ramping up from PC4 to service probes. See 2.5.4.2.5 [C-states and Probe Requests].
    UINT32                                                 PService:3 ; ///<Specifies the PService state. See 2.5.4.2.7 [C-state initiated P-state Changes]. This field is an index into MSRC001_00[6B:64]. If this field is programmed to 0, the PService state corresponds to the P-state specified by MSRC001_0064. If this field is programmed to 1, the PService state corresponds to the P-state specified by MSRC001_0065, and so on. PService must be programmed to lowest-performance P-state displayed to the operating system or to any lower-performance P-state. CNB always changes voltage first and frequency second when transitioning from PService back to the last P-state requested by software.
    UINT32                                              PServiceTmr:3 ; ///<Specifies the expiration time of the PService timer. See 2.5.4.2.7 [C-state initiated P-state Changes].
    UINT32                                            PServiceTmrEn:1 ; ///< See 2.5.4.2.7 [C-state initiated P-state Changes].
    UINT32                                                 DramSrEn:1 ; ///< This bit should not be set until all cores have been enabled. See D18F0x68[Cpu1En] and 2.5.7.1 [DRAM Self-Refresh].
    UINT32                                            MemTriStateEn:1 ; ///<Specifies whether MEMCLK is tri-stated while DRAM is in self-refresh. See 2.5.7.1 [DRAM Self-Refresh] for details.
    UINT32                                               DramSrHyst:3 ; ///<Specifies the hysteresis time before DRAM is placed into self-refresh. See 2.5.7.1 [DRAM Self-Refresh].
    UINT32                                         DramSrHystEnable:1 ; ///<Specifies whether the DRAM self-refresh hysteresis timer is enabled. See 2.5.7.1 [DRAM Self-Refresh].
    UINT32                                         AltVidDMATrackEn:2 ; ///<Specifies the type of DMA activity to track when determining whether to allow access to PC6. See D18F4x120[CstDMATrackHyst] and 2.5.4.2.4.1 [DMA Tracking] for more details.Specifies the type of DMA activity to track when determining whether to allow access to PC4. See: D18F4x120[DeepCstDMATrackEn]. See D18F4x120[CstDMATrackHyst] and 2.5.4.2.4.1 [DMA Tracking].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x1A8_STRUCT;

// **** D18F4x1AC Register Definition ****
// Address
#define D18F4x1AC_ADDRESS                                       0x1ac

// Type
#define D18F4x1AC_TYPE                                          TYPE_D18F4
// Field Data
#define D18F4x1AC_Reserved_4_0_OFFSET                           0
#define D18F4x1AC_Reserved_4_0_WIDTH                            5
#define D18F4x1AC_Reserved_4_0_MASK                             0x1f
#define D18F4x1AC_C6Did_OFFSET                                  5
#define D18F4x1AC_C6Did_WIDTH                                   5
#define D18F4x1AC_C6Did_MASK                                    0x3e0
#define D18F4x1AC_Reserved_15_10_OFFSET                         10
#define D18F4x1AC_Reserved_15_10_WIDTH                          6
#define D18F4x1AC_Reserved_15_10_MASK                           0xfc00
#define D18F4x1AC_PstateIdCoreOffExit_OFFSET                    16
#define D18F4x1AC_PstateIdCoreOffExit_WIDTH                     3
#define D18F4x1AC_PstateIdCoreOffExit_MASK                      0x70000
#define D18F4x1AC_Reserved_25_19_OFFSET                         19
#define D18F4x1AC_Reserved_25_19_WIDTH                          7
#define D18F4x1AC_Reserved_25_19_MASK                           0x3f80000
#define D18F4x1AC_PkgC6Cap_OFFSET                               26
#define D18F4x1AC_PkgC6Cap_WIDTH                                1
#define D18F4x1AC_PkgC6Cap_MASK                                 0x4000000
#define D18F4x1AC_CoreC6Cap_OFFSET                              27
#define D18F4x1AC_CoreC6Cap_WIDTH                               1
#define D18F4x1AC_CoreC6Cap_MASK                                0x8000000
#define D18F4x1AC_PkgC6Dis_OFFSET                               28
#define D18F4x1AC_PkgC6Dis_WIDTH                                1
#define D18F4x1AC_PkgC6Dis_MASK                                 0x10000000
#define D18F4x1AC_CoreC6Dis_OFFSET                              29
#define D18F4x1AC_CoreC6Dis_WIDTH                               1
#define D18F4x1AC_CoreC6Dis_MASK                                0x20000000
#define D18F4x1AC_CstPminEn_OFFSET                              30
#define D18F4x1AC_CstPminEn_WIDTH                               1
#define D18F4x1AC_CstPminEn_MASK                                0x40000000
#define D18F4x1AC_Reserved_31_31_OFFSET                         31
#define D18F4x1AC_Reserved_31_31_WIDTH                          1
#define D18F4x1AC_Reserved_31_31_MASK                           0x80000000

/// D18F4x1AC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                                    C6Did:5 ; ///<Specifies the divisor applied to the core when ramping clocks down for CC6. See 2.5.4.2.3 [C-state Actions] for details.  See D18F4x1A8[SingleHaltDid].
    UINT32                                           Reserved_15_10:6 ; ///<
    UINT32                                      PstateIdCoreOffExit:3 ; ///<When exiting the package C6 state, the core transitions to the P-state specified by this register. See 2.5.4.2.7.4 [Exiting PC6]. If PC6 is enabled (see 2.5.4.2.9 [BIOS Requirements for C-state Initialization]), PstateIdCoreOffExit must be programmed to the lowest-performance P-state displayed to the operating system or to any lower-performance P-state. This P-state must have a core clock frequency of at least 400 MHz (UBTS #187361). CNB always changes voltage first and frequency second when transitioning from PService back to the last P-state requested by software. Programming this field to 0 causes the core to transition to the last P-state requested by software when exiting package C6.
    UINT32                                           Reserved_25_19:7 ; ///<
    UINT32                                                 PkgC6Cap:1 ; ///<Along with D18F4x1AC[PkgC6Dis], this field specifies whether the processor is capable of entering the PC6 state. If either D18F4x1AC[PkgC6Dis]==1 or D18F4x1AC[PkgC6Cap]==0, the processor cannot enter the PC6 state. If both D18F4x1AC[PkgC6Dis]==0 and D18F4x1AC[PkgC6Cap]==1, the processor can enter the PC6 state. See 2.5.4.2.3 [C-state Actions].
    UINT32                                                CoreC6Cap:1 ; ///<Along with D18F4x1AC[CoreC6Dis], this field specifies whether the processor is capable of removing power from a core when in the CC6 state. If either D18F4x1AC[CoreC6Dis]==1 or D18F4x1AC[CoreC6Cap]==0, the processor cannot remove power from cores. If both D18F4x1AC[CoreC6Dis]==0 and D18F4x1AC[CoreC6Cap]==1, the processor can remove power from cores. See 2.5.4.2.3 [C-state Actions].
    UINT32                                                 PkgC6Dis:1 ; ///<See D18F4x1AC[PkgC6Cap].
    UINT32                                                CoreC6Dis:1 ; ///<See D18F4x1AC[CoreC6Cap].
    UINT32                                                CstPminEn:1 ; ///<Specifies whether auto-Pmin is enabled. See 2.5.4.2.7 [C-state initiated P-state Changes]. Programming this bit to 1 while C4Enable in any C-state action field is programmed to 1 results in undefined behavior. See D18F4x118 and D18F4x11C.
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F4x1AC_STRUCT;

// **** D18F6x00 Register Definition ****
// Address
#define D18F6x00_ADDRESS                                        0x0

// Type
#define D18F6x00_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x00_VendorID_OFFSET                                0
#define D18F6x00_VendorID_WIDTH                                 16
#define D18F6x00_VendorID_MASK                                  0xffff
#define D18F6x00_DeviceID_OFFSET                                16
#define D18F6x00_DeviceID_WIDTH                                 16
#define D18F6x00_DeviceID_MASK                                  0xffff0000

/// D18F6x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VendorID:16; ///<
    UINT32                                                 DeviceID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x00_STRUCT;

// **** D18F6x04 Register Definition ****
// Address
#define D18F6x04_ADDRESS                                        0x4

// Type
#define D18F6x04_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x04_Command_OFFSET                                 0
#define D18F6x04_Command_WIDTH                                  16
#define D18F6x04_Command_MASK                                   0xffff
#define D18F6x04_Status_OFFSET                                  16
#define D18F6x04_Status_WIDTH                                   16
#define D18F6x04_Status_MASK                                    0xffff0000

/// D18F6x04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Command:16; ///<
    UINT32                                                   Status:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x04_STRUCT;

// **** D18F6x08 Register Definition ****
// Address
#define D18F6x08_ADDRESS                                        0x8

// Type
#define D18F6x08_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x08_RevID_OFFSET                                   0
#define D18F6x08_RevID_WIDTH                                    8
#define D18F6x08_RevID_MASK                                     0xff
#define D18F6x08_ClassCode_OFFSET                               8
#define D18F6x08_ClassCode_WIDTH                                24
#define D18F6x08_ClassCode_MASK                                 0xffffff00

/// D18F6x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    RevID:8 ; ///<
    UINT32                                                ClassCode:24; ///<Provides the host bridge class code as defined in the PCI specification.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x08_STRUCT;

// **** D18F6x0C Register Definition ****
// Address
#define D18F6x0C_ADDRESS                                        0xc

// Type
#define D18F6x0C_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x0C_HeaderTypeReg_OFFSET                           0
#define D18F6x0C_HeaderTypeReg_WIDTH                            32
#define D18F6x0C_HeaderTypeReg_MASK                             0xffffffff

/// D18F6x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            HeaderTypeReg:32; ///<The header type field indicates that there are multiple functions present in this device.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x0C_STRUCT;

// **** D18F6x34 Register Definition ****
// Address
#define D18F6x34_ADDRESS                                        0x34

// Type
#define D18F6x34_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x34_CapPtr_OFFSET                                  0
#define D18F6x34_CapPtr_WIDTH                                   8
#define D18F6x34_CapPtr_MASK                                    0xff
#define D18F6x34_Reserved_31_8_OFFSET                           8
#define D18F6x34_Reserved_31_8_WIDTH                            24
#define D18F6x34_Reserved_31_8_MASK                             0xffffff00

/// D18F6x34
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   CapPtr:8 ; ///<
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x34_STRUCT;

// **** D18F6x50 Register Definition ****
// Address
#define D18F6x50_ADDRESS                                        0x50

// Type
#define D18F6x50_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x50_CfgAccRegLock_OFFSET                           0
#define D18F6x50_CfgAccRegLock_WIDTH                            1
#define D18F6x50_CfgAccRegLock_MASK                             0x1
#define D18F6x50_CfgAccAddrMode_OFFSET                          1
#define D18F6x50_CfgAccAddrMode_WIDTH                           1
#define D18F6x50_CfgAccAddrMode_MASK                            0x2
#define D18F6x50_CfgAccEn_OFFSET                                2
#define D18F6x50_CfgAccEn_WIDTH                                 1
#define D18F6x50_CfgAccEn_MASK                                  0x4
#define D18F6x50_Reserved_31_3_OFFSET                           3
#define D18F6x50_Reserved_31_3_WIDTH                            29
#define D18F6x50_Reserved_31_3_MASK                             0xfffffff8

/// D18F6x50
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            CfgAccRegLock:1 ; ///<This bit controls write access to CfgAccEn and CfgAccAddrMode.
    UINT32                                           CfgAccAddrMode:1 ; ///<Specifies the register range accessible by the SMU. When CfgAccRegLock is set writes to 0 are ignored.
    UINT32                                                 CfgAccEn:1 ; ///< The supported address space is controlled by CfgAccAddrMode. When CfgAccRegLock is set writes to 1 are ignored.
    UINT32                                            Reserved_31_3:29; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x50_STRUCT;

// **** D18F6x54 Register Definition ****
// Address
#define D18F6x54_ADDRESS                                        0x54

// Type
#define D18F6x54_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x54_FeqLoPrio_OFFSET                               0
#define D18F6x54_FeqLoPrio_WIDTH                                8
#define D18F6x54_FeqLoPrio_MASK                                 0xff
#define D18F6x54_FeqMedPrio_OFFSET                              8
#define D18F6x54_FeqMedPrio_WIDTH                               8
#define D18F6x54_FeqMedPrio_MASK                                0xff00
#define D18F6x54_FeqHiPrio_OFFSET                               16
#define D18F6x54_FeqHiPrio_WIDTH                                8
#define D18F6x54_FeqHiPrio_MASK                                 0xff0000
#define D18F6x54_Reserved_30_24_OFFSET                          24
#define D18F6x54_Reserved_30_24_WIDTH                           7
#define D18F6x54_Reserved_30_24_MASK                            0x7f000000
#define D18F6x54_PpMode_OFFSET                                  31
#define D18F6x54_PpMode_WIDTH                                   1
#define D18F6x54_PpMode_MASK                                    0x80000000

/// D18F6x54
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                FeqLoPrio:8 ; ///<Protection period since the display (GARLIC) opened a rank/bank before a pending FEQ low priority request to the same rank/bank pair can be considered eligible for arbitration.
    UINT32                                               FeqMedPrio:8 ; ///<Protection period since the display (GARLIC) opened a rank/bank before a pending FEQ medium priority request to the same rank/bank pair can be considered eligible for arbitration.
    UINT32                                                FeqHiPrio:8 ; ///<Protection period since the display (GARLIC) opened a rank/bank before a pending FEQ high priority request to the same rank/bank pair can be considered eligible for arbitration.
    UINT32                                           Reserved_30_24:7 ; ///<
    UINT32                                                   PpMode:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x54_STRUCT;

// **** D18F6x58 Register Definition ****
// Address
#define D18F6x58_ADDRESS                                        0x58

// Type
#define D18F6x58_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x58_DispLoPrio_OFFSET                              0
#define D18F6x58_DispLoPrio_WIDTH                               8
#define D18F6x58_DispLoPrio_MASK                                0xff
#define D18F6x58_DispMedPrio_OFFSET                             8
#define D18F6x58_DispMedPrio_WIDTH                              8
#define D18F6x58_DispMedPrio_MASK                               0xff00
#define D18F6x58_DispHiPrio_OFFSET                              16
#define D18F6x58_DispHiPrio_WIDTH                               8
#define D18F6x58_DispHiPrio_MASK                                0xff0000
#define D18F6x58_DispUrgPrio_OFFSET                             24
#define D18F6x58_DispUrgPrio_WIDTH                              8
#define D18F6x58_DispUrgPrio_MASK                               0xff000000

/// D18F6x58
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               DispLoPrio:8 ; ///<Number of NCLK cycles since FEQ opened a rank/bank before a pending display (GARLIC) low priority request to the same rank/bank pair can be considered eligible for arbitration.
    UINT32                                              DispMedPrio:8 ; ///<Number of NCLK cycles since FEQ opened a rank/bank before a pending display (GARLIC) medium priority request to the same rank/bank pair can be considered eligible for arbitration.
    UINT32                                               DispHiPrio:8 ; ///<Number of NCLK cycles since FEQ opened a rank/bank before a pending display (GARLIC) high priority request to the same rank/bank pair can be considered eligible for arbitration.
    UINT32                                              DispUrgPrio:8 ; ///<Number of NCLK cycles since FEQ opened a rank/bank before a pending display (GARLIC) urgent priority request to the same rank/bank pair can be considered eligible for arbitration.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x58_STRUCT;

// **** D18F6x5C Register Definition ****
// Address
#define D18F6x5C_ADDRESS                                        0x5c

// Type
#define D18F6x5C_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x5C_FeqLoPrio_OFFSET                               0
#define D18F6x5C_FeqLoPrio_WIDTH                                8
#define D18F6x5C_FeqLoPrio_MASK                                 0xff
#define D18F6x5C_FeqMedPrio_OFFSET                              8
#define D18F6x5C_FeqMedPrio_WIDTH                               8
#define D18F6x5C_FeqMedPrio_MASK                                0xff00
#define D18F6x5C_FeqHiPrio_OFFSET                               16
#define D18F6x5C_FeqHiPrio_WIDTH                                8
#define D18F6x5C_FeqHiPrio_MASK                                 0xff0000
#define D18F6x5C_Reserved_30_24_OFFSET                          24
#define D18F6x5C_Reserved_30_24_WIDTH                           7
#define D18F6x5C_Reserved_30_24_MASK                            0x7f000000
#define D18F6x5C_PpMode_OFFSET                                  31
#define D18F6x5C_PpMode_WIDTH                                   1
#define D18F6x5C_PpMode_MASK                                    0x80000000

/// D18F6x5C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                FeqLoPrio:8 ; ///<Protection period since display (GARLIC) write was arbitrated before a pending FEQ low priority read request is eligible for arbitration.
    UINT32                                               FeqMedPrio:8 ; ///<Protection period since display (GARLIC) write was arbitrated before a pending FEQ medium priority read request is eligible for arbitration.
    UINT32                                                FeqHiPrio:8 ; ///<Protection period since display (GARLIC) write was arbitrated before a pending FEQ high priority read request is eligible for arbitration.
    UINT32                                           Reserved_30_24:7 ; ///<
    UINT32                                                   PpMode:1 ; ///< When set, either D18F6x78[GlcEosDetDis] must be zero or D18F6x6C[FeqHiPrio, FeqMedPrio and FeqLoPrio] must not equal FFh.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x5C_STRUCT;

// **** D18F6x60 Register Definition ****
// Address
#define D18F6x60_ADDRESS                                        0x60

// Type
#define D18F6x60_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x60_DispLoPri_OFFSET                               0
#define D18F6x60_DispLoPri_WIDTH                                8
#define D18F6x60_DispLoPri_MASK                                 0xff
#define D18F6x60_DispMedPrio_OFFSET                             8
#define D18F6x60_DispMedPrio_WIDTH                              8
#define D18F6x60_DispMedPrio_MASK                               0xff00
#define D18F6x60_DispHiPrio_OFFSET                              16
#define D18F6x60_DispHiPrio_WIDTH                               8
#define D18F6x60_DispHiPrio_MASK                                0xff0000
#define D18F6x60_DispUrgPrio_OFFSET                             24
#define D18F6x60_DispUrgPrio_WIDTH                              8
#define D18F6x60_DispUrgPrio_MASK                               0xff000000

/// D18F6x60
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                DispLoPri:8 ; ///<Number of NCLK cycles since FEQ write was arbitrated before a pending display (GARLIC) low priority read request is eligible for arbitration.
    UINT32                                              DispMedPrio:8 ; ///<Number of NCLK cycles since FEQ write was arbitrated before a pending display (GARLIC) medium priority read request is eligible for arbitration.
    UINT32                                               DispHiPrio:8 ; ///<Number of NCLK cycles since FEQ write was arbitrated before a pending display (GARLIC) high priority read request is eligible for arbitration.
    UINT32                                              DispUrgPrio:8 ; ///<Number of NCLK cycles since FEQ write was arbitrated before a pending display (GARLIC) urgent priority read request is eligible for arbitration.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x60_STRUCT;

// **** D18F6x64 Register Definition ****
// Address
#define D18F6x64_ADDRESS                                        0x64

// Type
#define D18F6x64_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x64_FeqLoPrio_OFFSET                               0
#define D18F6x64_FeqLoPrio_WIDTH                                8
#define D18F6x64_FeqLoPrio_MASK                                 0xff
#define D18F6x64_FeqMedPrio_OFFSET                              8
#define D18F6x64_FeqMedPrio_WIDTH                               8
#define D18F6x64_FeqMedPrio_MASK                                0xff00
#define D18F6x64_FeqHiPrio_OFFSET                               16
#define D18F6x64_FeqHiPrio_WIDTH                                8
#define D18F6x64_FeqHiPrio_MASK                                 0xff0000
#define D18F6x64_Reserved_30_24_OFFSET                          24
#define D18F6x64_Reserved_30_24_WIDTH                           7
#define D18F6x64_Reserved_30_24_MASK                            0x7f000000
#define D18F6x64_PpMode_OFFSET                                  31
#define D18F6x64_PpMode_WIDTH                                   1
#define D18F6x64_PpMode_MASK                                    0x80000000

/// D18F6x64
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                FeqLoPrio:8 ; ///<Protection period since display (GARLIC) read was arbitrated before a pending FEQ low priority write request is eligible for arbitration.
    UINT32                                               FeqMedPrio:8 ; ///<Protection period since display (GARLIC) read was arbitrated before a pending FEQ medium priority write request is eligible for arbitration.
    UINT32                                                FeqHiPrio:8 ; ///<Protection period since display (GARLIC) read was arbitrated before a pending FEQ high priority write request is eligible for arbitration.
    UINT32                                           Reserved_30_24:7 ; ///<
    UINT32                                                   PpMode:1 ; ///< When set, either D18F6x78[GlcEosDetDis must be zero or D18F6x6C[FeqHiPrio, FeqMedPrio and FeqLoPrio] must not equal FFh.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x64_STRUCT;

// **** D18F6x68 Register Definition ****
// Address
#define D18F6x68_ADDRESS                                        0x68

// Type
#define D18F6x68_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x68_DispLoPrio_OFFSET                              0
#define D18F6x68_DispLoPrio_WIDTH                               8
#define D18F6x68_DispLoPrio_MASK                                0xff
#define D18F6x68_DispMedPrio_OFFSET                             8
#define D18F6x68_DispMedPrio_WIDTH                              8
#define D18F6x68_DispMedPrio_MASK                               0xff00
#define D18F6x68_DispHiPrio_OFFSET                              16
#define D18F6x68_DispHiPrio_WIDTH                               8
#define D18F6x68_DispHiPrio_MASK                                0xff0000
#define D18F6x68_DispUrgPrio_OFFSET                             24
#define D18F6x68_DispUrgPrio_WIDTH                              8
#define D18F6x68_DispUrgPrio_MASK                               0xff000000

/// D18F6x68
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               DispLoPrio:8 ; ///<Number of NCLK cycles since FEQ read was arbitrated before a pending display (GARLIC) low priority write request is eligible for arbitration.
    UINT32                                              DispMedPrio:8 ; ///<Number of NCLK cycles since FEQ read was arbitrated before a pending display (GARLIC) medium priority write request is eligible for arbitration.
    UINT32                                               DispHiPrio:8 ; ///<Number of NCLK cycles since FEQ read was arbitrated before a pending display (GARLIC) high priority write request is eligible for arbitration.
    UINT32                                              DispUrgPrio:8 ; ///<Number of NCLK cycles since FEQ read was arbitrated before a pending display (GARLIC) urgent priority write request is eligible for arbitration.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x68_STRUCT;

// **** D18F6x6C Register Definition ****
// Address
#define D18F6x6C_ADDRESS                                        0x6c

// Type
#define D18F6x6C_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x6C_FeqLoPrio_OFFSET                               0
#define D18F6x6C_FeqLoPrio_WIDTH                                8
#define D18F6x6C_FeqLoPrio_MASK                                 0xff
#define D18F6x6C_FeqMedPrio_OFFSET                              8
#define D18F6x6C_FeqMedPrio_WIDTH                               8
#define D18F6x6C_FeqMedPrio_MASK                                0xff00
#define D18F6x6C_FeqHiPrio_OFFSET                               16
#define D18F6x6C_FeqHiPrio_WIDTH                                8
#define D18F6x6C_FeqHiPrio_MASK                                 0xff0000
#define D18F6x6C_Reserved_31_24_OFFSET                          24
#define D18F6x6C_Reserved_31_24_WIDTH                           8
#define D18F6x6C_Reserved_31_24_MASK                            0xff000000

/// D18F6x6C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                FeqLoPrio:8 ; ///<This field defines the number of NCLK cycles a low priority FEQ request must wait before its priority gets elevated to be arbitrated immediately.
    UINT32                                               FeqMedPrio:8 ; ///<This field defines the number of NCLK cycles a medium priority FEQ request must wait before its priority gets elevated to be arbitrated immediately.
    UINT32                                                FeqHiPrio:8 ; ///<This field defines the number of NCLK cycles a high priority FEQ request must wait before its priority gets elevated to be arbitrated immediately.
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x6C_STRUCT;

// **** D18F6x70 Register Definition ****
// Address
#define D18F6x70_ADDRESS                                        0x70

// Type
#define D18F6x70_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x70_DispLoPrio_OFFSET                              0
#define D18F6x70_DispLoPrio_WIDTH                               8
#define D18F6x70_DispLoPrio_MASK                                0xff
#define D18F6x70_DispMedPrio_OFFSET                             8
#define D18F6x70_DispMedPrio_WIDTH                              8
#define D18F6x70_DispMedPrio_MASK                               0xff00
#define D18F6x70_DispHiPrio_OFFSET                              16
#define D18F6x70_DispHiPrio_WIDTH                               8
#define D18F6x70_DispHiPrio_MASK                                0xff0000
#define D18F6x70_DispUrPrio_OFFSET                              24
#define D18F6x70_DispUrPrio_WIDTH                               8
#define D18F6x70_DispUrPrio_MASK                                0xff000000

/// D18F6x70
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               DispLoPrio:8 ; ///<This field defines the number of NCLK cycles a low priority display (GARLIC) request must wait before its priority gets elevated to be arbitrated immediately.
    UINT32                                              DispMedPrio:8 ; ///<This field defines the number of NCLK cycles a medium priority display (GARLIC) request must wait before its priority gets elevated to be arbitrated immediately.
    UINT32                                               DispHiPrio:8 ; ///<This field defines the number of NCLK cycles a high priority display (GARLIC) request must wait before its priority gets elevated to be arbitrated immediately.
    UINT32                                               DispUrPrio:8 ; ///<This field defines the number of NCLK cycles an urgent priority display (GARLIC) request must wait before its priority gets elevated to be arbitrated immediately.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x70_STRUCT;

// **** D18F6x74 Register Definition ****
// Address
#define D18F6x74_ADDRESS                                        0x74

// Type
#define D18F6x74_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x74_IdleLimit_OFFSET                               0
#define D18F6x74_IdleLimit_WIDTH                                5
#define D18F6x74_IdleLimit_MASK                                 0x1f
#define D18F6x74_Reserved_31_5_OFFSET                           5
#define D18F6x74_Reserved_31_5_WIDTH                            27
#define D18F6x74_Reserved_31_5_MASK                             0xffffffe0

/// D18F6x74
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                IdleLimit:5 ; ///<If D18F2x90[DynPageCloseEn]=0 then this field multiplied by 4 defines the number of NB clock cycles a page will be kept open after last page hit.
    UINT32                                            Reserved_31_5:27; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x74_STRUCT;

// **** D18F6x78 Register Definition ****
// Address
#define D18F6x78_ADDRESS                                        0x78

// Type
#define D18F6x78_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x78_DispDbePrioEn_OFFSET                           0
#define D18F6x78_DispDbePrioEn_WIDTH                            2
#define D18F6x78_DispDbePrioEn_MASK                             0x3
#define D18F6x78_FeqDbePrioEn_OFFSET                            2
#define D18F6x78_FeqDbePrioEn_WIDTH                             1
#define D18F6x78_FeqDbePrioEn_MASK                              0x4
#define D18F6x78_DispArbCtrl_OFFSET                             3
#define D18F6x78_DispArbCtrl_WIDTH                              1
#define D18F6x78_DispArbCtrl_MASK                               0x8
#define D18F6x78_GlcEosDet_OFFSET                               4
#define D18F6x78_GlcEosDet_WIDTH                                2
#define D18F6x78_GlcEosDet_MASK                                 0x30
#define D18F6x78_GlcEosDetDis_OFFSET                            6
#define D18F6x78_GlcEosDetDis_WIDTH                             1
#define D18F6x78_GlcEosDetDis_MASK                              0x40
#define D18F6x78_Reserved_7_7_OFFSET                            7
#define D18F6x78_Reserved_7_7_WIDTH                             1
#define D18F6x78_Reserved_7_7_MASK                              0x80
#define D18F6x78_DbeCmdThrottle_OFFSET                          8
#define D18F6x78_DbeCmdThrottle_WIDTH                           8
#define D18F6x78_DbeCmdThrottle_MASK                            0xff00
#define D18F6x78_Reserved_31_16_OFFSET                          16
#define D18F6x78_Reserved_31_16_WIDTH                           16
#define D18F6x78_Reserved_31_16_MASK                            0xffff0000

/// D18F6x78
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DispDbePrioEn:2 ; ///<Specifies which type of display (GARLIC) requests assert the priority condition in the DRAM controller back-end.
    UINT32                                             FeqDbePrioEn:1 ; ///<
    UINT32                                              DispArbCtrl:1 ; ///<
    UINT32                                                GlcEosDet:2 ; ///<Specifies the number of NCLK cycles that the display (CNB GARLIC) queue must be empty before a display (GARLIC) end of stream event is detected. Upon a display (GARLIC) end of stream event the read/write protection counter is reset if it was started by a display (GARLIC) request.
    UINT32                                             GlcEosDetDis:1 ; ///<
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                           DbeCmdThrottle:8 ; ///<This field defines a limit for 64-byte read or write requests pending in the DRAM controller back-end. If the number of pending requests reaches or exceeds this limit, the DRAM controller front-end applies command throttling.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x78_STRUCT;

// **** D18F6x90 Register Definition ****
// Address
#define D18F6x90_ADDRESS                                        0x90

// Type
#define D18F6x90_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x90_NbPs1NclkDiv_OFFSET                            0
#define D18F6x90_NbPs1NclkDiv_WIDTH                             7
#define D18F6x90_NbPs1NclkDiv_MASK                              0x7f
#define D18F6x90_Reserved_7_7_OFFSET                            7
#define D18F6x90_Reserved_7_7_WIDTH                             1
#define D18F6x90_Reserved_7_7_MASK                              0x80
#define D18F6x90_NbPs1Vid_OFFSET                                8
#define D18F6x90_NbPs1Vid_WIDTH                                 7
#define D18F6x90_NbPs1Vid_MASK                                  0x7f00
#define D18F6x90_Reserved_15_15_OFFSET                          15
#define D18F6x90_Reserved_15_15_WIDTH                           1
#define D18F6x90_Reserved_15_15_MASK                            0x8000
#define D18F6x90_NbPs1GnbSlowIgn_OFFSET                         16
#define D18F6x90_NbPs1GnbSlowIgn_WIDTH                          1
#define D18F6x90_NbPs1GnbSlowIgn_MASK                           0x10000
#define D18F6x90_Reserved_19_17_OFFSET                          17
#define D18F6x90_Reserved_19_17_WIDTH                           3
#define D18F6x90_Reserved_19_17_MASK                            0xe0000
#define D18F6x90_NbPsLock_OFFSET                                20
#define D18F6x90_NbPsLock_WIDTH                                 1
#define D18F6x90_NbPsLock_MASK                                  0x100000
#define D18F6x90_Reserved_27_21_OFFSET                          21
#define D18F6x90_Reserved_27_21_WIDTH                           7
#define D18F6x90_Reserved_27_21_MASK                            0xfe00000
#define D18F6x90_NbPsForceReq_OFFSET                            28
#define D18F6x90_NbPsForceReq_WIDTH                             1
#define D18F6x90_NbPsForceReq_MASK                              0x10000000
#define D18F6x90_NbPsForceSel_OFFSET                            29
#define D18F6x90_NbPsForceSel_WIDTH                             1
#define D18F6x90_NbPsForceSel_MASK                              0x20000000
#define D18F6x90_NbPsCtrlDis_OFFSET                             30
#define D18F6x90_NbPsCtrlDis_WIDTH                              1
#define D18F6x90_NbPsCtrlDis_MASK                               0x40000000
#define D18F6x90_NbPsCap_OFFSET                                 31
#define D18F6x90_NbPsCap_WIDTH                                  1
#define D18F6x90_NbPsCap_MASK                                   0x80000000

/// D18F6x90
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             NbPs1NclkDiv:7 ; ///<Specifies the NCLK divisor when in NBP0.  The clock divisor can be calculated using the following table: 50% clock duty cycles are obtained at integer and half-integer divisors only. For example, /2, /2.5, /3.0, and /3.5 give 50% clock duty cycles whereas /3.25 does not. Divisor examples: Example: If D18F3xDC[NbPs0NclkDiv] = 0Ch = 12d, then the NCLK divisor = 12 * 0.25 = /3.0 The NCLK COF can be calculated using the following equation: COF = (main PLL frequency specified by D18F3xD4[MainPllOpFreqId]) / clock divisor. Example: If D18F3xD4[MainPllOpFreqId] = 10h = 3.2 GHz and D18F3xDC[NbPs0NclkDiv] = 3Eh = /15.5, then the NCLK COF = 206.45 MHz. Writes that change the value of this field cause NCLK to transition to the new divisor if the processor is currently in NBP0. This occurs regardless of the state of D18F6x90[NbPsCap]. Software may only change the value of this field if either: The sequence described in 2.10.4 [DCT/DRAM Initialization and Resume] has not been run, or DRAM has been placed into self-refresh. See D18F2x90[EnterSelfRef].  See 2.5.5.1 [NB P-states].Specifies the divisor applied to NCLK when in NBP1.  Writes that change the value of this field cause NCLK to transition to the new divisor if the processor is currently in NBP1. Software may only change the value of this field if either: The sequence described in 2.10.4 [DCT/DRAM Initialization and Resume] has not been run, or DRAM has been placed into self-refresh. See D18F2x90[EnterSelfRef].  See: D18F3xDC[NbPs0NclkDiv].
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                 NbPs1Vid:7 ; ///<Specifies the VID code output by the processor for VDDNB when in NBP1. Writes to this field take effect on the next transition from NBP0 to NBP1. See the AMD Voltage Regulator Specification, #40182 for encodings.  Writing this field while D18F6x90[NbPsCtrlDis] == 0 may result in undefined behavior. Whenever this field is written, software must wait the RampTime specified by D18F3xD8[VSRampSlamTime] before clearing D18F6x90[NbPsCtrlDis] to 0, changing the value of D18F6x90[NbPs1NclkDiv], or changing the value of D18F6x90[NbPsForceSel].
    UINT32                                           Reserved_15_15:1 ; ///<
    UINT32                                          NbPs1GnbSlowIgn:1 ; ///< See GMMx6E0[SclkDpmGnbSlow].
    UINT32                                           Reserved_19_17:3 ; ///<
    UINT32                                                 NbPsLock:1 ; ///<This field controls the writability of several other fields relating to NB P-states. See the following fields for details: D18F6x90[NbPsCtrlDis]. D18F6x90[NbPs1Vid]. D18F6x90[NbPs1NclkDiv].
    UINT32                                           Reserved_27_21:7 ; ///<
    UINT32                                             NbPsForceReq:1 ; ///<If D18F6x98[NbPsTransInFlight]==0 when this bit is set, a forced NB P-state transition to the state specified by D18F6x90[NbPsForceSel] is initiated. This transition occurs regardless of the state of D18F6x90[NbPsCtrlDis]. During this transition, the handshake with the GNB is skipped. If D18F6x98[NbPsTransInFlight]==1 when this bit is set to 1, the NB P-state transition request is queued until the transition currently in flight finishes.
    UINT32                                             NbPsForceSel:1 ; ///<Specifies the target NB P-state for any forced NB P-state transition. See D18F6x90[NbPsForceReq].
    UINT32                                              NbPsCtrlDis:1 ; ///<Specifies whether hardware is responsible for requesting NB P-state transitions. Whenever this bit is set to 1, hardware automatically makes a transition to NBP0.
    UINT32                                                  NbPsCap:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x90_STRUCT;

// **** D18F6x94 Register Definition ****
// Address
#define D18F6x94_ADDRESS                                        0x94

// Type
#define D18F6x94_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x94_CpuPstateThr_OFFSET                            0
#define D18F6x94_CpuPstateThr_WIDTH                             3
#define D18F6x94_CpuPstateThr_MASK                              0x7
#define D18F6x94_CpuPstateThrEn_OFFSET                          3
#define D18F6x94_CpuPstateThrEn_WIDTH                           1
#define D18F6x94_CpuPstateThrEn_MASK                            0x8
#define D18F6x94_NbPsNoTransOnDma_OFFSET                        4
#define D18F6x94_NbPsNoTransOnDma_WIDTH                         1
#define D18F6x94_NbPsNoTransOnDma_MASK                          0x10
#define D18F6x94_Reserved_19_5_OFFSET                           5
#define D18F6x94_Reserved_19_5_WIDTH                            15
#define D18F6x94_Reserved_19_5_MASK                             0xfffe0
#define D18F6x94_NbPsNonC0Timer_OFFSET                          20
#define D18F6x94_NbPsNonC0Timer_WIDTH                           3
#define D18F6x94_NbPsNonC0Timer_MASK                            0x700000
#define D18F6x94_NbPsC0Timer_OFFSET                             23
#define D18F6x94_NbPsC0Timer_WIDTH                              3
#define D18F6x94_NbPsC0Timer_MASK                               0x3800000
#define D18F6x94_NbPs1ResTmrMin_OFFSET                          26
#define D18F6x94_NbPs1ResTmrMin_WIDTH                           3
#define D18F6x94_NbPs1ResTmrMin_MASK                            0x1c000000
#define D18F6x94_NbPs0ResTmrMin_OFFSET                          29
#define D18F6x94_NbPs0ResTmrMin_WIDTH                           3
#define D18F6x94_NbPs0ResTmrMin_MASK                            0xe0000000

/// D18F6x94
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             CpuPstateThr:3 ; ///<When D18F6x94[CpuPstateThrEn]==1, this field specifies the core P-state number that acts as a threshold for NB P-states.
    UINT32                                           CpuPstateThrEn:1 ; ///<Specifies whether core P-states are used as a threshold for NB P-state transitions.
    UINT32                                         NbPsNoTransOnDma:1 ; ///<
    UINT32                                            Reserved_19_5:15; ///<
    UINT32                                           NbPsNonC0Timer:3 ; ///<Specifies the time all cores must be in a non-C0 C-state before a transition from NBP0 to NBP1 is triggered. See: D18F6x94[NbPsC0Timer].
    UINT32                                              NbPsC0Timer:3 ; ///<Specifies the time any core must be in C0 before a transition from NBP1 to NBP0 is triggered.
    UINT32                                           NbPs1ResTmrMin:3 ; ///<Upon transitioning from NBP0 to NBP1, transitions back to NBP0 are blocked until the amount of time specified by this register has passed. See: D18F6x94[NbPs0ResTmrMin].
    UINT32                                           NbPs0ResTmrMin:3 ; ///<Upon transitioning from NBP1 to NBP0, transitions back to NBP1 are blocked until the amount of time specified by this register has passed.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x94_STRUCT;

// **** D18F6x98 Register Definition ****
// Address
#define D18F6x98_ADDRESS                                        0x98

// Type
#define D18F6x98_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x98_NbPsTransInFlight_OFFSET                       0
#define D18F6x98_NbPsTransInFlight_WIDTH                        1
#define D18F6x98_NbPsTransInFlight_MASK                         0x1
#define D18F6x98_NbPs1ActSts_OFFSET                             1
#define D18F6x98_NbPs1ActSts_WIDTH                              1
#define D18F6x98_NbPs1ActSts_MASK                               0x2
#define D18F6x98_NbPs1Act_OFFSET                                2
#define D18F6x98_NbPs1Act_WIDTH                                 1
#define D18F6x98_NbPs1Act_MASK                                  0x4
#define D18F6x98_Reserved_29_3_OFFSET                           3
#define D18F6x98_Reserved_29_3_WIDTH                            27
#define D18F6x98_Reserved_29_3_MASK                             0x3ffffff8
#define D18F6x98_NbPsCsrAccSel_OFFSET                           30
#define D18F6x98_NbPsCsrAccSel_WIDTH                            1
#define D18F6x98_NbPsCsrAccSel_MASK                             0x40000000
#define D18F6x98_NbPsDbgEn_OFFSET                               31
#define D18F6x98_NbPsDbgEn_WIDTH                                1
#define D18F6x98_NbPsDbgEn_MASK                                 0x80000000

/// D18F6x98
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        NbPsTransInFlight:1 ; ///<Specifies whether an NB P-state transition is in process.
    UINT32                                              NbPs1ActSts:1 ; ///<Specifies whether the NB has ever transitioned to NBP1 since the last time this field was cleared by software.
    UINT32                                                 NbPs1Act:1 ; ///<Specifies the current NB P-state.
    UINT32                                            Reserved_29_3:27; ///<
    UINT32                                            NbPsCsrAccSel:1 ; ///<If D18F6x98[NbPsDbgEn]==1, this field specifies the context of any registers that have context swaps based on NB P-state. See 2.10.4.4.7 [NB P-states for DCT/DRAM Initialization and Training].
    UINT32                                                NbPsDbgEn:1 ; ///<For any registers that change context based on NB P-states, this field specifies what causes a context swap. See 2.10.4.4.7 [NB P-states for DCT/DRAM Initialization and Training].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x98_STRUCT;

// **** D18F6x9C Register Definition ****
// Address
#define D18F6x9C_ADDRESS                                        0x9c

// Type
#define D18F6x9C_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6x9C_NclkRedDiv_OFFSET                              0
#define D18F6x9C_NclkRedDiv_WIDTH                               7
#define D18F6x9C_NclkRedDiv_MASK                                0x7f
#define D18F6x9C_NclkRedSelfRefrAlways_OFFSET                   7
#define D18F6x9C_NclkRedSelfRefrAlways_WIDTH                    1
#define D18F6x9C_NclkRedSelfRefrAlways_MASK                     0x80
#define D18F6x9C_NclkRampWithDllRelock_OFFSET                   8
#define D18F6x9C_NclkRampWithDllRelock_WIDTH                    1
#define D18F6x9C_NclkRampWithDllRelock_MASK                     0x100
#define D18F6x9C_Reserved_31_9_OFFSET                           9
#define D18F6x9C_Reserved_31_9_WIDTH                            23
#define D18F6x9C_Reserved_31_9_MASK                             0xfffffe00

/// D18F6x9C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               NclkRedDiv:7 ; ///<Specifies the divisor used for NCLK when NCLK is ramped down while DRAM is in self-refresh. If an unsupported DID is programmed, hardware will try and go to that DID, but unsupported DIDs do not need to be verified or validated. The following divisors may be created:  NclkRedDiv must be programmed to a divisor greater than (lower frequency than) D18F3xDC[NbPs0NclkDiv] and D18F6x90[NbPs1NclkDiv] or undefined behavior may result. CNB makes the transition to NclkRedDiv without comparing NclkRedDiv to the current NB P-state'��s divisor. If NclkRedDiv is less than the current NB P-state'��s divisor, the result is a frequency increase with no increase in voltage, which could result in a failure. A divisor of /128 may only be used when D18F3xD4[MainPllOpFreqId] specifies a main PLL frequency of 3.2 GHz or greater or undefined behavior may result. All clocks generated by the main PLL must be equal to or greater than 25 MHz.
    UINT32                                    NclkRedSelfRefrAlways:1 ; ///<Specifies which C-state the package must be in to allow NCLK to ramp down when DRAM enters self-refresh. See 2.5.5.2 [NB Clock Ramping] for details.
    UINT32                                    NclkRampWithDllRelock:1 ; ///<Specifies whether NCLK ramps up in parallel or serially with the DDR PHY DLL being relocked when exiting NB clock ramping. This bit can only be programmed to 1 if all of the following are true, or undefined behavior results: D18F2x90[DisDllShutdownSR]==0. (the main PLL frequency specified by D18F3xD4[MainPllOpFreqId]) / (the divisor specified by D18F6x9C[NclkRedDiv]) >= 100 MHz.
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x9C_STRUCT;

// **** D18F6xB0 Register Definition ****
// Address
#define D18F6xB0_ADDRESS                                        0xb0

// Type
#define D18F6xB0_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6xB0_PkgCstateResidency_OFFSET                      0
#define D18F6xB0_PkgCstateResidency_WIDTH                       32
#define D18F6xB0_PkgCstateResidency_MASK                        0xffffffff

/// D18F6xB0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       PkgCstateResidency:32; ///<Specifies the time the package is in the corresponding state. Hardware increments this field once for every 80 ns spent in the package C-state while the specified enable bit is set to 1. Any write by software clears this register to 0. See 2.5.4.2.3 [C-state Actions].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6xB0_STRUCT;

// **** D18F6xB4 Register Definition ****
// Address
#define D18F6xB4_ADDRESS                                        0xb4

// Type
#define D18F6xB4_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6xB4_PkgCstateResidency_OFFSET                      0
#define D18F6xB4_PkgCstateResidency_WIDTH                       32
#define D18F6xB4_PkgCstateResidency_MASK                        0xffffffff

/// D18F6xB4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       PkgCstateResidency:32; ///<Specifies the time the package is in the corresponding state. Hardware increments this field once for every 80 ns spent in the package C-state while the specified enable bit is set to 1. Any write by software clears this register to 0. See 2.5.4.2.3 [C-state Actions].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6xB4_STRUCT;

// **** D18F6xB8 Register Definition ****
// Address
#define D18F6xB8_ADDRESS                                        0xb8

// Type
#define D18F6xB8_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6xB8_PkgCstateResidency_OFFSET                      0
#define D18F6xB8_PkgCstateResidency_WIDTH                       32
#define D18F6xB8_PkgCstateResidency_MASK                        0xffffffff

/// D18F6xB8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       PkgCstateResidency:32; ///<Specifies the time the package is in the corresponding state. Hardware increments this field once for every 80 ns spent in the package C-state while the specified enable bit is set to 1. Any write by software clears this register to 0. See 2.5.4.2.3 [C-state Actions].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6xB8_STRUCT;

// **** D18F6xE0 Register Definition ****
// Address
#define D18F6xE0_ADDRESS                                        0xe0

// Type
#define D18F6xE0_TYPE                                           TYPE_D18F6
// Field Data
#define D18F6xE0_PkgNonC0ResEn_OFFSET                           0
#define D18F6xE0_PkgNonC0ResEn_WIDTH                            1
#define D18F6xE0_PkgNonC0ResEn_MASK                             0x1
#define D18F6xE0_PkgC1ResEn_OFFSET                              1
#define D18F6xE0_PkgC1ResEn_WIDTH                               1
#define D18F6xE0_PkgC1ResEn_MASK                                0x2
#define D18F6xE0_PkgC6ResEn_OFFSET                              2
#define D18F6xE0_PkgC6ResEn_WIDTH                               1
#define D18F6xE0_PkgC6ResEn_MASK                                0x4
#define D18F6xE0_CoreNonC0ResEn_OFFSET                          3
#define D18F6xE0_CoreNonC0ResEn_WIDTH                           1
#define D18F6xE0_CoreNonC0ResEn_MASK                            0x8
#define D18F6xE0_CoreC6ResEn_OFFSET                             4
#define D18F6xE0_CoreC6ResEn_WIDTH                              1
#define D18F6xE0_CoreC6ResEn_MASK                               0x10
#define D18F6xE0_Reserved_7_5_OFFSET                            5
#define D18F6xE0_Reserved_7_5_WIDTH                             3
#define D18F6xE0_Reserved_7_5_MASK                              0xe0
#define D18F6xE0_CorePmaxResEn_OFFSET                           8
#define D18F6xE0_CorePmaxResEn_WIDTH                            1
#define D18F6xE0_CorePmaxResEn_MASK                             0x100
#define D18F6xE0_CorePminResEn_OFFSET                           9
#define D18F6xE0_CorePminResEn_WIDTH                            1
#define D18F6xE0_CorePminResEn_MASK                             0x200
#define D18F6xE0_Reserved_31_10_OFFSET                          10
#define D18F6xE0_Reserved_31_10_WIDTH                           22
#define D18F6xE0_Reserved_31_10_MASK                            0xfffffc00

/// D18F6xE0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            PkgNonC0ResEn:1 ; ///<See D18F6x[B8:B0].
    UINT32                                               PkgC1ResEn:1 ; ///<See D18F6x[B8:B0].
    UINT32                                               PkgC6ResEn:1 ; ///<See D18F6x[B8:B0].
    UINT32                                           CoreNonC0ResEn:1 ; ///<See D18F6x1[94:90].
    UINT32                                              CoreC6ResEn:1 ; ///<See D18F6x1[A4:A0].
    UINT32                                             Reserved_7_5:3 ; ///<
    UINT32                                            CorePmaxResEn:1 ; ///<See D18F6x[D8,D0].
    UINT32                                            CorePminResEn:1 ; ///<See D18F6x[DC,D4].
    UINT32                                           Reserved_31_10:22; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6xE0_STRUCT;

// **** D18F6x110 Register Definition ****
// Address
#define D18F6x110_ADDRESS                                       0x110

// Type
#define D18F6x110_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x110_NclkFifoOff_OFFSET                            0
#define D18F6x110_NclkFifoOff_WIDTH                             3
#define D18F6x110_NclkFifoOff_MASK                              0x7
#define D18F6x110_Reserved_3_3_OFFSET                           3
#define D18F6x110_Reserved_3_3_WIDTH                            1
#define D18F6x110_Reserved_3_3_MASK                             0x8
#define D18F6x110_LclkFifoOff_OFFSET                            4
#define D18F6x110_LclkFifoOff_WIDTH                             3
#define D18F6x110_LclkFifoOff_MASK                              0x70
#define D18F6x110_Reserved_7_7_OFFSET                           7
#define D18F6x110_Reserved_7_7_WIDTH                            1
#define D18F6x110_Reserved_7_7_MASK                             0x80
#define D18F6x110_PllMult_OFFSET                                8
#define D18F6x110_PllMult_WIDTH                                 6
#define D18F6x110_PllMult_MASK                                  0x3f00
#define D18F6x110_Reserved_14_14_OFFSET                         14
#define D18F6x110_Reserved_14_14_WIDTH                          1
#define D18F6x110_Reserved_14_14_MASK                           0x4000
#define D18F6x110_Enable_OFFSET                                 15
#define D18F6x110_Enable_WIDTH                                  1
#define D18F6x110_Enable_MASK                                   0x8000
#define D18F6x110_LclkFreq_OFFSET                               16
#define D18F6x110_LclkFreq_WIDTH                                7
#define D18F6x110_LclkFreq_MASK                                 0x7f0000
#define D18F6x110_LclkFreqType_OFFSET                           23
#define D18F6x110_LclkFreqType_WIDTH                            1
#define D18F6x110_LclkFreqType_MASK                             0x800000
#define D18F6x110_NclkFreq_OFFSET                               24
#define D18F6x110_NclkFreq_WIDTH                                7
#define D18F6x110_NclkFreq_MASK                                 0x7f000000
#define D18F6x110_NclkFreqType_OFFSET                           31
#define D18F6x110_NclkFreqType_WIDTH                            1
#define D18F6x110_NclkFreqType_MASK                             0x80000000

/// D18F6x110
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x110_STRUCT;

// **** D18F6x114 Register Definition ****
// Address
#define D18F6x114_ADDRESS                                       0x114

// Type
#define D18F6x114_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x114_NclkFifoOff_OFFSET                            0
#define D18F6x114_NclkFifoOff_WIDTH                             3
#define D18F6x114_NclkFifoOff_MASK                              0x7
#define D18F6x114_Reserved_3_3_OFFSET                           3
#define D18F6x114_Reserved_3_3_WIDTH                            1
#define D18F6x114_Reserved_3_3_MASK                             0x8
#define D18F6x114_LclkFifoOff_OFFSET                            4
#define D18F6x114_LclkFifoOff_WIDTH                             3
#define D18F6x114_LclkFifoOff_MASK                              0x70
#define D18F6x114_Reserved_7_7_OFFSET                           7
#define D18F6x114_Reserved_7_7_WIDTH                            1
#define D18F6x114_Reserved_7_7_MASK                             0x80
#define D18F6x114_PllMult_OFFSET                                8
#define D18F6x114_PllMult_WIDTH                                 6
#define D18F6x114_PllMult_MASK                                  0x3f00
#define D18F6x114_Reserved_14_14_OFFSET                         14
#define D18F6x114_Reserved_14_14_WIDTH                          1
#define D18F6x114_Reserved_14_14_MASK                           0x4000
#define D18F6x114_Enable_OFFSET                                 15
#define D18F6x114_Enable_WIDTH                                  1
#define D18F6x114_Enable_MASK                                   0x8000
#define D18F6x114_LclkFreq_OFFSET                               16
#define D18F6x114_LclkFreq_WIDTH                                7
#define D18F6x114_LclkFreq_MASK                                 0x7f0000
#define D18F6x114_LclkFreqType_OFFSET                           23
#define D18F6x114_LclkFreqType_WIDTH                            1
#define D18F6x114_LclkFreqType_MASK                             0x800000
#define D18F6x114_NclkFreq_OFFSET                               24
#define D18F6x114_NclkFreq_WIDTH                                7
#define D18F6x114_NclkFreq_MASK                                 0x7f000000
#define D18F6x114_NclkFreqType_OFFSET                           31
#define D18F6x114_NclkFreqType_WIDTH                            1
#define D18F6x114_NclkFreqType_MASK                             0x80000000

/// D18F6x114
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x114_STRUCT;

// **** D18F6x118 Register Definition ****
// Address
#define D18F6x118_ADDRESS                                       0x118

// Type
#define D18F6x118_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x118_NclkFifoOff_OFFSET                            0
#define D18F6x118_NclkFifoOff_WIDTH                             3
#define D18F6x118_NclkFifoOff_MASK                              0x7
#define D18F6x118_Reserved_3_3_OFFSET                           3
#define D18F6x118_Reserved_3_3_WIDTH                            1
#define D18F6x118_Reserved_3_3_MASK                             0x8
#define D18F6x118_LclkFifoOff_OFFSET                            4
#define D18F6x118_LclkFifoOff_WIDTH                             3
#define D18F6x118_LclkFifoOff_MASK                              0x70
#define D18F6x118_Reserved_7_7_OFFSET                           7
#define D18F6x118_Reserved_7_7_WIDTH                            1
#define D18F6x118_Reserved_7_7_MASK                             0x80
#define D18F6x118_PllMult_OFFSET                                8
#define D18F6x118_PllMult_WIDTH                                 6
#define D18F6x118_PllMult_MASK                                  0x3f00
#define D18F6x118_Reserved_14_14_OFFSET                         14
#define D18F6x118_Reserved_14_14_WIDTH                          1
#define D18F6x118_Reserved_14_14_MASK                           0x4000
#define D18F6x118_Enable_OFFSET                                 15
#define D18F6x118_Enable_WIDTH                                  1
#define D18F6x118_Enable_MASK                                   0x8000
#define D18F6x118_LclkFreq_OFFSET                               16
#define D18F6x118_LclkFreq_WIDTH                                7
#define D18F6x118_LclkFreq_MASK                                 0x7f0000
#define D18F6x118_LclkFreqType_OFFSET                           23
#define D18F6x118_LclkFreqType_WIDTH                            1
#define D18F6x118_LclkFreqType_MASK                             0x800000
#define D18F6x118_NclkFreq_OFFSET                               24
#define D18F6x118_NclkFreq_WIDTH                                7
#define D18F6x118_NclkFreq_MASK                                 0x7f000000
#define D18F6x118_NclkFreqType_OFFSET                           31
#define D18F6x118_NclkFreqType_WIDTH                            1
#define D18F6x118_NclkFreqType_MASK                             0x80000000

/// D18F6x118
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x118_STRUCT;

// **** D18F6x11C Register Definition ****
// Address
#define D18F6x11C_ADDRESS                                       0x11c

// Type
#define D18F6x11C_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x11C_NclkFifoOff_OFFSET                            0
#define D18F6x11C_NclkFifoOff_WIDTH                             3
#define D18F6x11C_NclkFifoOff_MASK                              0x7
#define D18F6x11C_Reserved_3_3_OFFSET                           3
#define D18F6x11C_Reserved_3_3_WIDTH                            1
#define D18F6x11C_Reserved_3_3_MASK                             0x8
#define D18F6x11C_LclkFifoOff_OFFSET                            4
#define D18F6x11C_LclkFifoOff_WIDTH                             3
#define D18F6x11C_LclkFifoOff_MASK                              0x70
#define D18F6x11C_Reserved_7_7_OFFSET                           7
#define D18F6x11C_Reserved_7_7_WIDTH                            1
#define D18F6x11C_Reserved_7_7_MASK                             0x80
#define D18F6x11C_PllMult_OFFSET                                8
#define D18F6x11C_PllMult_WIDTH                                 6
#define D18F6x11C_PllMult_MASK                                  0x3f00
#define D18F6x11C_Reserved_14_14_OFFSET                         14
#define D18F6x11C_Reserved_14_14_WIDTH                          1
#define D18F6x11C_Reserved_14_14_MASK                           0x4000
#define D18F6x11C_Enable_OFFSET                                 15
#define D18F6x11C_Enable_WIDTH                                  1
#define D18F6x11C_Enable_MASK                                   0x8000
#define D18F6x11C_LclkFreq_OFFSET                               16
#define D18F6x11C_LclkFreq_WIDTH                                7
#define D18F6x11C_LclkFreq_MASK                                 0x7f0000
#define D18F6x11C_LclkFreqType_OFFSET                           23
#define D18F6x11C_LclkFreqType_WIDTH                            1
#define D18F6x11C_LclkFreqType_MASK                             0x800000
#define D18F6x11C_NclkFreq_OFFSET                               24
#define D18F6x11C_NclkFreq_WIDTH                                7
#define D18F6x11C_NclkFreq_MASK                                 0x7f000000
#define D18F6x11C_NclkFreqType_OFFSET                           31
#define D18F6x11C_NclkFreqType_WIDTH                            1
#define D18F6x11C_NclkFreqType_MASK                             0x80000000

/// D18F6x11C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x11C_STRUCT;

// **** D18F6x120 Register Definition ****
// Address
#define D18F6x120_ADDRESS                                       0x120

// Type
#define D18F6x120_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x120_NclkFifoOff_OFFSET                            0
#define D18F6x120_NclkFifoOff_WIDTH                             3
#define D18F6x120_NclkFifoOff_MASK                              0x7
#define D18F6x120_Reserved_3_3_OFFSET                           3
#define D18F6x120_Reserved_3_3_WIDTH                            1
#define D18F6x120_Reserved_3_3_MASK                             0x8
#define D18F6x120_LclkFifoOff_OFFSET                            4
#define D18F6x120_LclkFifoOff_WIDTH                             3
#define D18F6x120_LclkFifoOff_MASK                              0x70
#define D18F6x120_Reserved_7_7_OFFSET                           7
#define D18F6x120_Reserved_7_7_WIDTH                            1
#define D18F6x120_Reserved_7_7_MASK                             0x80
#define D18F6x120_PllMult_OFFSET                                8
#define D18F6x120_PllMult_WIDTH                                 6
#define D18F6x120_PllMult_MASK                                  0x3f00
#define D18F6x120_Reserved_14_14_OFFSET                         14
#define D18F6x120_Reserved_14_14_WIDTH                          1
#define D18F6x120_Reserved_14_14_MASK                           0x4000
#define D18F6x120_Enable_OFFSET                                 15
#define D18F6x120_Enable_WIDTH                                  1
#define D18F6x120_Enable_MASK                                   0x8000
#define D18F6x120_LclkFreq_OFFSET                               16
#define D18F6x120_LclkFreq_WIDTH                                7
#define D18F6x120_LclkFreq_MASK                                 0x7f0000
#define D18F6x120_LclkFreqType_OFFSET                           23
#define D18F6x120_LclkFreqType_WIDTH                            1
#define D18F6x120_LclkFreqType_MASK                             0x800000
#define D18F6x120_NclkFreq_OFFSET                               24
#define D18F6x120_NclkFreq_WIDTH                                7
#define D18F6x120_NclkFreq_MASK                                 0x7f000000
#define D18F6x120_NclkFreqType_OFFSET                           31
#define D18F6x120_NclkFreqType_WIDTH                            1
#define D18F6x120_NclkFreqType_MASK                             0x80000000

/// D18F6x120
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x120_STRUCT;

// **** D18F6x124 Register Definition ****
// Address
#define D18F6x124_ADDRESS                                       0x124

// Type
#define D18F6x124_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x124_NclkFifoOff_OFFSET                            0
#define D18F6x124_NclkFifoOff_WIDTH                             3
#define D18F6x124_NclkFifoOff_MASK                              0x7
#define D18F6x124_Reserved_3_3_OFFSET                           3
#define D18F6x124_Reserved_3_3_WIDTH                            1
#define D18F6x124_Reserved_3_3_MASK                             0x8
#define D18F6x124_LclkFifoOff_OFFSET                            4
#define D18F6x124_LclkFifoOff_WIDTH                             3
#define D18F6x124_LclkFifoOff_MASK                              0x70
#define D18F6x124_Reserved_7_7_OFFSET                           7
#define D18F6x124_Reserved_7_7_WIDTH                            1
#define D18F6x124_Reserved_7_7_MASK                             0x80
#define D18F6x124_PllMult_OFFSET                                8
#define D18F6x124_PllMult_WIDTH                                 6
#define D18F6x124_PllMult_MASK                                  0x3f00
#define D18F6x124_Reserved_14_14_OFFSET                         14
#define D18F6x124_Reserved_14_14_WIDTH                          1
#define D18F6x124_Reserved_14_14_MASK                           0x4000
#define D18F6x124_Enable_OFFSET                                 15
#define D18F6x124_Enable_WIDTH                                  1
#define D18F6x124_Enable_MASK                                   0x8000
#define D18F6x124_LclkFreq_OFFSET                               16
#define D18F6x124_LclkFreq_WIDTH                                7
#define D18F6x124_LclkFreq_MASK                                 0x7f0000
#define D18F6x124_LclkFreqType_OFFSET                           23
#define D18F6x124_LclkFreqType_WIDTH                            1
#define D18F6x124_LclkFreqType_MASK                             0x800000
#define D18F6x124_NclkFreq_OFFSET                               24
#define D18F6x124_NclkFreq_WIDTH                                7
#define D18F6x124_NclkFreq_MASK                                 0x7f000000
#define D18F6x124_NclkFreqType_OFFSET                           31
#define D18F6x124_NclkFreqType_WIDTH                            1
#define D18F6x124_NclkFreqType_MASK                             0x80000000

/// D18F6x124
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x124_STRUCT;

// **** D18F6x128 Register Definition ****
// Address
#define D18F6x128_ADDRESS                                       0x128

// Type
#define D18F6x128_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x128_NclkFifoOff_OFFSET                            0
#define D18F6x128_NclkFifoOff_WIDTH                             3
#define D18F6x128_NclkFifoOff_MASK                              0x7
#define D18F6x128_Reserved_3_3_OFFSET                           3
#define D18F6x128_Reserved_3_3_WIDTH                            1
#define D18F6x128_Reserved_3_3_MASK                             0x8
#define D18F6x128_LclkFifoOff_OFFSET                            4
#define D18F6x128_LclkFifoOff_WIDTH                             3
#define D18F6x128_LclkFifoOff_MASK                              0x70
#define D18F6x128_Reserved_7_7_OFFSET                           7
#define D18F6x128_Reserved_7_7_WIDTH                            1
#define D18F6x128_Reserved_7_7_MASK                             0x80
#define D18F6x128_PllMult_OFFSET                                8
#define D18F6x128_PllMult_WIDTH                                 6
#define D18F6x128_PllMult_MASK                                  0x3f00
#define D18F6x128_Reserved_14_14_OFFSET                         14
#define D18F6x128_Reserved_14_14_WIDTH                          1
#define D18F6x128_Reserved_14_14_MASK                           0x4000
#define D18F6x128_Enable_OFFSET                                 15
#define D18F6x128_Enable_WIDTH                                  1
#define D18F6x128_Enable_MASK                                   0x8000
#define D18F6x128_LclkFreq_OFFSET                               16
#define D18F6x128_LclkFreq_WIDTH                                7
#define D18F6x128_LclkFreq_MASK                                 0x7f0000
#define D18F6x128_LclkFreqType_OFFSET                           23
#define D18F6x128_LclkFreqType_WIDTH                            1
#define D18F6x128_LclkFreqType_MASK                             0x800000
#define D18F6x128_NclkFreq_OFFSET                               24
#define D18F6x128_NclkFreq_WIDTH                                7
#define D18F6x128_NclkFreq_MASK                                 0x7f000000
#define D18F6x128_NclkFreqType_OFFSET                           31
#define D18F6x128_NclkFreqType_WIDTH                            1
#define D18F6x128_NclkFreqType_MASK                             0x80000000

/// D18F6x128
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x128_STRUCT;

// **** D18F6x12C Register Definition ****
// Address
#define D18F6x12C_ADDRESS                                       0x12c

// Type
#define D18F6x12C_TYPE                                          TYPE_D18F6
// Field Data
#define D18F6x12C_NclkFifoOff_OFFSET                            0
#define D18F6x12C_NclkFifoOff_WIDTH                             3
#define D18F6x12C_NclkFifoOff_MASK                              0x7
#define D18F6x12C_Reserved_3_3_OFFSET                           3
#define D18F6x12C_Reserved_3_3_WIDTH                            1
#define D18F6x12C_Reserved_3_3_MASK                             0x8
#define D18F6x12C_LclkFifoOff_OFFSET                            4
#define D18F6x12C_LclkFifoOff_WIDTH                             3
#define D18F6x12C_LclkFifoOff_MASK                              0x70
#define D18F6x12C_Reserved_7_7_OFFSET                           7
#define D18F6x12C_Reserved_7_7_WIDTH                            1
#define D18F6x12C_Reserved_7_7_MASK                             0x80
#define D18F6x12C_PllMult_OFFSET                                8
#define D18F6x12C_PllMult_WIDTH                                 6
#define D18F6x12C_PllMult_MASK                                  0x3f00
#define D18F6x12C_Reserved_14_14_OFFSET                         14
#define D18F6x12C_Reserved_14_14_WIDTH                          1
#define D18F6x12C_Reserved_14_14_MASK                           0x4000
#define D18F6x12C_Enable_OFFSET                                 15
#define D18F6x12C_Enable_WIDTH                                  1
#define D18F6x12C_Enable_MASK                                   0x8000
#define D18F6x12C_LclkFreq_OFFSET                               16
#define D18F6x12C_LclkFreq_WIDTH                                7
#define D18F6x12C_LclkFreq_MASK                                 0x7f0000
#define D18F6x12C_LclkFreqType_OFFSET                           23
#define D18F6x12C_LclkFreqType_WIDTH                            1
#define D18F6x12C_LclkFreqType_MASK                             0x800000
#define D18F6x12C_NclkFreq_OFFSET                               24
#define D18F6x12C_NclkFreq_WIDTH                                7
#define D18F6x12C_NclkFreq_MASK                                 0x7f000000
#define D18F6x12C_NclkFreqType_OFFSET                           31
#define D18F6x12C_NclkFreqType_WIDTH                            1
#define D18F6x12C_NclkFreqType_MASK                             0x80000000

/// D18F6x12C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NclkFifoOff:3 ; ///<Specifies the NCLK FIFO offset to apply.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                              LclkFifoOff:3 ; ///<Specifies the LCLK FIFO offset to apply.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                  PllMult:6 ; ///<Specifies the main PLL frequency. Used when either LclkFreqType=1 or NclkFreqType=1. This field should be programmed to D18F3xD4[MainPllOpFreqId] + 16.
    UINT32                                           Reserved_14_14:1 ; ///<
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 LclkFreq:7 ; ///<Specifies the LCLK frequency divider or LCLK frequency range when LclkFifoOffset is applied. IF (LclkFreqType == 0) THEN See: NclkFreq. ENDIF.
    UINT32                                             LclkFreqType:1 ; ///<
    UINT32                                                 NclkFreq:7 ; ///<Specifies the NCLK frequency divider or NCLK frequency range when NclkFifoOffset is applied.
    UINT32                                             NclkFreqType:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F6x12C_STRUCT;

// **** DxF0x00 Register Definition ****
// Address
#define DxF0x00_ADDRESS                                         0x0

// Type
#define DxF0x00_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x00_VendorID_OFFSET                                 0
#define DxF0x00_VendorID_WIDTH                                  16
#define DxF0x00_VendorID_MASK                                   0xffff
#define DxF0x00_DeviceID_OFFSET                                 16
#define DxF0x00_DeviceID_WIDTH                                  16
#define DxF0x00_DeviceID_MASK                                   0xffff0000

/// DxF0x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VendorID:16; ///<
    UINT32                                                 DeviceID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x00_STRUCT;

// **** DxF0x04 Register Definition ****
// Address
#define DxF0x04_ADDRESS                                         0x4

// Type
#define DxF0x04_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x04_IoAccessEn_OFFSET                               0
#define DxF0x04_IoAccessEn_WIDTH                                1
#define DxF0x04_IoAccessEn_MASK                                 0x1
#define DxF0x04_MemAccessEn_OFFSET                              1
#define DxF0x04_MemAccessEn_WIDTH                               1
#define DxF0x04_MemAccessEn_MASK                                0x2
#define DxF0x04_BusMasterEn_OFFSET                              2
#define DxF0x04_BusMasterEn_WIDTH                               1
#define DxF0x04_BusMasterEn_MASK                                0x4
#define DxF0x04_SpecialCycleEn_OFFSET                           3
#define DxF0x04_SpecialCycleEn_WIDTH                            1
#define DxF0x04_SpecialCycleEn_MASK                             0x8
#define DxF0x04_MemWriteInvalidateEn_OFFSET                     4
#define DxF0x04_MemWriteInvalidateEn_WIDTH                      1
#define DxF0x04_MemWriteInvalidateEn_MASK                       0x10
#define DxF0x04_PalSnoopEn_OFFSET                               5
#define DxF0x04_PalSnoopEn_WIDTH                                1
#define DxF0x04_PalSnoopEn_MASK                                 0x20
#define DxF0x04_ParityErrorEn_OFFSET                            6
#define DxF0x04_ParityErrorEn_WIDTH                             1
#define DxF0x04_ParityErrorEn_MASK                              0x40
#define DxF0x04_Stepping_OFFSET                                 7
#define DxF0x04_Stepping_WIDTH                                  1
#define DxF0x04_Stepping_MASK                                   0x80
#define DxF0x04_SerrEn_OFFSET                                   8
#define DxF0x04_SerrEn_WIDTH                                    1
#define DxF0x04_SerrEn_MASK                                     0x100
#define DxF0x04_FastB2BEn_OFFSET                                9
#define DxF0x04_FastB2BEn_WIDTH                                 1
#define DxF0x04_FastB2BEn_MASK                                  0x200
#define DxF0x04_IntDis_OFFSET                                   10
#define DxF0x04_IntDis_WIDTH                                    1
#define DxF0x04_IntDis_MASK                                     0x400
#define DxF0x04_Reserved_18_11_OFFSET                           11
#define DxF0x04_Reserved_18_11_WIDTH                            8
#define DxF0x04_Reserved_18_11_MASK                             0x7f800
#define DxF0x04_IntStatus_OFFSET                                19
#define DxF0x04_IntStatus_WIDTH                                 1
#define DxF0x04_IntStatus_MASK                                  0x80000
#define DxF0x04_CapList_OFFSET                                  20
#define DxF0x04_CapList_WIDTH                                   1
#define DxF0x04_CapList_MASK                                    0x100000
#define DxF0x04_PCI66En_OFFSET                                  21
#define DxF0x04_PCI66En_WIDTH                                   1
#define DxF0x04_PCI66En_MASK                                    0x200000
#define DxF0x04_UDFEn_OFFSET                                    22
#define DxF0x04_UDFEn_WIDTH                                     1
#define DxF0x04_UDFEn_MASK                                      0x400000
#define DxF0x04_FastBackCapable_OFFSET                          23
#define DxF0x04_FastBackCapable_WIDTH                           1
#define DxF0x04_FastBackCapable_MASK                            0x800000
#define DxF0x04_DataPerr_OFFSET                                 24
#define DxF0x04_DataPerr_WIDTH                                  1
#define DxF0x04_DataPerr_MASK                                   0x1000000
#define DxF0x04_DevselTiming_OFFSET                             25
#define DxF0x04_DevselTiming_WIDTH                              2
#define DxF0x04_DevselTiming_MASK                               0x6000000
#define DxF0x04_SignalTargetAbort_OFFSET                        27
#define DxF0x04_SignalTargetAbort_WIDTH                         1
#define DxF0x04_SignalTargetAbort_MASK                          0x8000000
#define DxF0x04_ReceivedTargetAbort_OFFSET                      28
#define DxF0x04_ReceivedTargetAbort_WIDTH                       1
#define DxF0x04_ReceivedTargetAbort_MASK                        0x10000000
#define DxF0x04_ReceivedMasterAbort_OFFSET                      29
#define DxF0x04_ReceivedMasterAbort_WIDTH                       1
#define DxF0x04_ReceivedMasterAbort_MASK                        0x20000000
#define DxF0x04_SignaledSystemError_OFFSET                      30
#define DxF0x04_SignaledSystemError_WIDTH                       1
#define DxF0x04_SignaledSystemError_MASK                        0x40000000
#define DxF0x04_ParityErrorDetected_OFFSET                      31
#define DxF0x04_ParityErrorDetected_WIDTH                       1
#define DxF0x04_ParityErrorDetected_MASK                        0x80000000

/// DxF0x04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               IoAccessEn:1 ; ///<This bit controls if IO accesses targeting this device are accepted or not.
    UINT32                                              MemAccessEn:1 ; ///<This bit controls if memory accesses targeting this device are accepted or not.
    UINT32                                              BusMasterEn:1 ; ///<
    UINT32                                           SpecialCycleEn:1 ; ///<
    UINT32                                     MemWriteInvalidateEn:1 ; ///<
    UINT32                                               PalSnoopEn:1 ; ///<
    UINT32                                            ParityErrorEn:1 ; ///<
    UINT32                                                 Stepping:1 ; ///<
    UINT32                                                   SerrEn:1 ; ///<
    UINT32                                                FastB2BEn:1 ; ///<
    UINT32                                                   IntDis:1 ; ///<
    UINT32                                           Reserved_18_11:8 ; ///<
    UINT32                                                IntStatus:1 ; ///<
    UINT32                                                  CapList:1 ; ///<
    UINT32                                                  PCI66En:1 ; ///<
    UINT32                                                    UDFEn:1 ; ///<
    UINT32                                          FastBackCapable:1 ; ///<
    UINT32                                                 DataPerr:1 ; ///<
    UINT32                                             DevselTiming:2 ; ///<
    UINT32                                        SignalTargetAbort:1 ; ///<
    UINT32                                      ReceivedTargetAbort:1 ; ///<
    UINT32                                      ReceivedMasterAbort:1 ; ///<
    UINT32                                      SignaledSystemError:1 ; ///<
    UINT32                                      ParityErrorDetected:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x04_STRUCT;

// **** DxF0x08 Register Definition ****
// Address
#define DxF0x08_ADDRESS                                         0x8

// Type
#define DxF0x08_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x08_RevID_OFFSET                                    0
#define DxF0x08_RevID_WIDTH                                     8
#define DxF0x08_RevID_MASK                                      0xff
#define DxF0x08_ClassCode_OFFSET                                8
#define DxF0x08_ClassCode_WIDTH                                 24
#define DxF0x08_ClassCode_MASK                                  0xffffff00

/// DxF0x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    RevID:8 ; ///<
    UINT32                                                ClassCode:24; ///<Provides the host bridge class code as defined in the PCI specification.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x08_STRUCT;

// **** DxF0x0C Register Definition ****
// Address
#define DxF0x0C_ADDRESS                                         0xc

// Type
#define DxF0x0C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x0C_CacheLineSize_OFFSET                            0
#define DxF0x0C_CacheLineSize_WIDTH                             8
#define DxF0x0C_CacheLineSize_MASK                              0xff
#define DxF0x0C_LatencyTimer_OFFSET                             8
#define DxF0x0C_LatencyTimer_WIDTH                              8
#define DxF0x0C_LatencyTimer_MASK                               0xff00
#define DxF0x0C_HeaderTypeReg_OFFSET                            16
#define DxF0x0C_HeaderTypeReg_WIDTH                             8
#define DxF0x0C_HeaderTypeReg_MASK                              0xff0000
#define DxF0x0C_BIST_OFFSET                                     24
#define DxF0x0C_BIST_WIDTH                                      8
#define DxF0x0C_BIST_MASK                                       0xff000000

/// DxF0x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            CacheLineSize:8 ; ///<
    UINT32                                             LatencyTimer:8 ; ///<This field does not control any hardware.
    UINT32                                            HeaderTypeReg:8 ; ///<These bits are fixed at their default values. The header type field indicates a header type 1 and that there is only one function present in this device.
    UINT32                                                     BIST:8 ; ///<These bits are fixed at their default values.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x0C_STRUCT;

// **** DxF0x18 Register Definition ****
// Address
#define DxF0x18_ADDRESS                                         0x18

// Type
#define DxF0x18_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x18_PrimaryBus_OFFSET                               0
#define DxF0x18_PrimaryBus_WIDTH                                8
#define DxF0x18_PrimaryBus_MASK                                 0xff
#define DxF0x18_SecondaryBus_OFFSET                             8
#define DxF0x18_SecondaryBus_WIDTH                              8
#define DxF0x18_SecondaryBus_MASK                               0xff00
#define DxF0x18_SubBusNumber_OFFSET                             16
#define DxF0x18_SubBusNumber_WIDTH                              8
#define DxF0x18_SubBusNumber_MASK                               0xff0000
#define DxF0x18_SecondaryLatencyTimer_OFFSET                    24
#define DxF0x18_SecondaryLatencyTimer_WIDTH                     8
#define DxF0x18_SecondaryLatencyTimer_MASK                      0xff000000

/// DxF0x18
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               PrimaryBus:8 ; ///<This field defines the bus number of the primary bus interface.
    UINT32                                             SecondaryBus:8 ; ///<This field defines the bus number of the secondary bus interface.
    UINT32                                             SubBusNumber:8 ; ///<This field contains the highest-numbered bus that exists on the secondary side of the bridge.
    UINT32                                    SecondaryLatencyTimer:8 ; ///<This field is always 0.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x18_STRUCT;

// **** DxF0x1C Register Definition ****
// Address
#define DxF0x1C_ADDRESS                                         0x1c

// Type
#define DxF0x1C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x1C_Reserved_3_0_OFFSET                             0
#define DxF0x1C_Reserved_3_0_WIDTH                              4
#define DxF0x1C_Reserved_3_0_MASK                               0xf
#define DxF0x1C_IOBase_15_12__OFFSET                            4
#define DxF0x1C_IOBase_15_12__WIDTH                             4
#define DxF0x1C_IOBase_15_12__MASK                              0xf0
#define DxF0x1C_Reserved_11_8_OFFSET                            8
#define DxF0x1C_Reserved_11_8_WIDTH                             4
#define DxF0x1C_Reserved_11_8_MASK                              0xf00
#define DxF0x1C_IOLimit_15_12__OFFSET                           12
#define DxF0x1C_IOLimit_15_12__WIDTH                            4
#define DxF0x1C_IOLimit_15_12__MASK                             0xf000
#define DxF0x1C_Reserved_19_16_OFFSET                           16
#define DxF0x1C_Reserved_19_16_WIDTH                            4
#define DxF0x1C_Reserved_19_16_MASK                             0xf0000
#define DxF0x1C_CapList_OFFSET                                  20
#define DxF0x1C_CapList_WIDTH                                   1
#define DxF0x1C_CapList_MASK                                    0x100000
#define DxF0x1C_PCI66En_OFFSET                                  21
#define DxF0x1C_PCI66En_WIDTH                                   1
#define DxF0x1C_PCI66En_MASK                                    0x200000
#define DxF0x1C_UDFEn_OFFSET                                    22
#define DxF0x1C_UDFEn_WIDTH                                     1
#define DxF0x1C_UDFEn_MASK                                      0x400000
#define DxF0x1C_FastBackCapable_OFFSET                          23
#define DxF0x1C_FastBackCapable_WIDTH                           1
#define DxF0x1C_FastBackCapable_MASK                            0x800000
#define DxF0x1C_MasterDataPerr_OFFSET                           24
#define DxF0x1C_MasterDataPerr_WIDTH                            1
#define DxF0x1C_MasterDataPerr_MASK                             0x1000000
#define DxF0x1C_DevselTiming_OFFSET                             25
#define DxF0x1C_DevselTiming_WIDTH                              2
#define DxF0x1C_DevselTiming_MASK                               0x6000000
#define DxF0x1C_SignalTargetAbort_OFFSET                        27
#define DxF0x1C_SignalTargetAbort_WIDTH                         1
#define DxF0x1C_SignalTargetAbort_MASK                          0x8000000
#define DxF0x1C_ReceivedTargetAbort_OFFSET                      28
#define DxF0x1C_ReceivedTargetAbort_WIDTH                       1
#define DxF0x1C_ReceivedTargetAbort_MASK                        0x10000000
#define DxF0x1C_ReceivedMasterAbort_OFFSET                      29
#define DxF0x1C_ReceivedMasterAbort_WIDTH                       1
#define DxF0x1C_ReceivedMasterAbort_MASK                        0x20000000
#define DxF0x1C_ReceivedSystemError_OFFSET                      30
#define DxF0x1C_ReceivedSystemError_WIDTH                       1
#define DxF0x1C_ReceivedSystemError_MASK                        0x40000000
#define DxF0x1C_ParityErrorDetected_OFFSET                      31
#define DxF0x1C_ParityErrorDetected_WIDTH                       1
#define DxF0x1C_ParityErrorDetected_MASK                        0x80000000

/// DxF0x1C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                            IOBase_15_12_:4 ; ///<Lower part of the base address. Upper part is defined in D[8:4]F0x30.
    UINT32                                            Reserved_11_8:4 ; ///<
    UINT32                                           IOLimit_15_12_:4 ; ///<Lower part of the limit address. Upper part is defined in D[8:4]F0x30.
    UINT32                                           Reserved_19_16:4 ; ///<
    UINT32                                                  CapList:1 ; ///<
    UINT32                                                  PCI66En:1 ; ///<
    UINT32                                                    UDFEn:1 ; ///<
    UINT32                                          FastBackCapable:1 ; ///<
    UINT32                                           MasterDataPerr:1 ; ///<
    UINT32                                             DevselTiming:2 ; ///<
    UINT32                                        SignalTargetAbort:1 ; ///<
    UINT32                                      ReceivedTargetAbort:1 ; ///<
    UINT32                                      ReceivedMasterAbort:1 ; ///<
    UINT32                                      ReceivedSystemError:1 ; ///<
    UINT32                                      ParityErrorDetected:1 ; ///<A Poisoned TLP was received regardless of the state of the D[8:4]F0x04[ParityErrorEn].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x1C_STRUCT;

// **** DxF0x20 Register Definition ****
// Address
#define DxF0x20_ADDRESS                                         0x20

// Type
#define DxF0x20_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x20_Reserved_3_0_OFFSET                             0
#define DxF0x20_Reserved_3_0_WIDTH                              4
#define DxF0x20_Reserved_3_0_MASK                               0xf
#define DxF0x20_MemBase_OFFSET                                  4
#define DxF0x20_MemBase_WIDTH                                   12
#define DxF0x20_MemBase_MASK                                    0xfff0
#define DxF0x20_Reserved_19_16_OFFSET                           16
#define DxF0x20_Reserved_19_16_WIDTH                            4
#define DxF0x20_Reserved_19_16_MASK                             0xf0000
#define DxF0x20_MemLimit_OFFSET                                 20
#define DxF0x20_MemLimit_WIDTH                                  12
#define DxF0x20_MemLimit_MASK                                   0xfff00000

/// DxF0x20
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                                  MemBase:12; ///<
    UINT32                                           Reserved_19_16:4 ; ///<
    UINT32                                                 MemLimit:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x20_STRUCT;

// **** DxF0x24 Register Definition ****
// Address
#define DxF0x24_ADDRESS                                         0x24

// Type
#define DxF0x24_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x24_PrefMemBaseR_OFFSET                             0
#define DxF0x24_PrefMemBaseR_WIDTH                              4
#define DxF0x24_PrefMemBaseR_MASK                               0xf
#define DxF0x24_PrefMemBase_31_20__OFFSET                       4
#define DxF0x24_PrefMemBase_31_20__WIDTH                        12
#define DxF0x24_PrefMemBase_31_20__MASK                         0xfff0
#define DxF0x24_PrefMemLimitR_OFFSET                            16
#define DxF0x24_PrefMemLimitR_WIDTH                             4
#define DxF0x24_PrefMemLimitR_MASK                              0xf0000
#define DxF0x24_PrefMemLimit_OFFSET                             20
#define DxF0x24_PrefMemLimit_WIDTH                              12
#define DxF0x24_PrefMemLimit_MASK                               0xfff00000

/// DxF0x24
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             PrefMemBaseR:4 ; ///<
    UINT32                                       PrefMemBase_31_20_:12; ///<Lower part of the base address. Upper part is defined in D[8:4]F0x28.
    UINT32                                            PrefMemLimitR:4 ; ///<
    UINT32                                             PrefMemLimit:12; ///<Lower part of the limit address. Upper part is defined in D[8:4]F0x2C.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x24_STRUCT;

// **** DxF0x28 Register Definition ****
// Address
#define DxF0x28_ADDRESS                                         0x28

// Type
#define DxF0x28_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x28_PrefMemBase_63_32__OFFSET                       0
#define DxF0x28_PrefMemBase_63_32__WIDTH                        32
#define DxF0x28_PrefMemBase_63_32__MASK                         0xffffffff

/// DxF0x28
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       PrefMemBase_63_32_:32; ///<Upper part of the base address. Lower part is defined in D[8:4]F0x24.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x28_STRUCT;

// **** DxF0x2C Register Definition ****
// Address
#define DxF0x2C_ADDRESS                                         0x2c

// Type
#define DxF0x2C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x2C_PrefMemLimit_63_32__OFFSET                      0
#define DxF0x2C_PrefMemLimit_63_32__WIDTH                       32
#define DxF0x2C_PrefMemLimit_63_32__MASK                        0xffffffff

/// DxF0x2C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                      PrefMemLimit_63_32_:32; ///<Upper part of the limit address. Lower part is defined in D[8:4]F0x24.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x2C_STRUCT;

// **** DxF0x30 Register Definition ****
// Address
#define DxF0x30_ADDRESS                                         0x30

// Type
#define DxF0x30_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x30_IOBase_31_16__OFFSET                            0
#define DxF0x30_IOBase_31_16__WIDTH                             16
#define DxF0x30_IOBase_31_16__MASK                              0xffff
#define DxF0x30_IOLimit_31_16__OFFSET                           16
#define DxF0x30_IOLimit_31_16__WIDTH                            16
#define DxF0x30_IOLimit_31_16__MASK                             0xffff0000

/// DxF0x30
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            IOBase_31_16_:16; ///<Upper part of the base address. Lower part is defined in D[8:4]F0x1C.
    UINT32                                           IOLimit_31_16_:16; ///<Upper part of the limit address. Lower part is defined in D[8:4]F0x1C.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x30_STRUCT;

// **** DxF0x34 Register Definition ****
// Address
#define DxF0x34_ADDRESS                                         0x34

// Type
#define DxF0x34_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x34_CapPtr_OFFSET                                   0
#define DxF0x34_CapPtr_WIDTH                                    8
#define DxF0x34_CapPtr_MASK                                     0xff
#define DxF0x34_Reserved_31_8_OFFSET                            8
#define DxF0x34_Reserved_31_8_WIDTH                             24
#define DxF0x34_Reserved_31_8_MASK                              0xffffff00

/// DxF0x34
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   CapPtr:8 ; ///<Pointer to PM capability.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x34_STRUCT;

// **** DxF0x3C Register Definition ****
// Address
#define DxF0x3C_ADDRESS                                         0x3c

// Type
#define DxF0x3C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x3C_IntLine_OFFSET                                  0
#define DxF0x3C_IntLine_WIDTH                                   8
#define DxF0x3C_IntLine_MASK                                    0xff
#define DxF0x3C_IntPin_OFFSET                                   8
#define DxF0x3C_IntPin_WIDTH                                    3
#define DxF0x3C_IntPin_MASK                                     0x700
#define DxF0x3C_Reserved_15_11_OFFSET                           11
#define DxF0x3C_Reserved_15_11_WIDTH                            5
#define DxF0x3C_Reserved_15_11_MASK                             0xf800
#define DxF0x3C_ParityResponseEn_OFFSET                         16
#define DxF0x3C_ParityResponseEn_WIDTH                          1
#define DxF0x3C_ParityResponseEn_MASK                           0x10000
#define DxF0x3C_SerrEn_OFFSET                                   17
#define DxF0x3C_SerrEn_WIDTH                                    1
#define DxF0x3C_SerrEn_MASK                                     0x20000
#define DxF0x3C_IsaEn_OFFSET                                    18
#define DxF0x3C_IsaEn_WIDTH                                     1
#define DxF0x3C_IsaEn_MASK                                      0x40000
#define DxF0x3C_VgaEn_OFFSET                                    19
#define DxF0x3C_VgaEn_WIDTH                                     1
#define DxF0x3C_VgaEn_MASK                                      0x80000
#define DxF0x3C_Vga16En_OFFSET                                  20
#define DxF0x3C_Vga16En_WIDTH                                   1
#define DxF0x3C_Vga16En_MASK                                    0x100000
#define DxF0x3C_MasterAbortMode_OFFSET                          21
#define DxF0x3C_MasterAbortMode_WIDTH                           1
#define DxF0x3C_MasterAbortMode_MASK                            0x200000
#define DxF0x3C_SecondaryBusReset_OFFSET                        22
#define DxF0x3C_SecondaryBusReset_WIDTH                         1
#define DxF0x3C_SecondaryBusReset_MASK                          0x400000
#define DxF0x3C_FastB2BCap_OFFSET                               23
#define DxF0x3C_FastB2BCap_WIDTH                                1
#define DxF0x3C_FastB2BCap_MASK                                 0x800000
#define DxF0x3C_Reserved_31_24_OFFSET                           24
#define DxF0x3C_Reserved_31_24_WIDTH                            8
#define DxF0x3C_Reserved_31_24_MASK                             0xff000000

/// DxF0x3C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  IntLine:8 ; ///<
    UINT32                                                   IntPin:3 ; ///<
    UINT32                                           Reserved_15_11:5 ; ///< IntPin[7:3] hardwired to zero.
    UINT32                                         ParityResponseEn:1 ; ///<Controls the bridge's response to poisoned TLPs on its secondary interface.
    UINT32                                                   SerrEn:1 ; ///<
    UINT32                                                    IsaEn:1 ; ///<
    UINT32                                                    VgaEn:1 ; ///<Affects the response by the bridge to compatible VGA addresses. When it is set, the bridge decodes and forwards the following accesses on the primary interface to the secondary interface: Memory accesses in the range of A_0000h to B_FFFFh and IO address where address bits 9:0 are in the ranges of 3B0h to 3BBh or 3C0h to 3DFh. For IO cycles the decoding of address bits 15:10 depends on Vga16En.
    UINT32                                                  Vga16En:1 ; ///<
    UINT32                                          MasterAbortMode:1 ; ///<
    UINT32                                        SecondaryBusReset:1 ; ///<Setting this bit triggers a hot reset on the corresponding PCI Express Port.
    UINT32                                               FastB2BCap:1 ; ///<
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x3C_STRUCT;

// **** DxF0x40 Register Definition ****
// Address
#define DxF0x40_ADDRESS                                         0x40

// Type
#define DxF0x40_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x40_IoPort80En_OFFSET                               0
#define DxF0x40_IoPort80En_WIDTH                                1
#define DxF0x40_IoPort80En_MASK                                 0x1
#define DxF0x40_Reserved_31_1_OFFSET                            1
#define DxF0x40_Reserved_31_1_WIDTH                             31
#define DxF0x40_Reserved_31_1_MASK                              0xfffffffe

/// DxF0x40
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               IoPort80En:1 ; ///<
    UINT32                                            Reserved_31_1:31; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x40_STRUCT;

// **** DxF0x50 Register Definition ****
// Address
#define DxF0x50_ADDRESS                                         0x50

// Type
#define DxF0x50_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x50_CapID_OFFSET                                    0
#define DxF0x50_CapID_WIDTH                                     8
#define DxF0x50_CapID_MASK                                      0xff
#define DxF0x50_NextPtr_OFFSET                                  8
#define DxF0x50_NextPtr_WIDTH                                   8
#define DxF0x50_NextPtr_MASK                                    0xff00
#define DxF0x50_Version_OFFSET                                  16
#define DxF0x50_Version_WIDTH                                   3
#define DxF0x50_Version_MASK                                    0x70000
#define DxF0x50_PmeClock_OFFSET                                 19
#define DxF0x50_PmeClock_WIDTH                                  1
#define DxF0x50_PmeClock_MASK                                   0x80000
#define DxF0x50_Reserved_20_20_OFFSET                           20
#define DxF0x50_Reserved_20_20_WIDTH                            1
#define DxF0x50_Reserved_20_20_MASK                             0x100000
#define DxF0x50_DevSpecificInit_OFFSET                          21
#define DxF0x50_DevSpecificInit_WIDTH                           1
#define DxF0x50_DevSpecificInit_MASK                            0x200000
#define DxF0x50_AuxCurrent_OFFSET                               22
#define DxF0x50_AuxCurrent_WIDTH                                3
#define DxF0x50_AuxCurrent_MASK                                 0x1c00000
#define DxF0x50_D1Support_OFFSET                                25
#define DxF0x50_D1Support_WIDTH                                 1
#define DxF0x50_D1Support_MASK                                  0x2000000
#define DxF0x50_D2Support_OFFSET                                26
#define DxF0x50_D2Support_WIDTH                                 1
#define DxF0x50_D2Support_MASK                                  0x4000000
#define DxF0x50_PmeSupport_OFFSET                               27
#define DxF0x50_PmeSupport_WIDTH                                5
#define DxF0x50_PmeSupport_MASK                                 0xf8000000

/// DxF0x50
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:8 ; ///<
    UINT32                                                  NextPtr:8 ; ///<
    UINT32                                                  Version:3 ; ///<
    UINT32                                                 PmeClock:1 ; ///<
    UINT32                                           Reserved_20_20:1 ; ///<
    UINT32                                          DevSpecificInit:1 ; ///<This field is hardwired to 0 to indicate that there is no device specific initialization necessary.
    UINT32                                               AuxCurrent:3 ; ///< Auxiliary current is not supported.
    UINT32                                                D1Support:1 ; ///<D1 is not supported
    UINT32                                                D2Support:1 ; ///<D2 is not supported
    UINT32                                               PmeSupport:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x50_STRUCT;

// **** DxF0x54 Register Definition ****
// Address
#define DxF0x54_ADDRESS                                         0x54

// Type
#define DxF0x54_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x54_PowerState_OFFSET                               0
#define DxF0x54_PowerState_WIDTH                                2
#define DxF0x54_PowerState_MASK                                 0x3
#define DxF0x54_Reserved_2_2_OFFSET                             2
#define DxF0x54_Reserved_2_2_WIDTH                              1
#define DxF0x54_Reserved_2_2_MASK                               0x4
#define DxF0x54_NoSoftReset_OFFSET                              3
#define DxF0x54_NoSoftReset_WIDTH                               1
#define DxF0x54_NoSoftReset_MASK                                0x8
#define DxF0x54_Reserved_7_4_OFFSET                             4
#define DxF0x54_Reserved_7_4_WIDTH                              4
#define DxF0x54_Reserved_7_4_MASK                               0xf0
#define DxF0x54_PmeEn_OFFSET                                    8
#define DxF0x54_PmeEn_WIDTH                                     1
#define DxF0x54_PmeEn_MASK                                      0x100
#define DxF0x54_DataSelect_OFFSET                               9
#define DxF0x54_DataSelect_WIDTH                                4
#define DxF0x54_DataSelect_MASK                                 0x1e00
#define DxF0x54_DataScale_OFFSET                                13
#define DxF0x54_DataScale_WIDTH                                 2
#define DxF0x54_DataScale_MASK                                  0x6000
#define DxF0x54_PmeStatus_OFFSET                                15
#define DxF0x54_PmeStatus_WIDTH                                 1
#define DxF0x54_PmeStatus_MASK                                  0x8000
#define DxF0x54_Reserved_21_16_OFFSET                           16
#define DxF0x54_Reserved_21_16_WIDTH                            6
#define DxF0x54_Reserved_21_16_MASK                             0x3f0000
#define DxF0x54_B2B3Support_OFFSET                              22
#define DxF0x54_B2B3Support_WIDTH                               1
#define DxF0x54_B2B3Support_MASK                                0x400000
#define DxF0x54_BusPwrEn_OFFSET                                 23
#define DxF0x54_BusPwrEn_WIDTH                                  1
#define DxF0x54_BusPwrEn_MASK                                   0x800000
#define DxF0x54_PmeData_OFFSET                                  24
#define DxF0x54_PmeData_WIDTH                                   8
#define DxF0x54_PmeData_MASK                                    0xff000000

/// DxF0x54
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               PowerState:2 ; ///<This 2-bit field is used both to determine the current power state of the root port and to set the root port into a new power state.
    UINT32                                             Reserved_2_2:1 ; ///<
    UINT32                                              NoSoftReset:1 ; ///<Software is required to re-initialize the function when returning from D3hot.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                                    PmeEn:1 ; ///<
    UINT32                                               DataSelect:4 ; ///<
    UINT32                                                DataScale:2 ; ///<
    UINT32                                                PmeStatus:1 ; ///<This bit is set when the root port would issue a PME message (independent of the state of the PmeEn bit). Once set, this bit remains set until it is reset by writing a 1 to this bit location. Writing a 0 has no effect.
    UINT32                                           Reserved_21_16:6 ; ///<
    UINT32                                              B2B3Support:1 ; ///<B states are not supported.
    UINT32                                                 BusPwrEn:1 ; ///<
    UINT32                                                  PmeData:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x54_STRUCT;

// **** DxF0x58 Register Definition ****
// Address
#define DxF0x58_ADDRESS                                         0x58

// Type
#define DxF0x58_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x58_CapID_OFFSET                                    0
#define DxF0x58_CapID_WIDTH                                     8
#define DxF0x58_CapID_MASK                                      0xff
#define DxF0x58_NextPtr_OFFSET                                  8
#define DxF0x58_NextPtr_WIDTH                                   8
#define DxF0x58_NextPtr_MASK                                    0xff00
#define DxF0x58_Version_OFFSET                                  16
#define DxF0x58_Version_WIDTH                                   4
#define DxF0x58_Version_MASK                                    0xf0000
#define DxF0x58_DeviceType_OFFSET                               20
#define DxF0x58_DeviceType_WIDTH                                4
#define DxF0x58_DeviceType_MASK                                 0xf00000
#define DxF0x58_SlotImplemented_OFFSET                          24
#define DxF0x58_SlotImplemented_WIDTH                           1
#define DxF0x58_SlotImplemented_MASK                            0x1000000
#define DxF0x58_IntMessageNum_OFFSET                            25
#define DxF0x58_IntMessageNum_WIDTH                             5
#define DxF0x58_IntMessageNum_MASK                              0x3e000000
#define DxF0x58_Reserved_31_30_OFFSET                           30
#define DxF0x58_Reserved_31_30_WIDTH                            2
#define DxF0x58_Reserved_31_30_MASK                             0xc0000000

/// DxF0x58
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:8 ; ///<
    UINT32                                                  NextPtr:8 ; ///<The address of the next capability structure, or zero if this the end of the linked list of capability structures. Will read as A0h if D0F0xE4_x0101_00B0[StrapF0MsiEn]==1.
    UINT32                                                  Version:4 ; ///<
    UINT32                                               DeviceType:4 ; ///<
    UINT32                                          SlotImplemented:1 ; ///<
    UINT32                                            IntMessageNum:5 ; ///<This register indicates which MSI vector is used for the interrupt message.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x58_STRUCT;

// **** DxF0x5C Register Definition ****
// Address
#define DxF0x5C_ADDRESS                                         0x5c

// Type
#define DxF0x5C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x5C_MaxPayloadSupport_OFFSET                        0
#define DxF0x5C_MaxPayloadSupport_WIDTH                         3
#define DxF0x5C_MaxPayloadSupport_MASK                          0x7
#define DxF0x5C_PhantomFunc_OFFSET                              3
#define DxF0x5C_PhantomFunc_WIDTH                               2
#define DxF0x5C_PhantomFunc_MASK                                0x18
#define DxF0x5C_ExtendedTag_OFFSET                              5
#define DxF0x5C_ExtendedTag_WIDTH                               1
#define DxF0x5C_ExtendedTag_MASK                                0x20
#define DxF0x5C_L0SAcceptableLatency_OFFSET                     6
#define DxF0x5C_L0SAcceptableLatency_WIDTH                      3
#define DxF0x5C_L0SAcceptableLatency_MASK                       0x1c0
#define DxF0x5C_L1AcceptableLatency_OFFSET                      9
#define DxF0x5C_L1AcceptableLatency_WIDTH                       3
#define DxF0x5C_L1AcceptableLatency_MASK                        0xe00
#define DxF0x5C_Reserved_14_12_OFFSET                           12
#define DxF0x5C_Reserved_14_12_WIDTH                            3
#define DxF0x5C_Reserved_14_12_MASK                             0x7000
#define DxF0x5C_RoleBasedErrReporting_OFFSET                    15
#define DxF0x5C_RoleBasedErrReporting_WIDTH                     1
#define DxF0x5C_RoleBasedErrReporting_MASK                      0x8000
#define DxF0x5C_Reserved_17_16_OFFSET                           16
#define DxF0x5C_Reserved_17_16_WIDTH                            2
#define DxF0x5C_Reserved_17_16_MASK                             0x30000
#define DxF0x5C_CapturedSlotPowerLimit_OFFSET                   18
#define DxF0x5C_CapturedSlotPowerLimit_WIDTH                    8
#define DxF0x5C_CapturedSlotPowerLimit_MASK                     0x3fc0000
#define DxF0x5C_CapturedSlotPowerScale_OFFSET                   26
#define DxF0x5C_CapturedSlotPowerScale_WIDTH                    2
#define DxF0x5C_CapturedSlotPowerScale_MASK                     0xc000000
#define DxF0x5C_FlrCapable_OFFSET                               28
#define DxF0x5C_FlrCapable_WIDTH                                1
#define DxF0x5C_FlrCapable_MASK                                 0x10000000
#define DxF0x5C_Reserved_31_29_OFFSET                           29
#define DxF0x5C_Reserved_31_29_WIDTH                            3
#define DxF0x5C_Reserved_31_29_MASK                             0xe0000000

/// DxF0x5C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        MaxPayloadSupport:3 ; ///<
    UINT32                                              PhantomFunc:2 ; ///<
    UINT32                                              ExtendedTag:1 ; ///<
    UINT32                                     L0SAcceptableLatency:3 ; ///<
    UINT32                                      L1AcceptableLatency:3 ; ///<
    UINT32                                           Reserved_14_12:3 ; ///<
    UINT32                                    RoleBasedErrReporting:1 ; ///<
    UINT32                                           Reserved_17_16:2 ; ///<
    UINT32                                   CapturedSlotPowerLimit:8 ; ///<
    UINT32                                   CapturedSlotPowerScale:2 ; ///<
    UINT32                                               FlrCapable:1 ; ///<
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x5C_STRUCT;

// **** DxF0x60 Register Definition ****
// Address
#define DxF0x60_ADDRESS                                         0x60

// Type
#define DxF0x60_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x60_CorrErrEn_OFFSET                                0
#define DxF0x60_CorrErrEn_WIDTH                                 1
#define DxF0x60_CorrErrEn_MASK                                  0x1
#define DxF0x60_NonFatalErrEn_OFFSET                            1
#define DxF0x60_NonFatalErrEn_WIDTH                             1
#define DxF0x60_NonFatalErrEn_MASK                              0x2
#define DxF0x60_FatalErrEn_OFFSET                               2
#define DxF0x60_FatalErrEn_WIDTH                                1
#define DxF0x60_FatalErrEn_MASK                                 0x4
#define DxF0x60_UsrReportEn_OFFSET                              3
#define DxF0x60_UsrReportEn_WIDTH                               1
#define DxF0x60_UsrReportEn_MASK                                0x8
#define DxF0x60_RelaxedOrdEn_OFFSET                             4
#define DxF0x60_RelaxedOrdEn_WIDTH                              1
#define DxF0x60_RelaxedOrdEn_MASK                               0x10
#define DxF0x60_MaxPayloadSize_OFFSET                           5
#define DxF0x60_MaxPayloadSize_WIDTH                            3
#define DxF0x60_MaxPayloadSize_MASK                             0xe0
#define DxF0x60_ExtendedTagEn_OFFSET                            8
#define DxF0x60_ExtendedTagEn_WIDTH                             1
#define DxF0x60_ExtendedTagEn_MASK                              0x100
#define DxF0x60_PhantomFuncEn_OFFSET                            9
#define DxF0x60_PhantomFuncEn_WIDTH                             1
#define DxF0x60_PhantomFuncEn_MASK                              0x200
#define DxF0x60_AuxPowerPmEn_OFFSET                             10
#define DxF0x60_AuxPowerPmEn_WIDTH                              1
#define DxF0x60_AuxPowerPmEn_MASK                               0x400
#define DxF0x60_NoSnoopEnable_OFFSET                            11
#define DxF0x60_NoSnoopEnable_WIDTH                             1
#define DxF0x60_NoSnoopEnable_MASK                              0x800
#define DxF0x60_MaxRequestSize_OFFSET                           12
#define DxF0x60_MaxRequestSize_WIDTH                            3
#define DxF0x60_MaxRequestSize_MASK                             0x7000
#define DxF0x60_BridgeCfgRetryEn_OFFSET                         15
#define DxF0x60_BridgeCfgRetryEn_WIDTH                          1
#define DxF0x60_BridgeCfgRetryEn_MASK                           0x8000
#define DxF0x60_CorrErr_OFFSET                                  16
#define DxF0x60_CorrErr_WIDTH                                   1
#define DxF0x60_CorrErr_MASK                                    0x10000
#define DxF0x60_NonFatalErr_OFFSET                              17
#define DxF0x60_NonFatalErr_WIDTH                               1
#define DxF0x60_NonFatalErr_MASK                                0x20000
#define DxF0x60_FatalErr_OFFSET                                 18
#define DxF0x60_FatalErr_WIDTH                                  1
#define DxF0x60_FatalErr_MASK                                   0x40000
#define DxF0x60_UsrDetected_OFFSET                              19
#define DxF0x60_UsrDetected_WIDTH                               1
#define DxF0x60_UsrDetected_MASK                                0x80000
#define DxF0x60_AuxPwr_OFFSET                                   20
#define DxF0x60_AuxPwr_WIDTH                                    1
#define DxF0x60_AuxPwr_MASK                                     0x100000
#define DxF0x60_TransactionsPending_OFFSET                      21
#define DxF0x60_TransactionsPending_WIDTH                       1
#define DxF0x60_TransactionsPending_MASK                        0x200000
#define DxF0x60_Reserved_31_22_OFFSET                           22
#define DxF0x60_Reserved_31_22_WIDTH                            10
#define DxF0x60_Reserved_31_22_MASK                             0xffc00000

/// DxF0x60
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                CorrErrEn:1 ; ///<
    UINT32                                            NonFatalErrEn:1 ; ///<
    UINT32                                               FatalErrEn:1 ; ///<
    UINT32                                              UsrReportEn:1 ; ///<
    UINT32                                             RelaxedOrdEn:1 ; ///<
    UINT32                                           MaxPayloadSize:3 ; ///<
    UINT32                                            ExtendedTagEn:1 ; ///<
    UINT32                                            PhantomFuncEn:1 ; ///<
    UINT32                                             AuxPowerPmEn:1 ; ///<
    UINT32                                            NoSnoopEnable:1 ; ///<
    UINT32                                           MaxRequestSize:3 ; ///<
    UINT32                                         BridgeCfgRetryEn:1 ; ///<
    UINT32                                                  CorrErr:1 ; ///< Errors are logged in this register even if error reporting is disabled.
    UINT32                                              NonFatalErr:1 ; ///<T1=The port detected a non-fatal error. Errors are logged in this register even if error reporting is disabled.
    UINT32                                                 FatalErr:1 ; ///< Errors are logged in this register even if error reporting is disabled.
    UINT32                                              UsrDetected:1 ; ///< Errors are logged in this register even if error reporting is disabled.
    UINT32                                                   AuxPwr:1 ; ///<
    UINT32                                      TransactionsPending:1 ; ///<
    UINT32                                           Reserved_31_22:10; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x60_STRUCT;

// **** DxF0x64 Register Definition ****
// Address
#define DxF0x64_ADDRESS                                         0x64

// Type
#define DxF0x64_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x64_LinkSpeed_OFFSET                                0
#define DxF0x64_LinkSpeed_WIDTH                                 4
#define DxF0x64_LinkSpeed_MASK                                  0xf
#define DxF0x64_LinkWidth_OFFSET                                4
#define DxF0x64_LinkWidth_WIDTH                                 6
#define DxF0x64_LinkWidth_MASK                                  0x3f0
#define DxF0x64_PMSupport_OFFSET                                10
#define DxF0x64_PMSupport_WIDTH                                 2
#define DxF0x64_PMSupport_MASK                                  0xc00
#define DxF0x64_L0sExitLatency_OFFSET                           12
#define DxF0x64_L0sExitLatency_WIDTH                            3
#define DxF0x64_L0sExitLatency_MASK                             0x7000
#define DxF0x64_L1ExitLatency_OFFSET                            15
#define DxF0x64_L1ExitLatency_WIDTH                             3
#define DxF0x64_L1ExitLatency_MASK                              0x38000
#define DxF0x64_ClockPowerManagement_OFFSET                     18
#define DxF0x64_ClockPowerManagement_WIDTH                      1
#define DxF0x64_ClockPowerManagement_MASK                       0x40000
#define DxF0x64_Reserved_19_19_OFFSET                           19
#define DxF0x64_Reserved_19_19_WIDTH                            1
#define DxF0x64_Reserved_19_19_MASK                             0x80000
#define DxF0x64_DlActiveReportingCapable_OFFSET                 20
#define DxF0x64_DlActiveReportingCapable_WIDTH                  1
#define DxF0x64_DlActiveReportingCapable_MASK                   0x100000
#define DxF0x64_LinkBWNotificationCap_OFFSET                    21
#define DxF0x64_LinkBWNotificationCap_WIDTH                     1
#define DxF0x64_LinkBWNotificationCap_MASK                      0x200000
#define DxF0x64_Reserved_23_22_OFFSET                           22
#define DxF0x64_Reserved_23_22_WIDTH                            2
#define DxF0x64_Reserved_23_22_MASK                             0xc00000
#define DxF0x64_PortNumber_OFFSET                               24
#define DxF0x64_PortNumber_WIDTH                                8
#define DxF0x64_PortNumber_MASK                                 0xff000000

/// DxF0x64
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                LinkSpeed:4 ; ///<
    UINT32                                                LinkWidth:6 ; ///<
    UINT32                                                PMSupport:2 ; ///<
    UINT32                                           L0sExitLatency:3 ; ///<
    UINT32                                            L1ExitLatency:3 ; ///<
    UINT32                                     ClockPowerManagement:1 ; ///<
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                 DlActiveReportingCapable:1 ; ///<
    UINT32                                    LinkBWNotificationCap:1 ; ///< This bit is controlled by ~D[8:4]F0xE4_xB1[LcLinkBwNotificationDis].
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                               PortNumber:8 ; ///< This field indicates the port number for the given IO link.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x64_STRUCT;

// **** DxF0x68 Register Definition ****
// Address
#define DxF0x68_ADDRESS                                         0x68

// Type
#define DxF0x68_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x68_PmControl_OFFSET                                0
#define DxF0x68_PmControl_WIDTH                                 2
#define DxF0x68_PmControl_MASK                                  0x3
#define DxF0x68_Reserved_2_2_OFFSET                             2
#define DxF0x68_Reserved_2_2_WIDTH                              1
#define DxF0x68_Reserved_2_2_MASK                               0x4
#define DxF0x68_ReadCplBoundary_OFFSET                          3
#define DxF0x68_ReadCplBoundary_WIDTH                           1
#define DxF0x68_ReadCplBoundary_MASK                            0x8
#define DxF0x68_LinkDis_OFFSET                                  4
#define DxF0x68_LinkDis_WIDTH                                   1
#define DxF0x68_LinkDis_MASK                                    0x10
#define DxF0x68_RetrainLink_OFFSET                              5
#define DxF0x68_RetrainLink_WIDTH                               1
#define DxF0x68_RetrainLink_MASK                                0x20
#define DxF0x68_CommonClockCfg_OFFSET                           6
#define DxF0x68_CommonClockCfg_WIDTH                            1
#define DxF0x68_CommonClockCfg_MASK                             0x40
#define DxF0x68_ExtendedSync_OFFSET                             7
#define DxF0x68_ExtendedSync_WIDTH                              1
#define DxF0x68_ExtendedSync_MASK                               0x80
#define DxF0x68_ClockPowerManagementEn_OFFSET                   8
#define DxF0x68_ClockPowerManagementEn_WIDTH                    1
#define DxF0x68_ClockPowerManagementEn_MASK                     0x100
#define DxF0x68_HWAutonomousWidthDisable_OFFSET                 9
#define DxF0x68_HWAutonomousWidthDisable_WIDTH                  1
#define DxF0x68_HWAutonomousWidthDisable_MASK                   0x200
#define DxF0x68_LinkBWManagementEn_OFFSET                       10
#define DxF0x68_LinkBWManagementEn_WIDTH                        1
#define DxF0x68_LinkBWManagementEn_MASK                         0x400
#define DxF0x68_LinkAutonomousBWIntEn_OFFSET                    11
#define DxF0x68_LinkAutonomousBWIntEn_WIDTH                     1
#define DxF0x68_LinkAutonomousBWIntEn_MASK                      0x800
#define DxF0x68_Reserved_15_12_OFFSET                           12
#define DxF0x68_Reserved_15_12_WIDTH                            4
#define DxF0x68_Reserved_15_12_MASK                             0xf000
#define DxF0x68_LinkSpeed_OFFSET                                16
#define DxF0x68_LinkSpeed_WIDTH                                 4
#define DxF0x68_LinkSpeed_MASK                                  0xf0000
#define DxF0x68_NegotiatedLinkWidth_OFFSET                      20
#define DxF0x68_NegotiatedLinkWidth_WIDTH                       6
#define DxF0x68_NegotiatedLinkWidth_MASK                        0x3f00000
#define DxF0x68_Reserved_26_26_OFFSET                           26
#define DxF0x68_Reserved_26_26_WIDTH                            1
#define DxF0x68_Reserved_26_26_MASK                             0x4000000
#define DxF0x68_LinkTraining_OFFSET                             27
#define DxF0x68_LinkTraining_WIDTH                              1
#define DxF0x68_LinkTraining_MASK                               0x8000000
#define DxF0x68_SlotClockCfg_OFFSET                             28
#define DxF0x68_SlotClockCfg_WIDTH                              1
#define DxF0x68_SlotClockCfg_MASK                               0x10000000
#define DxF0x68_DlActive_OFFSET                                 29
#define DxF0x68_DlActive_WIDTH                                  1
#define DxF0x68_DlActive_MASK                                   0x20000000
#define DxF0x68_LinkBWManagementStatus_OFFSET                   30
#define DxF0x68_LinkBWManagementStatus_WIDTH                    1
#define DxF0x68_LinkBWManagementStatus_MASK                     0x40000000
#define DxF0x68_LinkAutonomousBWStatus_OFFSET                   31
#define DxF0x68_LinkAutonomousBWStatus_WIDTH                    1
#define DxF0x68_LinkAutonomousBWStatus_MASK                     0x80000000

/// DxF0x68
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                PmControl:2 ; ///<This field controls the level of ASPM supported on the given IO link.
    UINT32                                             Reserved_2_2:1 ; ///<
    UINT32                                          ReadCplBoundary:1 ; ///<
    UINT32                                                  LinkDis:1 ; ///< Writes to this bit are immediately reflected in the value read from the bit, regardless of actual link state.
    UINT32                                              RetrainLink:1 ; ///< Reads of this bit always return 0.
    UINT32                                           CommonClockCfg:1 ; ///<
    UINT32                                             ExtendedSync:1 ; ///<
    UINT32                                   ClockPowerManagementEn:1 ; ///<
    UINT32                                 HWAutonomousWidthDisable:1 ; ///<
    UINT32                                       LinkBWManagementEn:1 ; ///<
    UINT32                                    LinkAutonomousBWIntEn:1 ; ///<
    UINT32                                           Reserved_15_12:4 ; ///<
    UINT32                                                LinkSpeed:4 ; ///<
    UINT32                                      NegotiatedLinkWidth:6 ; ///<This field indicates the negotiated width of the given PCI Express link.
    UINT32                                           Reserved_26_26:1 ; ///<
    UINT32                                             LinkTraining:1 ; ///<This read-only bit indicates that the physical layer link training state machine is in the configuration or recovery state, or that 1b was written to the RetrainLink bit but link training has not yet begun. Hardware clears this bit when the link training state machine exits the configuration/recovery state.
    UINT32                                             SlotClockCfg:1 ; ///<
    UINT32                                                 DlActive:1 ; ///<This bit indicates the status of the data link control and management state machine.
    UINT32                                   LinkBWManagementStatus:1 ; ///<
    UINT32                                   LinkAutonomousBWStatus:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x68_STRUCT;

// **** DxF0x6C Register Definition ****
// Address
#define DxF0x6C_ADDRESS                                         0x6c

// Type
#define DxF0x6C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x6C_AttnButtonPresent_OFFSET                        0
#define DxF0x6C_AttnButtonPresent_WIDTH                         1
#define DxF0x6C_AttnButtonPresent_MASK                          0x1
#define DxF0x6C_PwrControllerPresent_OFFSET                     1
#define DxF0x6C_PwrControllerPresent_WIDTH                      1
#define DxF0x6C_PwrControllerPresent_MASK                       0x2
#define DxF0x6C_MrlSensorPresent_OFFSET                         2
#define DxF0x6C_MrlSensorPresent_WIDTH                          1
#define DxF0x6C_MrlSensorPresent_MASK                           0x4
#define DxF0x6C_AttnIndicatorPresent_OFFSET                     3
#define DxF0x6C_AttnIndicatorPresent_WIDTH                      1
#define DxF0x6C_AttnIndicatorPresent_MASK                       0x8
#define DxF0x6C_PwrIndicatorPresent_OFFSET                      4
#define DxF0x6C_PwrIndicatorPresent_WIDTH                       1
#define DxF0x6C_PwrIndicatorPresent_MASK                        0x10
#define DxF0x6C_HotplugSurprise_OFFSET                          5
#define DxF0x6C_HotplugSurprise_WIDTH                           1
#define DxF0x6C_HotplugSurprise_MASK                            0x20
#define DxF0x6C_HotplugCapable_OFFSET                           6
#define DxF0x6C_HotplugCapable_WIDTH                            1
#define DxF0x6C_HotplugCapable_MASK                             0x40
#define DxF0x6C_SlotPwrLimitValue_OFFSET                        7
#define DxF0x6C_SlotPwrLimitValue_WIDTH                         8
#define DxF0x6C_SlotPwrLimitValue_MASK                          0x7f80
#define DxF0x6C_SlotPwrLimitScale_OFFSET                        15
#define DxF0x6C_SlotPwrLimitScale_WIDTH                         2
#define DxF0x6C_SlotPwrLimitScale_MASK                          0x18000
#define DxF0x6C_ElecMechIlPresent_OFFSET                        17
#define DxF0x6C_ElecMechIlPresent_WIDTH                         1
#define DxF0x6C_ElecMechIlPresent_MASK                          0x20000
#define DxF0x6C_NoCmdCplSupport_OFFSET                          18
#define DxF0x6C_NoCmdCplSupport_WIDTH                           1
#define DxF0x6C_NoCmdCplSupport_MASK                            0x40000
#define DxF0x6C_PhysicalSlotNumber_OFFSET                       19
#define DxF0x6C_PhysicalSlotNumber_WIDTH                        13
#define DxF0x6C_PhysicalSlotNumber_MASK                         0xfff80000

/// DxF0x6C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        AttnButtonPresent:1 ; ///<
    UINT32                                     PwrControllerPresent:1 ; ///<
    UINT32                                         MrlSensorPresent:1 ; ///<
    UINT32                                     AttnIndicatorPresent:1 ; ///<
    UINT32                                      PwrIndicatorPresent:1 ; ///<
    UINT32                                          HotplugSurprise:1 ; ///<
    UINT32                                           HotplugCapable:1 ; ///<
    UINT32                                        SlotPwrLimitValue:8 ; ///< In combination with the SlotPwrLimitScale value, specifies the upper limit on power supplied by slot. Power limit (in Watts) calculated by multiplying the value in this field by the value in the SlotPwrLimitScale field.
    UINT32                                        SlotPwrLimitScale:2 ; ///< Specifies the scale used for the SlotPwrLimitValue. Range of Values:
    UINT32                                        ElecMechIlPresent:1 ; ///<
    UINT32                                          NoCmdCplSupport:1 ; ///<
    UINT32                                       PhysicalSlotNumber:13; ///< This field indicates the physical slot number attached to this port. This field is set to a value that assigns a slot number that is unique within the chassis, regardless of the form factor associated with the slot. This field must be initialized to 0 for ports connected to devices that are on the system board.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x6C_STRUCT;

// **** DxF0x70 Register Definition ****
// Address
#define DxF0x70_ADDRESS                                         0x70

// Type
#define DxF0x70_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x70_AttnButtonPressedEn_OFFSET                      0
#define DxF0x70_AttnButtonPressedEn_WIDTH                       1
#define DxF0x70_AttnButtonPressedEn_MASK                        0x1
#define DxF0x70_PwrFaultDetectedEn_OFFSET                       1
#define DxF0x70_PwrFaultDetectedEn_WIDTH                        1
#define DxF0x70_PwrFaultDetectedEn_MASK                         0x2
#define DxF0x70_MrlSensorChangedEn_OFFSET                       2
#define DxF0x70_MrlSensorChangedEn_WIDTH                        1
#define DxF0x70_MrlSensorChangedEn_MASK                         0x4
#define DxF0x70_PresenceDetectChangedEn_OFFSET                  3
#define DxF0x70_PresenceDetectChangedEn_WIDTH                   1
#define DxF0x70_PresenceDetectChangedEn_MASK                    0x8
#define DxF0x70_CmdCplIntrEn_OFFSET                             4
#define DxF0x70_CmdCplIntrEn_WIDTH                              1
#define DxF0x70_CmdCplIntrEn_MASK                               0x10
#define DxF0x70_HotplugIntrEn_OFFSET                            5
#define DxF0x70_HotplugIntrEn_WIDTH                             1
#define DxF0x70_HotplugIntrEn_MASK                              0x20
#define DxF0x70_AttnIndicatorControl_OFFSET                     6
#define DxF0x70_AttnIndicatorControl_WIDTH                      2
#define DxF0x70_AttnIndicatorControl_MASK                       0xc0
#define DxF0x70_PwrIndicatorCntl_OFFSET                         8
#define DxF0x70_PwrIndicatorCntl_WIDTH                          2
#define DxF0x70_PwrIndicatorCntl_MASK                           0x300
#define DxF0x70_PwrControllerCntl_OFFSET                        10
#define DxF0x70_PwrControllerCntl_WIDTH                         1
#define DxF0x70_PwrControllerCntl_MASK                          0x400
#define DxF0x70_ElecMechIlCntl_OFFSET                           11
#define DxF0x70_ElecMechIlCntl_WIDTH                            1
#define DxF0x70_ElecMechIlCntl_MASK                             0x800
#define DxF0x70_DlStateChangedEn_OFFSET                         12
#define DxF0x70_DlStateChangedEn_WIDTH                          1
#define DxF0x70_DlStateChangedEn_MASK                           0x1000
#define DxF0x70_Reserved_15_13_OFFSET                           13
#define DxF0x70_Reserved_15_13_WIDTH                            3
#define DxF0x70_Reserved_15_13_MASK                             0xe000
#define DxF0x70_AttnButtonPressed_OFFSET                        16
#define DxF0x70_AttnButtonPressed_WIDTH                         1
#define DxF0x70_AttnButtonPressed_MASK                          0x10000
#define DxF0x70_PwrFaultDetected_OFFSET                         17
#define DxF0x70_PwrFaultDetected_WIDTH                          1
#define DxF0x70_PwrFaultDetected_MASK                           0x20000
#define DxF0x70_MrlSensorChanged_OFFSET                         18
#define DxF0x70_MrlSensorChanged_WIDTH                          1
#define DxF0x70_MrlSensorChanged_MASK                           0x40000
#define DxF0x70_PresenceDetectChanged_OFFSET                    19
#define DxF0x70_PresenceDetectChanged_WIDTH                     1
#define DxF0x70_PresenceDetectChanged_MASK                      0x80000
#define DxF0x70_CmdCpl_OFFSET                                   20
#define DxF0x70_CmdCpl_WIDTH                                    1
#define DxF0x70_CmdCpl_MASK                                     0x100000
#define DxF0x70_MrlSensorState_OFFSET                           21
#define DxF0x70_MrlSensorState_WIDTH                            1
#define DxF0x70_MrlSensorState_MASK                             0x200000
#define DxF0x70_PresenceDetectState_OFFSET                      22
#define DxF0x70_PresenceDetectState_WIDTH                       1
#define DxF0x70_PresenceDetectState_MASK                        0x400000
#define DxF0x70_ElecMechIlSts_OFFSET                            23
#define DxF0x70_ElecMechIlSts_WIDTH                             1
#define DxF0x70_ElecMechIlSts_MASK                              0x800000
#define DxF0x70_DlStateChanged_OFFSET                           24
#define DxF0x70_DlStateChanged_WIDTH                            1
#define DxF0x70_DlStateChanged_MASK                             0x1000000
#define DxF0x70_Reserved_31_25_OFFSET                           25
#define DxF0x70_Reserved_31_25_WIDTH                            7
#define DxF0x70_Reserved_31_25_MASK                             0xfe000000

/// DxF0x70
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                      AttnButtonPressedEn:1 ; ///<
    UINT32                                       PwrFaultDetectedEn:1 ; ///<
    UINT32                                       MrlSensorChangedEn:1 ; ///<
    UINT32                                  PresenceDetectChangedEn:1 ; ///<
    UINT32                                             CmdCplIntrEn:1 ; ///<
    UINT32                                            HotplugIntrEn:1 ; ///<
    UINT32                                     AttnIndicatorControl:2 ; ///< Writes to this field set the attention indicator. Reads from this register return the current state of the attention indicator. BOZO: Check this.
    UINT32                                         PwrIndicatorCntl:2 ; ///< Writes to this field set the power indicator. Reads from this register return the current state of the power indicator. BOZO: Check this.
    UINT32                                        PwrControllerCntl:1 ; ///< Writes to this field set the power state of the slot to predefined encodings. Reads from this register return the current state of the power applied to the slot. BOZO: Need more information about what writes to this field actually do.
    UINT32                                           ElecMechIlCntl:1 ; ///<
    UINT32                                         DlStateChangedEn:1 ; ///<
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                        AttnButtonPressed:1 ; ///<
    UINT32                                         PwrFaultDetected:1 ; ///<
    UINT32                                         MrlSensorChanged:1 ; ///<
    UINT32                                    PresenceDetectChanged:1 ; ///<
    UINT32                                                   CmdCpl:1 ; ///<
    UINT32                                           MrlSensorState:1 ; ///<The current state of the manual retention latch sensor. BOZO: What does a 1 or 0 represent?
    UINT32                                      PresenceDetectState:1 ; ///<This bit indicates the presence of an adapter in the slot based on the physical layer in-band presence detect mechanism. The in-band presence detect mechanism requires that power be applied to an adapter for its presence to be detected. For root ports not connected to slots (D[8:4]F0x58[SlotImplemented]=0b), this bit returns always 1.
    UINT32                                            ElecMechIlSts:1 ; ///<
    UINT32                                           DlStateChanged:1 ; ///<This bit is set when the value reported in the D[8:4]F0x60[DlActive] is changed. In response to a data link layer state changed event, software must read D[8:4]F0x60[DlActive] to determine if the link is active before initiating configuration cycles to the hot plugged device.
    UINT32                                           Reserved_31_25:7 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x70_STRUCT;

// **** DxF0x74 Register Definition ****
// Address
#define DxF0x74_ADDRESS                                         0x74

// Type
#define DxF0x74_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x74_SerrOnCorrErrEn_OFFSET                          0
#define DxF0x74_SerrOnCorrErrEn_WIDTH                           1
#define DxF0x74_SerrOnCorrErrEn_MASK                            0x1
#define DxF0x74_SerrOnNonFatalErrEn_OFFSET                      1
#define DxF0x74_SerrOnNonFatalErrEn_WIDTH                       1
#define DxF0x74_SerrOnNonFatalErrEn_MASK                        0x2
#define DxF0x74_SerrOnFatalErrEn_OFFSET                         2
#define DxF0x74_SerrOnFatalErrEn_WIDTH                          1
#define DxF0x74_SerrOnFatalErrEn_MASK                           0x4
#define DxF0x74_PmIntEn_OFFSET                                  3
#define DxF0x74_PmIntEn_WIDTH                                   1
#define DxF0x74_PmIntEn_MASK                                    0x8
#define DxF0x74_CrsSoftVisibilityEn_OFFSET                      4
#define DxF0x74_CrsSoftVisibilityEn_WIDTH                       1
#define DxF0x74_CrsSoftVisibilityEn_MASK                        0x10
#define DxF0x74_Reserved_15_5_OFFSET                            5
#define DxF0x74_Reserved_15_5_WIDTH                             11
#define DxF0x74_Reserved_15_5_MASK                              0xffe0
#define DxF0x74_CrsSoftVisibility_OFFSET                        16
#define DxF0x74_CrsSoftVisibility_WIDTH                         1
#define DxF0x74_CrsSoftVisibility_MASK                          0x10000
#define DxF0x74_Reserved_31_17_OFFSET                           17
#define DxF0x74_Reserved_31_17_WIDTH                            15
#define DxF0x74_Reserved_31_17_MASK                             0xfffe0000

/// DxF0x74
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          SerrOnCorrErrEn:1 ; ///< See 2.12.4.7 [SERR Message].
    UINT32                                      SerrOnNonFatalErrEn:1 ; ///< See 2.12.4.7 [SERR Message].
    UINT32                                         SerrOnFatalErrEn:1 ; ///< See 2.12.4.7 [SERR Message].
    UINT32                                                  PmIntEn:1 ; ///< A PME interrupt is also generated if D[8:4]F0x78[PmeStatus]=1 and this bit is set by software.
    UINT32                                      CrsSoftVisibilityEn:1 ; ///<
    UINT32                                            Reserved_15_5:11; ///<
    UINT32                                        CrsSoftVisibility:1 ; ///<
    UINT32                                           Reserved_31_17:15; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x74_STRUCT;

// **** DxF0x78 Register Definition ****
// Address
#define DxF0x78_ADDRESS                                         0x78

// Type
#define DxF0x78_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x78_PmeRequestorId_OFFSET                           0
#define DxF0x78_PmeRequestorId_WIDTH                            16
#define DxF0x78_PmeRequestorId_MASK                             0xffff
#define DxF0x78_PmeStatus_OFFSET                                16
#define DxF0x78_PmeStatus_WIDTH                                 1
#define DxF0x78_PmeStatus_MASK                                  0x10000
#define DxF0x78_PmePending_OFFSET                               17
#define DxF0x78_PmePending_WIDTH                                1
#define DxF0x78_PmePending_MASK                                 0x20000
#define DxF0x78_Reserved_31_18_OFFSET                           18
#define DxF0x78_Reserved_31_18_WIDTH                            14
#define DxF0x78_Reserved_31_18_MASK                             0xfffc0000

/// DxF0x78
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           PmeRequestorId:16; ///<This field indicates the PCI requestor ID of the last PME requestor.
    UINT32                                                PmeStatus:1 ; ///<This bit indicates that PME was asserted by the requestor ID indicated in the PmeRequestorID field. Subsequent PMEs are kept pending until PmeStatus is cleared by writing a 1.
    UINT32                                               PmePending:1 ; ///<This bit indicates that another PME is pending when PmeStatus is set. When PmeStatus is cleared by software; the PME is delivered by hardware by setting the PmeStatus bit again and updating the requestor ID appropriately. PmePending is cleared by hardware if no more PMEs are pending.
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x78_STRUCT;

// **** DxF0x7C Register Definition ****
// Address
#define DxF0x7C_ADDRESS                                         0x7c

// Type
#define DxF0x7C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x7C_CplTimeoutRangeSup_OFFSET                       0
#define DxF0x7C_CplTimeoutRangeSup_WIDTH                        4
#define DxF0x7C_CplTimeoutRangeSup_MASK                         0xf
#define DxF0x7C_CplTimeoutDisSup_OFFSET                         4
#define DxF0x7C_CplTimeoutDisSup_WIDTH                          1
#define DxF0x7C_CplTimeoutDisSup_MASK                           0x10
#define DxF0x7C_AriForwardingSupported_OFFSET                   5
#define DxF0x7C_AriForwardingSupported_WIDTH                    1
#define DxF0x7C_AriForwardingSupported_MASK                     0x20
#define DxF0x7C_Reserved_31_6_OFFSET                            6
#define DxF0x7C_Reserved_31_6_WIDTH                             26
#define DxF0x7C_Reserved_31_6_MASK                              0xffffffc0

/// DxF0x7C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       CplTimeoutRangeSup:4 ; ///<
    UINT32                                         CplTimeoutDisSup:1 ; ///<
    UINT32                                   AriForwardingSupported:1 ; ///<Program D0F0xE4_x0130_0000[StrapBifAriEn]=1 and D0F0xE4_x0101_00C1[StrapGen2Compliance]=1 to enable this feature.
    UINT32                                            Reserved_31_6:26; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x7C_STRUCT;

// **** DxF0x80 Register Definition ****
// Address
#define DxF0x80_ADDRESS                                         0x80

// Type
#define DxF0x80_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x80_CplTimeoutValue_OFFSET                          0
#define DxF0x80_CplTimeoutValue_WIDTH                           4
#define DxF0x80_CplTimeoutValue_MASK                            0xf
#define DxF0x80_CplTimeoutDis_OFFSET                            4
#define DxF0x80_CplTimeoutDis_WIDTH                             1
#define DxF0x80_CplTimeoutDis_MASK                              0x10
#define DxF0x80_AriForwardingEn_OFFSET                          5
#define DxF0x80_AriForwardingEn_WIDTH                           1
#define DxF0x80_AriForwardingEn_MASK                            0x20
#define DxF0x80_Reserved_31_6_OFFSET                            6
#define DxF0x80_Reserved_31_6_WIDTH                             26
#define DxF0x80_Reserved_31_6_MASK                              0xffffffc0

/// DxF0x80
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          CplTimeoutValue:4 ; ///<Must be less than the WDT timeout specified by D18F3x44[WDTBaseSel, WDTCntSel].
    UINT32                                            CplTimeoutDis:1 ; ///<
    UINT32                                          AriForwardingEn:1 ; ///<
    UINT32                                            Reserved_31_6:26; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x80_STRUCT;

// **** DxF0x84 Register Definition ****
// Address
#define DxF0x84_ADDRESS                                         0x84

// Type
#define DxF0x84_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x84_Reserved_31_0_OFFSET                            0
#define DxF0x84_Reserved_31_0_WIDTH                             32
#define DxF0x84_Reserved_31_0_MASK                              0xffffffff

/// DxF0x84
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_31_0:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x84_STRUCT;

// **** DxF0x88 Register Definition ****
// Address
#define DxF0x88_ADDRESS                                         0x88

// Type
#define DxF0x88_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x88_TargetLinkSpeed_OFFSET                          0
#define DxF0x88_TargetLinkSpeed_WIDTH                           4
#define DxF0x88_TargetLinkSpeed_MASK                            0xf
#define DxF0x88_EnterCompliance_OFFSET                          4
#define DxF0x88_EnterCompliance_WIDTH                           1
#define DxF0x88_EnterCompliance_MASK                            0x10
#define DxF0x88_HwAutonomousSpeedDisable_OFFSET                 5
#define DxF0x88_HwAutonomousSpeedDisable_WIDTH                  1
#define DxF0x88_HwAutonomousSpeedDisable_MASK                   0x20
#define DxF0x88_SelectableDeemphasis_OFFSET                     6
#define DxF0x88_SelectableDeemphasis_WIDTH                      1
#define DxF0x88_SelectableDeemphasis_MASK                       0x40
#define DxF0x88_XmitMargin_OFFSET                               7
#define DxF0x88_XmitMargin_WIDTH                                3
#define DxF0x88_XmitMargin_MASK                                 0x380
#define DxF0x88_EnterModCompliance_OFFSET                       10
#define DxF0x88_EnterModCompliance_WIDTH                        1
#define DxF0x88_EnterModCompliance_MASK                         0x400
#define DxF0x88_ComplianceSOS_OFFSET                            11
#define DxF0x88_ComplianceSOS_WIDTH                             1
#define DxF0x88_ComplianceSOS_MASK                              0x800
#define DxF0x88_ComplianceDeemphasis_OFFSET                     12
#define DxF0x88_ComplianceDeemphasis_WIDTH                      1
#define DxF0x88_ComplianceDeemphasis_MASK                       0x1000
#define DxF0x88_Reserved_15_13_OFFSET                           13
#define DxF0x88_Reserved_15_13_WIDTH                            3
#define DxF0x88_Reserved_15_13_MASK                             0xe000
#define DxF0x88_CurDeemphasisLevel_OFFSET                       16
#define DxF0x88_CurDeemphasisLevel_WIDTH                        1
#define DxF0x88_CurDeemphasisLevel_MASK                         0x10000
#define DxF0x88_Reserved_31_17_OFFSET                           17
#define DxF0x88_Reserved_31_17_WIDTH                            15
#define DxF0x88_Reserved_31_17_MASK                             0xfffe0000

/// DxF0x88
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          TargetLinkSpeed:4 ; ///<This field defines the upper limit of the link operational speed. When D[8:4]F0xE4_xA4[LcGen2EnStrap]=1, this field can only be programmed to 1h or 2h. When D[8:4]F0xE4_xA4[LcGen2EnStrap]=0, this field can only be programmed to 1h. If this field has not been written since reset, hardware will change this field to {00b, D[8:4]F0xE4_xA4[LcGen2EnStrap], ~D[8:4]F0xE4_xA4[LcGen2EnStrap]} when D[8:4]F0xE4_xA4[LcGen2EnStrap] changes.
    UINT32                                          EnterCompliance:1 ; ///<
    UINT32                                 HwAutonomousSpeedDisable:1 ; ///<
    UINT32                                     SelectableDeemphasis:1 ; ///<
    UINT32                                               XmitMargin:3 ; ///<This field controls the voltage level (without de-emphasis) at the transmitter pins. Software should leave this field in its default state.
    UINT32                                       EnterModCompliance:1 ; ///< Software should leave this field in its default state.
    UINT32                                            ComplianceSOS:1 ; ///<
    UINT32                                     ComplianceDeemphasis:1 ; ///<This bit defines the compliance de-emphasis level when EnterCompliance is set. Software should leave this field in its default state.5 dB. 0=-6 dB
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                       CurDeemphasisLevel:1 ; ///<5 dB. 0=-6 dB
    UINT32                                           Reserved_31_17:15; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x88_STRUCT;

// **** DxF0x8C Register Definition ****
// Address
#define DxF0x8C_ADDRESS                                         0x8c

// Type
#define DxF0x8C_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x8C_Reserved_31_0_OFFSET                            0
#define DxF0x8C_Reserved_31_0_WIDTH                             32
#define DxF0x8C_Reserved_31_0_MASK                              0xffffffff

/// DxF0x8C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_31_0:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x8C_STRUCT;

// **** DxF0x90 Register Definition ****
// Address
#define DxF0x90_ADDRESS                                         0x90

// Type
#define DxF0x90_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0x90_Reserved_31_0_OFFSET                            0
#define DxF0x90_Reserved_31_0_WIDTH                             32
#define DxF0x90_Reserved_31_0_MASK                              0xffffffff

/// DxF0x90
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_31_0:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x90_STRUCT;

// **** DxF0xA0 Register Definition ****
// Address
#define DxF0xA0_ADDRESS                                         0xa0

// Type
#define DxF0xA0_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xA0_CapID_OFFSET                                    0
#define DxF0xA0_CapID_WIDTH                                     8
#define DxF0xA0_CapID_MASK                                      0xff
#define DxF0xA0_NextPtr_OFFSET                                  8
#define DxF0xA0_NextPtr_WIDTH                                   8
#define DxF0xA0_NextPtr_MASK                                    0xff00
#define DxF0xA0_MsiEn_OFFSET                                    16
#define DxF0xA0_MsiEn_WIDTH                                     1
#define DxF0xA0_MsiEn_MASK                                      0x10000
#define DxF0xA0_MsiMultiCap_OFFSET                              17
#define DxF0xA0_MsiMultiCap_WIDTH                               3
#define DxF0xA0_MsiMultiCap_MASK                                0xe0000
#define DxF0xA0_MsiMultiEn_OFFSET                               20
#define DxF0xA0_MsiMultiEn_WIDTH                                3
#define DxF0xA0_MsiMultiEn_MASK                                 0x700000
#define DxF0xA0_Msi64bit_OFFSET                                 23
#define DxF0xA0_Msi64bit_WIDTH                                  1
#define DxF0xA0_Msi64bit_MASK                                   0x800000
#define DxF0xA0_Reserved_31_24_OFFSET                           24
#define DxF0xA0_Reserved_31_24_WIDTH                            8
#define DxF0xA0_Reserved_31_24_MASK                             0xff000000

/// DxF0xA0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:8 ; ///<
    UINT32                                                  NextPtr:8 ; ///<The address of the next capability structure, or zero if this the end of the linked list of capability structures.
    UINT32                                                    MsiEn:1 ; ///<
    UINT32                                              MsiMultiCap:3 ; ///<
    UINT32                                               MsiMultiEn:3 ; ///<Software writes to this field to indicate the number of allocated vectors (equal to or less than the number of requested vectors). When MSI is enabled, a function is allocated at least 1 vector.
    UINT32                                                 Msi64bit:1 ; ///<
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xA0_STRUCT;

// **** DxF0xA4 Register Definition ****
// Address
#define DxF0xA4_ADDRESS                                         0xa4

// Type
#define DxF0xA4_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xA4_Reserved_1_0_OFFSET                             0
#define DxF0xA4_Reserved_1_0_WIDTH                              2
#define DxF0xA4_Reserved_1_0_MASK                               0x3
#define DxF0xA4_MsiMsgAddrLo_OFFSET                             2
#define DxF0xA4_MsiMsgAddrLo_WIDTH                              30
#define DxF0xA4_MsiMsgAddrLo_MASK                               0xfffffffc

/// DxF0xA4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_1_0:2 ; ///<
    UINT32                                             MsiMsgAddrLo:30; ///< This register specifies the doubleword aligned address for the MSI memory write transaction.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xA4_STRUCT;

// **** DxF0xA8 Register Definition ****
// Address
#define DxF0xA8_ADDRESS                                         0xa8

// Type
#define DxF0xA8_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xA8_MsiData_OFFSET                                  0
#define DxF0xA8_MsiData_WIDTH                                   16
#define DxF0xA8_MsiData_MASK                                    0xffff
#define DxF0xA8_Reserved_31_16_OFFSET                           16
#define DxF0xA8_Reserved_31_16_WIDTH                            16
#define DxF0xA8_Reserved_31_16_MASK                             0xffff0000

/// DxF0xA8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  MsiData:16; ///< This register specifies the lower 16 bits of data for the MSI memory write transaction. The upper 16 bits are always 0.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xA8_STRUCT;

// **** DxF0xAC Register Definition ****
// Address
#define DxF0xAC_ADDRESS                                         0xac

// Type
#define DxF0xAC_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xAC_MsiData_OFFSET                                  0
#define DxF0xAC_MsiData_WIDTH                                   16
#define DxF0xAC_MsiData_MASK                                    0xffff
#define DxF0xAC_Reserved_31_16_OFFSET                           16
#define DxF0xAC_Reserved_31_16_WIDTH                            16
#define DxF0xAC_Reserved_31_16_MASK                             0xffff0000

/// DxF0xAC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  MsiData:16; ///< This register specifies the lower 16 bits of data for the MSI memory write transaction. The upper 16 bits are always 0.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xAC_STRUCT;

// **** DxF0xB0 Register Definition ****
// Address
#define DxF0xB0_ADDRESS                                         0xb0

// Type
#define DxF0xB0_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xB0_CapID_OFFSET                                    0
#define DxF0xB0_CapID_WIDTH                                     8
#define DxF0xB0_CapID_MASK                                      0xff
#define DxF0xB0_NextPtr_OFFSET                                  8
#define DxF0xB0_NextPtr_WIDTH                                   8
#define DxF0xB0_NextPtr_MASK                                    0xff00
#define DxF0xB0_Reserved_31_16_OFFSET                           16
#define DxF0xB0_Reserved_31_16_WIDTH                            16
#define DxF0xB0_Reserved_31_16_MASK                             0xffff0000

/// DxF0xB0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:8 ; ///<
    UINT32                                                  NextPtr:8 ; ///<The address of the next capability structure, or zero if this the end of the linked list of capability structures.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xB0_STRUCT;

// **** DxF0xB4 Register Definition ****
// Address
#define DxF0xB4_ADDRESS                                         0xb4

// Type
#define DxF0xB4_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xB4_SubsystemVendorID_OFFSET                        0
#define DxF0xB4_SubsystemVendorID_WIDTH                         16
#define DxF0xB4_SubsystemVendorID_MASK                          0xffff
#define DxF0xB4_SubsystemID_OFFSET                              16
#define DxF0xB4_SubsystemID_WIDTH                               16
#define DxF0xB4_SubsystemID_MASK                                0xffff0000

/// DxF0xB4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        SubsystemVendorID:16; ///< UBTS #241274.
    UINT32                                              SubsystemID:16; ///< UBTS #241274.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xB4_STRUCT;

// **** DxF0xB8 Register Definition ****
// Address
#define DxF0xB8_ADDRESS                                         0xb8

// Type
#define DxF0xB8_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xB8_CapID_OFFSET                                    0
#define DxF0xB8_CapID_WIDTH                                     8
#define DxF0xB8_CapID_MASK                                      0xff
#define DxF0xB8_NextPtr_OFFSET                                  8
#define DxF0xB8_NextPtr_WIDTH                                   8
#define DxF0xB8_NextPtr_MASK                                    0xff00
#define DxF0xB8_En_OFFSET                                       16
#define DxF0xB8_En_WIDTH                                        1
#define DxF0xB8_En_MASK                                         0x10000
#define DxF0xB8_FixD_OFFSET                                     17
#define DxF0xB8_FixD_WIDTH                                      1
#define DxF0xB8_FixD_MASK                                       0x20000
#define DxF0xB8_Reserved_26_18_OFFSET                           18
#define DxF0xB8_Reserved_26_18_WIDTH                            9
#define DxF0xB8_Reserved_26_18_MASK                             0x7fc0000
#define DxF0xB8_CapType_OFFSET                                  27
#define DxF0xB8_CapType_WIDTH                                   5
#define DxF0xB8_CapType_MASK                                    0xf8000000

/// DxF0xB8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:8 ; ///<
    UINT32                                                  NextPtr:8 ; ///<The address of the next capability structure, or zero if this the end of the linked list of capability structures.
    UINT32                                                       En:1 ; ///<
    UINT32                                                     FixD:1 ; ///<
    UINT32                                           Reserved_26_18:9 ; ///<
    UINT32                                                  CapType:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xB8_STRUCT;

// **** DxF0xBC Register Definition ****
// Address
#define DxF0xBC_ADDRESS                                         0xbc

// Type
#define DxF0xBC_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xBC_Reserved_19_0_OFFSET                            0
#define DxF0xBC_Reserved_19_0_WIDTH                             20
#define DxF0xBC_Reserved_19_0_MASK                              0xfffff
#define DxF0xBC_MsiMapAddrLo_OFFSET                             20
#define DxF0xBC_MsiMapAddrLo_WIDTH                              12
#define DxF0xBC_MsiMapAddrLo_MASK                               0xfff00000

/// DxF0xBC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_19_0:20; ///<
    UINT32                                             MsiMapAddrLo:12; ///<Lower 32 bits of the MSI address.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xBC_STRUCT;

// **** DxF0xC0 Register Definition ****
// Address
#define DxF0xC0_ADDRESS                                         0xc0

// Type
#define DxF0xC0_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xC0_MsiMapAddrHi_OFFSET                             0
#define DxF0xC0_MsiMapAddrHi_WIDTH                              32
#define DxF0xC0_MsiMapAddrHi_MASK                               0xffffffff

/// DxF0xC0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             MsiMapAddrHi:32; ///<Upper 32 bits of the MSI address.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xC0_STRUCT;

// **** DxF0xE0 Register Definition ****
// Address
#define DxF0xE0_ADDRESS                                         0xe0

// Type
#define DxF0xE0_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xE0_PcieIndex_OFFSET                                0
#define DxF0xE0_PcieIndex_WIDTH                                 8
#define DxF0xE0_PcieIndex_MASK                                  0xff
#define DxF0xE0_Reserved_31_8_OFFSET                            8
#define DxF0xE0_Reserved_31_8_WIDTH                             24
#define DxF0xE0_Reserved_31_8_MASK                              0xffffff00

/// DxF0xE0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                PcieIndex:8 ; ///<
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE0_STRUCT;

// **** DxF0xE4 Register Definition ****
// Address
#define DxF0xE4_ADDRESS                                         0xe4

// Type
#define DxF0xE4_TYPE                                            TYPE_D4F0
// Field Data
#define DxF0xE4_PcieData_OFFSET                                 0
#define DxF0xE4_PcieData_WIDTH                                  32
#define DxF0xE4_PcieData_MASK                                   0xffffffff

/// DxF0xE4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 PcieData:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_STRUCT;

// **** DxF0x100 Register Definition ****
// Address
#define DxF0x100_ADDRESS                                        0x100

// Type
#define DxF0x100_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x100_CapID_OFFSET                                   0
#define DxF0x100_CapID_WIDTH                                    16
#define DxF0x100_CapID_MASK                                     0xffff
#define DxF0x100_CapVer_OFFSET                                  16
#define DxF0x100_CapVer_WIDTH                                   4
#define DxF0x100_CapVer_MASK                                    0xf0000
#define DxF0x100_NextPtr_OFFSET                                 20
#define DxF0x100_NextPtr_WIDTH                                  12
#define DxF0x100_NextPtr_MASK                                   0xfff00000

/// DxF0x100
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:16; ///<
    UINT32                                                   CapVer:4 ; ///<
    UINT32                                                  NextPtr:12; ///<The address of the next capability structure, or zero if this the end of the linked list of capability structures.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x100_STRUCT;

// **** DxF0x104 Register Definition ****
// Address
#define DxF0x104_ADDRESS                                        0x104

// Type
#define DxF0x104_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x104_VsecID_OFFSET                                  0
#define DxF0x104_VsecID_WIDTH                                   16
#define DxF0x104_VsecID_MASK                                    0xffff
#define DxF0x104_VsecRev_OFFSET                                 16
#define DxF0x104_VsecRev_WIDTH                                  4
#define DxF0x104_VsecRev_MASK                                   0xf0000
#define DxF0x104_VsecLen_OFFSET                                 20
#define DxF0x104_VsecLen_WIDTH                                  12
#define DxF0x104_VsecLen_MASK                                   0xfff00000

/// DxF0x104
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   VsecID:16; ///<
    UINT32                                                  VsecRev:4 ; ///<
    UINT32                                                  VsecLen:12; ///<Defined the number of bytes of the entire vendor specific enhanced capability structure including the header.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x104_STRUCT;

// **** DxF0x108 Register Definition ****
// Address
#define DxF0x108_ADDRESS                                        0x108

// Type
#define DxF0x108_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x108_Scratch_OFFSET                                 0
#define DxF0x108_Scratch_WIDTH                                  32
#define DxF0x108_Scratch_MASK                                   0xffffffff

/// DxF0x108
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Scratch:32; ///<This field does not control any hardware.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x108_STRUCT;

// **** DxF0x10C Register Definition ****
// Address
#define DxF0x10C_ADDRESS                                        0x10c

// Type
#define DxF0x10C_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x10C_Scratch_OFFSET                                 0
#define DxF0x10C_Scratch_WIDTH                                  32
#define DxF0x10C_Scratch_MASK                                   0xffffffff

/// DxF0x10C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Scratch:32; ///<This field does not control any hardware.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x10C_STRUCT;

// **** DxF0x110 Register Definition ****
// Address
#define DxF0x110_ADDRESS                                        0x110

// Type
#define DxF0x110_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x110_CapID_OFFSET                                   0
#define DxF0x110_CapID_WIDTH                                    16
#define DxF0x110_CapID_MASK                                     0xffff
#define DxF0x110_CapVer_OFFSET                                  16
#define DxF0x110_CapVer_WIDTH                                   4
#define DxF0x110_CapVer_MASK                                    0xf0000
#define DxF0x110_NextPointer_OFFSET                             20
#define DxF0x110_NextPointer_WIDTH                              12
#define DxF0x110_NextPointer_MASK                               0xfff00000

/// DxF0x110
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:16; ///<
    UINT32                                                   CapVer:4 ; ///<
    UINT32                                              NextPointer:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x110_STRUCT;

// **** DxF0x114 Register Definition ****
// Address
#define DxF0x114_ADDRESS                                        0x114

// Type
#define DxF0x114_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x114_ExtVcCount_OFFSET                              0
#define DxF0x114_ExtVcCount_WIDTH                               3
#define DxF0x114_ExtVcCount_MASK                                0x7
#define DxF0x114_Reserved_3_3_OFFSET                            3
#define DxF0x114_Reserved_3_3_WIDTH                             1
#define DxF0x114_Reserved_3_3_MASK                              0x8
#define DxF0x114_LowPriorityExtVcCount_OFFSET                   4
#define DxF0x114_LowPriorityExtVcCount_WIDTH                    3
#define DxF0x114_LowPriorityExtVcCount_MASK                     0x70
#define DxF0x114_Reserved_7_7_OFFSET                            7
#define DxF0x114_Reserved_7_7_WIDTH                             1
#define DxF0x114_Reserved_7_7_MASK                              0x80
#define DxF0x114_RefClk_OFFSET                                  8
#define DxF0x114_RefClk_WIDTH                                   2
#define DxF0x114_RefClk_MASK                                    0x300
#define DxF0x114_PortArbTableEntrySize_OFFSET                   10
#define DxF0x114_PortArbTableEntrySize_WIDTH                    2
#define DxF0x114_PortArbTableEntrySize_MASK                     0xc00
#define DxF0x114_Reserved_31_12_OFFSET                          12
#define DxF0x114_Reserved_31_12_WIDTH                           20
#define DxF0x114_Reserved_31_12_MASK                            0xfffff000

/// DxF0x114
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               ExtVcCount:3 ; ///<
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                    LowPriorityExtVcCount:3 ; ///<
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                                   RefClk:2 ; ///<
    UINT32                                    PortArbTableEntrySize:2 ; ///<
    UINT32                                           Reserved_31_12:20; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x114_STRUCT;

// **** DxF0x118 Register Definition ****
// Address
#define DxF0x118_ADDRESS                                        0x118

// Type
#define DxF0x118_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x118_VcArbCap_OFFSET                                0
#define DxF0x118_VcArbCap_WIDTH                                 8
#define DxF0x118_VcArbCap_MASK                                  0xff
#define DxF0x118_Reserved_23_8_OFFSET                           8
#define DxF0x118_Reserved_23_8_WIDTH                            16
#define DxF0x118_Reserved_23_8_MASK                             0xffff00
#define DxF0x118_VcArbTableOffset_OFFSET                        24
#define DxF0x118_VcArbTableOffset_WIDTH                         8
#define DxF0x118_VcArbTableOffset_MASK                          0xff000000

/// DxF0x118
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 VcArbCap:8 ; ///<
    UINT32                                            Reserved_23_8:16; ///<
    UINT32                                         VcArbTableOffset:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x118_STRUCT;

// **** DxF0x11C Register Definition ****
// Address
#define DxF0x11C_ADDRESS                                        0x11c

// Type
#define DxF0x11C_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x11C_LoadVcArbTable_OFFSET                          0
#define DxF0x11C_LoadVcArbTable_WIDTH                           1
#define DxF0x11C_LoadVcArbTable_MASK                            0x1
#define DxF0x11C_VcArbSelect_OFFSET                             1
#define DxF0x11C_VcArbSelect_WIDTH                              3
#define DxF0x11C_VcArbSelect_MASK                               0xe
#define DxF0x11C_Reserved_15_4_OFFSET                           4
#define DxF0x11C_Reserved_15_4_WIDTH                            12
#define DxF0x11C_Reserved_15_4_MASK                             0xfff0
#define DxF0x11C_VcArbTableStatus_OFFSET                        16
#define DxF0x11C_VcArbTableStatus_WIDTH                         1
#define DxF0x11C_VcArbTableStatus_MASK                          0x10000
#define DxF0x11C_Reserved_31_17_OFFSET                          17
#define DxF0x11C_Reserved_31_17_WIDTH                           15
#define DxF0x11C_Reserved_31_17_MASK                            0xfffe0000

/// DxF0x11C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           LoadVcArbTable:1 ; ///<There is no arbitration table.
    UINT32                                              VcArbSelect:3 ; ///<The value in this field is the number corresponding to one of the asserted bits in D[8:4]F0x118[VcArbCap].
    UINT32                                            Reserved_15_4:12; ///<
    UINT32                                         VcArbTableStatus:1 ; ///<
    UINT32                                           Reserved_31_17:15; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x11C_STRUCT;

// **** DxF0x120 Register Definition ****
// Address
#define DxF0x120_ADDRESS                                        0x120

// Type
#define DxF0x120_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x120_PortArbCap_OFFSET                              0
#define DxF0x120_PortArbCap_WIDTH                               8
#define DxF0x120_PortArbCap_MASK                                0xff
#define DxF0x120_Reserved_14_8_OFFSET                           8
#define DxF0x120_Reserved_14_8_WIDTH                            7
#define DxF0x120_Reserved_14_8_MASK                             0x7f00
#define DxF0x120_RejectSnoopTrans_OFFSET                        15
#define DxF0x120_RejectSnoopTrans_WIDTH                         1
#define DxF0x120_RejectSnoopTrans_MASK                          0x8000
#define DxF0x120_MaxTimeSlots_OFFSET                            16
#define DxF0x120_MaxTimeSlots_WIDTH                             6
#define DxF0x120_MaxTimeSlots_MASK                              0x3f0000
#define DxF0x120_Reserved_23_22_OFFSET                          22
#define DxF0x120_Reserved_23_22_WIDTH                           2
#define DxF0x120_Reserved_23_22_MASK                            0xc00000
#define DxF0x120_PortArbTableOffset_OFFSET                      24
#define DxF0x120_PortArbTableOffset_WIDTH                       8
#define DxF0x120_PortArbTableOffset_MASK                        0xff000000

/// DxF0x120
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               PortArbCap:8 ; ///<
    UINT32                                            Reserved_14_8:7 ; ///<
    UINT32                                         RejectSnoopTrans:1 ; ///<
    UINT32                                             MaxTimeSlots:6 ; ///<
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                       PortArbTableOffset:8 ; ///<There is no arbitration table.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x120_STRUCT;

// **** DxF0x124 Register Definition ****
// Address
#define DxF0x124_ADDRESS                                        0x124

// Type
#define DxF0x124_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x124_TcVcMapTc0_OFFSET                              0
#define DxF0x124_TcVcMapTc0_WIDTH                               1
#define DxF0x124_TcVcMapTc0_MASK                                0x1
#define DxF0x124_TcVcMapTc17_OFFSET                             1
#define DxF0x124_TcVcMapTc17_WIDTH                              7
#define DxF0x124_TcVcMapTc17_MASK                               0xfe
#define DxF0x124_Reserved_15_8_OFFSET                           8
#define DxF0x124_Reserved_15_8_WIDTH                            8
#define DxF0x124_Reserved_15_8_MASK                             0xff00
#define DxF0x124_LoadPortArbTable_OFFSET                        16
#define DxF0x124_LoadPortArbTable_WIDTH                         1
#define DxF0x124_LoadPortArbTable_MASK                          0x10000
#define DxF0x124_PortArbSelect_OFFSET                           17
#define DxF0x124_PortArbSelect_WIDTH                            3
#define DxF0x124_PortArbSelect_MASK                             0xe0000
#define DxF0x124_Reserved_23_20_OFFSET                          20
#define DxF0x124_Reserved_23_20_WIDTH                           4
#define DxF0x124_Reserved_23_20_MASK                            0xf00000
#define DxF0x124_VcId_OFFSET                                    24
#define DxF0x124_VcId_WIDTH                                     3
#define DxF0x124_VcId_MASK                                      0x7000000
#define DxF0x124_Reserved_30_27_OFFSET                          27
#define DxF0x124_Reserved_30_27_WIDTH                           4
#define DxF0x124_Reserved_30_27_MASK                            0x78000000
#define DxF0x124_VcEn_OFFSET                                    31
#define DxF0x124_VcEn_WIDTH                                     1
#define DxF0x124_VcEn_MASK                                      0x80000000

/// DxF0x124
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               TcVcMapTc0:1 ; ///<
    UINT32                                              TcVcMapTc17:7 ; ///< Bit 7 control traffic class 7, bit 1 traffic class 1.
    UINT32                                            Reserved_15_8:8 ; ///<
    UINT32                                         LoadPortArbTable:1 ; ///<There is no port arbitration table.
    UINT32                                            PortArbSelect:3 ; ///<The value in this field is the number corresponding to one of the asserted bits in D[8:4]F0x120[PortArbCap].
    UINT32                                           Reserved_23_20:4 ; ///<
    UINT32                                                     VcId:3 ; ///<
    UINT32                                           Reserved_30_27:4 ; ///<
    UINT32                                                     VcEn:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x124_STRUCT;

// **** DxF0x128 Register Definition ****
// Address
#define DxF0x128_ADDRESS                                        0x128

// Type
#define DxF0x128_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x128_Reserved_15_0_OFFSET                           0
#define DxF0x128_Reserved_15_0_WIDTH                            16
#define DxF0x128_Reserved_15_0_MASK                             0xffff
#define DxF0x128_PortArbTableStatus_OFFSET                      16
#define DxF0x128_PortArbTableStatus_WIDTH                       1
#define DxF0x128_PortArbTableStatus_MASK                        0x10000
#define DxF0x128_VcNegotiationPending_OFFSET                    17
#define DxF0x128_VcNegotiationPending_WIDTH                     1
#define DxF0x128_VcNegotiationPending_MASK                      0x20000
#define DxF0x128_Reserved_31_18_OFFSET                          18
#define DxF0x128_Reserved_31_18_WIDTH                           14
#define DxF0x128_Reserved_31_18_MASK                            0xfffc0000

/// DxF0x128
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_15_0:16; ///<
    UINT32                                       PortArbTableStatus:1 ; ///<
    UINT32                                     VcNegotiationPending:1 ; ///< This must bit must be 0 before the virtual channel can be used.
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x128_STRUCT;

// **** DxF0x12C Register Definition ****
// Address
#define DxF0x12C_ADDRESS                                        0x12c

// Type
#define DxF0x12C_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x12C_PortArbCap_OFFSET                              0
#define DxF0x12C_PortArbCap_WIDTH                               8
#define DxF0x12C_PortArbCap_MASK                                0xff
#define DxF0x12C_Reserved_14_8_OFFSET                           8
#define DxF0x12C_Reserved_14_8_WIDTH                            7
#define DxF0x12C_Reserved_14_8_MASK                             0x7f00
#define DxF0x12C_RejectSnoopTrans_OFFSET                        15
#define DxF0x12C_RejectSnoopTrans_WIDTH                         1
#define DxF0x12C_RejectSnoopTrans_MASK                          0x8000
#define DxF0x12C_MaxTimeSlots_OFFSET                            16
#define DxF0x12C_MaxTimeSlots_WIDTH                             6
#define DxF0x12C_MaxTimeSlots_MASK                              0x3f0000
#define DxF0x12C_Reserved_23_22_OFFSET                          22
#define DxF0x12C_Reserved_23_22_WIDTH                           2
#define DxF0x12C_Reserved_23_22_MASK                            0xc00000
#define DxF0x12C_PortArbTableOffset_OFFSET                      24
#define DxF0x12C_PortArbTableOffset_WIDTH                       8
#define DxF0x12C_PortArbTableOffset_MASK                        0xff000000

/// DxF0x12C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               PortArbCap:8 ; ///<
    UINT32                                            Reserved_14_8:7 ; ///<
    UINT32                                         RejectSnoopTrans:1 ; ///<
    UINT32                                             MaxTimeSlots:6 ; ///<
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                       PortArbTableOffset:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x12C_STRUCT;

// **** DxF0x130 Register Definition ****
// Address
#define DxF0x130_ADDRESS                                        0x130

// Type
#define DxF0x130_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x130_TcVcMapTc0_OFFSET                              0
#define DxF0x130_TcVcMapTc0_WIDTH                               1
#define DxF0x130_TcVcMapTc0_MASK                                0x1
#define DxF0x130_TcVcMapTc17_OFFSET                             1
#define DxF0x130_TcVcMapTc17_WIDTH                              7
#define DxF0x130_TcVcMapTc17_MASK                               0xfe
#define DxF0x130_Reserved_15_8_OFFSET                           8
#define DxF0x130_Reserved_15_8_WIDTH                            8
#define DxF0x130_Reserved_15_8_MASK                             0xff00
#define DxF0x130_LoadPortArbTable_OFFSET                        16
#define DxF0x130_LoadPortArbTable_WIDTH                         1
#define DxF0x130_LoadPortArbTable_MASK                          0x10000
#define DxF0x130_PortArbSelect_OFFSET                           17
#define DxF0x130_PortArbSelect_WIDTH                            3
#define DxF0x130_PortArbSelect_MASK                             0xe0000
#define DxF0x130_Reserved_23_20_OFFSET                          20
#define DxF0x130_Reserved_23_20_WIDTH                           4
#define DxF0x130_Reserved_23_20_MASK                            0xf00000
#define DxF0x130_VcId_OFFSET                                    24
#define DxF0x130_VcId_WIDTH                                     3
#define DxF0x130_VcId_MASK                                      0x7000000
#define DxF0x130_Reserved_30_27_OFFSET                          27
#define DxF0x130_Reserved_30_27_WIDTH                           4
#define DxF0x130_Reserved_30_27_MASK                            0x78000000
#define DxF0x130_VcEn_OFFSET                                    31
#define DxF0x130_VcEn_WIDTH                                     1
#define DxF0x130_VcEn_MASK                                      0x80000000

/// DxF0x130
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               TcVcMapTc0:1 ; ///<
    UINT32                                              TcVcMapTc17:7 ; ///< Bit 7 control traffic class 7, bit 1 traffic class 1.
    UINT32                                            Reserved_15_8:8 ; ///<
    UINT32                                         LoadPortArbTable:1 ; ///<
    UINT32                                            PortArbSelect:3 ; ///<The value in this field is the number corresponding to one of the asserted bits in D[8:4]F0x12C[PortArbCap].
    UINT32                                           Reserved_23_20:4 ; ///<
    UINT32                                                     VcId:3 ; ///<This field assigns a virtual channel ID.
    UINT32                                           Reserved_30_27:4 ; ///<
    UINT32                                                     VcEn:1 ; ///< This bit must be 0 for all links except the UMI.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x130_STRUCT;

// **** DxF0x134 Register Definition ****
// Address
#define DxF0x134_ADDRESS                                        0x134

// Type
#define DxF0x134_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x134_Reserved_15_0_OFFSET                           0
#define DxF0x134_Reserved_15_0_WIDTH                            16
#define DxF0x134_Reserved_15_0_MASK                             0xffff
#define DxF0x134_PortArbTableStatus_OFFSET                      16
#define DxF0x134_PortArbTableStatus_WIDTH                       1
#define DxF0x134_PortArbTableStatus_MASK                        0x10000
#define DxF0x134_VcNegotiationPending_OFFSET                    17
#define DxF0x134_VcNegotiationPending_WIDTH                     1
#define DxF0x134_VcNegotiationPending_MASK                      0x20000
#define DxF0x134_Reserved_31_18_OFFSET                          18
#define DxF0x134_Reserved_31_18_WIDTH                           14
#define DxF0x134_Reserved_31_18_MASK                            0xfffc0000

/// DxF0x134
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_15_0:16; ///<
    UINT32                                       PortArbTableStatus:1 ; ///<
    UINT32                                     VcNegotiationPending:1 ; ///<Software must check this bit to be 0 before using the virtual channel.
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x134_STRUCT;

// **** DxF0x140 Register Definition ****
// Address
#define DxF0x140_ADDRESS                                        0x140

// Type
#define DxF0x140_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x140_CapID_OFFSET                                   0
#define DxF0x140_CapID_WIDTH                                    16
#define DxF0x140_CapID_MASK                                     0xffff
#define DxF0x140_CapVer_OFFSET                                  16
#define DxF0x140_CapVer_WIDTH                                   4
#define DxF0x140_CapVer_MASK                                    0xf0000
#define DxF0x140_NextPtr_OFFSET                                 20
#define DxF0x140_NextPtr_WIDTH                                  12
#define DxF0x140_NextPtr_MASK                                   0xfff00000

/// DxF0x140
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:16; ///<
    UINT32                                                   CapVer:4 ; ///<
    UINT32                                                  NextPtr:12; ///<The address of the next capability structure, or zero if this the end of the linked list of capability structures.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x140_STRUCT;

// **** DxF0x144 Register Definition ****
// Address
#define DxF0x144_ADDRESS                                        0x144

// Type
#define DxF0x144_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x144_SerialNumberLo_OFFSET                          0
#define DxF0x144_SerialNumberLo_WIDTH                           32
#define DxF0x144_SerialNumberLo_MASK                            0xffffffff

/// DxF0x144
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           SerialNumberLo:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x144_STRUCT;

// **** DxF0x148 Register Definition ****
// Address
#define DxF0x148_ADDRESS                                        0x148

// Type
#define DxF0x148_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x148_SerialNumberHi_OFFSET                          0
#define DxF0x148_SerialNumberHi_WIDTH                           32
#define DxF0x148_SerialNumberHi_MASK                            0xffffffff

/// DxF0x148
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           SerialNumberHi:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x148_STRUCT;

// **** DxF0x150 Register Definition ****
// Address
#define DxF0x150_ADDRESS                                        0x150

// Type
#define DxF0x150_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x150_CapID_OFFSET                                   0
#define DxF0x150_CapID_WIDTH                                    16
#define DxF0x150_CapID_MASK                                     0xffff
#define DxF0x150_CapVer_OFFSET                                  16
#define DxF0x150_CapVer_WIDTH                                   4
#define DxF0x150_CapVer_MASK                                    0xf0000
#define DxF0x150_NextPtr_OFFSET                                 20
#define DxF0x150_NextPtr_WIDTH                                  12
#define DxF0x150_NextPtr_MASK                                   0xfff00000

/// DxF0x150
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    CapID:16; ///<
    UINT32                                                   CapVer:4 ; ///<
    UINT32                                                  NextPtr:12; ///<The address of the next capability structure, or zero if this the end of the linked list of capability structures.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x150_STRUCT;

// **** DxF0x154 Register Definition ****
// Address
#define DxF0x154_ADDRESS                                        0x154

// Type
#define DxF0x154_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x154_Reserved_3_0_OFFSET                            0
#define DxF0x154_Reserved_3_0_WIDTH                             4
#define DxF0x154_Reserved_3_0_MASK                              0xf
#define DxF0x154_DlpErrStatus_OFFSET                            4
#define DxF0x154_DlpErrStatus_WIDTH                             1
#define DxF0x154_DlpErrStatus_MASK                              0x10
#define DxF0x154_SurprdnErrStatus_OFFSET                        5
#define DxF0x154_SurprdnErrStatus_WIDTH                         1
#define DxF0x154_SurprdnErrStatus_MASK                          0x20
#define DxF0x154_Reserved_11_6_OFFSET                           6
#define DxF0x154_Reserved_11_6_WIDTH                            6
#define DxF0x154_Reserved_11_6_MASK                             0xfc0
#define DxF0x154_PsnErrStatus_OFFSET                            12
#define DxF0x154_PsnErrStatus_WIDTH                             1
#define DxF0x154_PsnErrStatus_MASK                              0x1000
#define DxF0x154_FcErrStatus_OFFSET                             13
#define DxF0x154_FcErrStatus_WIDTH                              1
#define DxF0x154_FcErrStatus_MASK                               0x2000
#define DxF0x154_CplTimeoutStatus_OFFSET                        14
#define DxF0x154_CplTimeoutStatus_WIDTH                         1
#define DxF0x154_CplTimeoutStatus_MASK                          0x4000
#define DxF0x154_CplAbortErrStatus_OFFSET                       15
#define DxF0x154_CplAbortErrStatus_WIDTH                        1
#define DxF0x154_CplAbortErrStatus_MASK                         0x8000
#define DxF0x154_UnexpCplStatus_OFFSET                          16
#define DxF0x154_UnexpCplStatus_WIDTH                           1
#define DxF0x154_UnexpCplStatus_MASK                            0x10000
#define DxF0x154_RcvOvflStatus_OFFSET                           17
#define DxF0x154_RcvOvflStatus_WIDTH                            1
#define DxF0x154_RcvOvflStatus_MASK                             0x20000
#define DxF0x154_MalTlpStatus_OFFSET                            18
#define DxF0x154_MalTlpStatus_WIDTH                             1
#define DxF0x154_MalTlpStatus_MASK                              0x40000
#define DxF0x154_EcrcErrStatus_OFFSET                           19
#define DxF0x154_EcrcErrStatus_WIDTH                            1
#define DxF0x154_EcrcErrStatus_MASK                             0x80000
#define DxF0x154_UnsuppReqErrStatus_OFFSET                      20
#define DxF0x154_UnsuppReqErrStatus_WIDTH                       1
#define DxF0x154_UnsuppReqErrStatus_MASK                        0x100000
#define DxF0x154_AcsViolationStatus_OFFSET                      21
#define DxF0x154_AcsViolationStatus_WIDTH                       1
#define DxF0x154_AcsViolationStatus_MASK                        0x200000
#define DxF0x154_UncorrInteralErrStatus_OFFSET                  22
#define DxF0x154_UncorrInteralErrStatus_WIDTH                   1
#define DxF0x154_UncorrInteralErrStatus_MASK                    0x400000
#define DxF0x154_McBlockedTLPStatus_OFFSET                      23
#define DxF0x154_McBlockedTLPStatus_WIDTH                       1
#define DxF0x154_McBlockedTLPStatus_MASK                        0x800000
#define DxF0x154_AtomicOpEgressBlockedTLPStatus_OFFSET          24
#define DxF0x154_AtomicOpEgressBlockedTLPStatus_WIDTH           1
#define DxF0x154_AtomicOpEgressBlockedTLPStatus_MASK            0x1000000
#define DxF0x154_TlpPrefixStatus_OFFSET                         25
#define DxF0x154_TlpPrefixStatus_WIDTH                          1
#define DxF0x154_TlpPrefixStatus_MASK                           0x2000000
#define DxF0x154_Reserved_31_26_OFFSET                          26
#define DxF0x154_Reserved_31_26_WIDTH                           6
#define DxF0x154_Reserved_31_26_MASK                            0xfc000000

/// DxF0x154
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                             DlpErrStatus:1 ; ///<
    UINT32                                         SurprdnErrStatus:1 ; ///<
    UINT32                                            Reserved_11_6:6 ; ///<
    UINT32                                             PsnErrStatus:1 ; ///<The header of the poisoned transaction layer packet is logged.
    UINT32                                              FcErrStatus:1 ; ///<
    UINT32                                         CplTimeoutStatus:1 ; ///<
    UINT32                                        CplAbortErrStatus:1 ; ///<
    UINT32                                           UnexpCplStatus:1 ; ///<The header of the unexpected completion is logged.
    UINT32                                            RcvOvflStatus:1 ; ///<
    UINT32                                             MalTlpStatus:1 ; ///<The header of the malformed TLP is logged.
    UINT32                                            EcrcErrStatus:1 ; ///<
    UINT32                                       UnsuppReqErrStatus:1 ; ///<The header of the unsupported request is logged.
    UINT32                                       AcsViolationStatus:1 ; ///<
    UINT32                                   UncorrInteralErrStatus:1 ; ///<
    UINT32                                       McBlockedTLPStatus:1 ; ///<
    UINT32                           AtomicOpEgressBlockedTLPStatus:1 ; ///<
    UINT32                                          TlpPrefixStatus:1 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x154_STRUCT;

// **** DxF0x158 Register Definition ****
// Address
#define DxF0x158_ADDRESS                                        0x158

// Type
#define DxF0x158_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x158_Reserved_3_0_OFFSET                            0
#define DxF0x158_Reserved_3_0_WIDTH                             4
#define DxF0x158_Reserved_3_0_MASK                              0xf
#define DxF0x158_DlpErrMask_OFFSET                              4
#define DxF0x158_DlpErrMask_WIDTH                               1
#define DxF0x158_DlpErrMask_MASK                                0x10
#define DxF0x158_SurprdnErrMask_OFFSET                          5
#define DxF0x158_SurprdnErrMask_WIDTH                           1
#define DxF0x158_SurprdnErrMask_MASK                            0x20
#define DxF0x158_Reserved_11_6_OFFSET                           6
#define DxF0x158_Reserved_11_6_WIDTH                            6
#define DxF0x158_Reserved_11_6_MASK                             0xfc0
#define DxF0x158_PsnErrMask_OFFSET                              12
#define DxF0x158_PsnErrMask_WIDTH                               1
#define DxF0x158_PsnErrMask_MASK                                0x1000
#define DxF0x158_FcErrMask_OFFSET                               13
#define DxF0x158_FcErrMask_WIDTH                                1
#define DxF0x158_FcErrMask_MASK                                 0x2000
#define DxF0x158_CplTimeoutMask_OFFSET                          14
#define DxF0x158_CplTimeoutMask_WIDTH                           1
#define DxF0x158_CplTimeoutMask_MASK                            0x4000
#define DxF0x158_CplAbortErrMask_OFFSET                         15
#define DxF0x158_CplAbortErrMask_WIDTH                          1
#define DxF0x158_CplAbortErrMask_MASK                           0x8000
#define DxF0x158_UnexpCplMask_OFFSET                            16
#define DxF0x158_UnexpCplMask_WIDTH                             1
#define DxF0x158_UnexpCplMask_MASK                              0x10000
#define DxF0x158_RcvOvflMask_OFFSET                             17
#define DxF0x158_RcvOvflMask_WIDTH                              1
#define DxF0x158_RcvOvflMask_MASK                               0x20000
#define DxF0x158_MalTlpMask_OFFSET                              18
#define DxF0x158_MalTlpMask_WIDTH                               1
#define DxF0x158_MalTlpMask_MASK                                0x40000
#define DxF0x158_EcrcErrMask_OFFSET                             19
#define DxF0x158_EcrcErrMask_WIDTH                              1
#define DxF0x158_EcrcErrMask_MASK                               0x80000
#define DxF0x158_UnsuppReqErrMask_OFFSET                        20
#define DxF0x158_UnsuppReqErrMask_WIDTH                         1
#define DxF0x158_UnsuppReqErrMask_MASK                          0x100000
#define DxF0x158_AcsViolationMask_OFFSET                        21
#define DxF0x158_AcsViolationMask_WIDTH                         1
#define DxF0x158_AcsViolationMask_MASK                          0x200000
#define DxF0x158_UncorrInteralErrMask_OFFSET                    22
#define DxF0x158_UncorrInteralErrMask_WIDTH                     1
#define DxF0x158_UncorrInteralErrMask_MASK                      0x400000
#define DxF0x158_McBlockedTLPMask_OFFSET                        23
#define DxF0x158_McBlockedTLPMask_WIDTH                         1
#define DxF0x158_McBlockedTLPMask_MASK                          0x800000
#define DxF0x158_AtomicOpEgressBlockedTLPMask_OFFSET            24
#define DxF0x158_AtomicOpEgressBlockedTLPMask_WIDTH             1
#define DxF0x158_AtomicOpEgressBlockedTLPMask_MASK              0x1000000
#define DxF0x158_TlpPrefixMask_OFFSET                           25
#define DxF0x158_TlpPrefixMask_WIDTH                            1
#define DxF0x158_TlpPrefixMask_MASK                             0x2000000
#define DxF0x158_Reserved_31_26_OFFSET                          26
#define DxF0x158_Reserved_31_26_WIDTH                           6
#define DxF0x158_Reserved_31_26_MASK                            0xfc000000

/// DxF0x158
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                               DlpErrMask:1 ; ///<
    UINT32                                           SurprdnErrMask:1 ; ///<
    UINT32                                            Reserved_11_6:6 ; ///<
    UINT32                                               PsnErrMask:1 ; ///<
    UINT32                                                FcErrMask:1 ; ///<
    UINT32                                           CplTimeoutMask:1 ; ///<
    UINT32                                          CplAbortErrMask:1 ; ///<
    UINT32                                             UnexpCplMask:1 ; ///<
    UINT32                                              RcvOvflMask:1 ; ///<
    UINT32                                               MalTlpMask:1 ; ///<
    UINT32                                              EcrcErrMask:1 ; ///<
    UINT32                                         UnsuppReqErrMask:1 ; ///<
    UINT32                                         AcsViolationMask:1 ; ///<
    UINT32                                     UncorrInteralErrMask:1 ; ///<
    UINT32                                         McBlockedTLPMask:1 ; ///<
    UINT32                             AtomicOpEgressBlockedTLPMask:1 ; ///<
    UINT32                                            TlpPrefixMask:1 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x158_STRUCT;

// **** DxF0x15C Register Definition ****
// Address
#define DxF0x15C_ADDRESS                                        0x15c

// Type
#define DxF0x15C_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x15C_Reserved_3_0_OFFSET                            0
#define DxF0x15C_Reserved_3_0_WIDTH                             4
#define DxF0x15C_Reserved_3_0_MASK                              0xf
#define DxF0x15C_DlpErrSeverity_OFFSET                          4
#define DxF0x15C_DlpErrSeverity_WIDTH                           1
#define DxF0x15C_DlpErrSeverity_MASK                            0x10
#define DxF0x15C_SurprdnErrSeverity_OFFSET                      5
#define DxF0x15C_SurprdnErrSeverity_WIDTH                       1
#define DxF0x15C_SurprdnErrSeverity_MASK                        0x20
#define DxF0x15C_Reserved_11_6_OFFSET                           6
#define DxF0x15C_Reserved_11_6_WIDTH                            6
#define DxF0x15C_Reserved_11_6_MASK                             0xfc0
#define DxF0x15C_PsnErrSeverity_OFFSET                          12
#define DxF0x15C_PsnErrSeverity_WIDTH                           1
#define DxF0x15C_PsnErrSeverity_MASK                            0x1000
#define DxF0x15C_FcErrSeverity_OFFSET                           13
#define DxF0x15C_FcErrSeverity_WIDTH                            1
#define DxF0x15C_FcErrSeverity_MASK                             0x2000
#define DxF0x15C_CplTimeoutSeverity_OFFSET                      14
#define DxF0x15C_CplTimeoutSeverity_WIDTH                       1
#define DxF0x15C_CplTimeoutSeverity_MASK                        0x4000
#define DxF0x15C_CplAbortErrSeverity_OFFSET                     15
#define DxF0x15C_CplAbortErrSeverity_WIDTH                      1
#define DxF0x15C_CplAbortErrSeverity_MASK                       0x8000
#define DxF0x15C_UnexpCplSeverity_OFFSET                        16
#define DxF0x15C_UnexpCplSeverity_WIDTH                         1
#define DxF0x15C_UnexpCplSeverity_MASK                          0x10000
#define DxF0x15C_RcvOvflSeverity_OFFSET                         17
#define DxF0x15C_RcvOvflSeverity_WIDTH                          1
#define DxF0x15C_RcvOvflSeverity_MASK                           0x20000
#define DxF0x15C_MalTlpSeverity_OFFSET                          18
#define DxF0x15C_MalTlpSeverity_WIDTH                           1
#define DxF0x15C_MalTlpSeverity_MASK                            0x40000
#define DxF0x15C_EcrcErrSeverity_OFFSET                         19
#define DxF0x15C_EcrcErrSeverity_WIDTH                          1
#define DxF0x15C_EcrcErrSeverity_MASK                           0x80000
#define DxF0x15C_UnsuppReqErrSeverity_OFFSET                    20
#define DxF0x15C_UnsuppReqErrSeverity_WIDTH                     1
#define DxF0x15C_UnsuppReqErrSeverity_MASK                      0x100000
#define DxF0x15C_AcsViolationSeverity_OFFSET                    21
#define DxF0x15C_AcsViolationSeverity_WIDTH                     1
#define DxF0x15C_AcsViolationSeverity_MASK                      0x200000
#define DxF0x15C_UncorrInteralErrSeverity_OFFSET                22
#define DxF0x15C_UncorrInteralErrSeverity_WIDTH                 1
#define DxF0x15C_UncorrInteralErrSeverity_MASK                  0x400000
#define DxF0x15C_McBlockedTLPSeverity_OFFSET                    23
#define DxF0x15C_McBlockedTLPSeverity_WIDTH                     1
#define DxF0x15C_McBlockedTLPSeverity_MASK                      0x800000
#define DxF0x15C_AtomicOpEgressBlockedTLPSeverity_OFFSET        24
#define DxF0x15C_AtomicOpEgressBlockedTLPSeverity_WIDTH         1
#define DxF0x15C_AtomicOpEgressBlockedTLPSeverity_MASK          0x1000000
#define DxF0x15C_TlpPrefixSeverity_OFFSET                       25
#define DxF0x15C_TlpPrefixSeverity_WIDTH                        1
#define DxF0x15C_TlpPrefixSeverity_MASK                         0x2000000
#define DxF0x15C_Reserved_31_26_OFFSET                          26
#define DxF0x15C_Reserved_31_26_WIDTH                           6
#define DxF0x15C_Reserved_31_26_MASK                            0xfc000000

/// DxF0x15C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                           DlpErrSeverity:1 ; ///<
    UINT32                                       SurprdnErrSeverity:1 ; ///<
    UINT32                                            Reserved_11_6:6 ; ///<
    UINT32                                           PsnErrSeverity:1 ; ///<
    UINT32                                            FcErrSeverity:1 ; ///<
    UINT32                                       CplTimeoutSeverity:1 ; ///<
    UINT32                                      CplAbortErrSeverity:1 ; ///<
    UINT32                                         UnexpCplSeverity:1 ; ///<
    UINT32                                          RcvOvflSeverity:1 ; ///<
    UINT32                                           MalTlpSeverity:1 ; ///<
    UINT32                                          EcrcErrSeverity:1 ; ///<
    UINT32                                     UnsuppReqErrSeverity:1 ; ///<
    UINT32                                     AcsViolationSeverity:1 ; ///<
    UINT32                                 UncorrInteralErrSeverity:1 ; ///<
    UINT32                                     McBlockedTLPSeverity:1 ; ///<
    UINT32                         AtomicOpEgressBlockedTLPSeverity:1 ; ///<
    UINT32                                        TlpPrefixSeverity:1 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x15C_STRUCT;

// **** DxF0x160 Register Definition ****
// Address
#define DxF0x160_ADDRESS                                        0x160

// Type
#define DxF0x160_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x160_RcvErrStatus_OFFSET                            0
#define DxF0x160_RcvErrStatus_WIDTH                             1
#define DxF0x160_RcvErrStatus_MASK                              0x1
#define DxF0x160_Reserved_5_1_OFFSET                            1
#define DxF0x160_Reserved_5_1_WIDTH                             5
#define DxF0x160_Reserved_5_1_MASK                              0x3e
#define DxF0x160_BadTlpStatus_OFFSET                            6
#define DxF0x160_BadTlpStatus_WIDTH                             1
#define DxF0x160_BadTlpStatus_MASK                              0x40
#define DxF0x160_BadDllpStatus_OFFSET                           7
#define DxF0x160_BadDllpStatus_WIDTH                            1
#define DxF0x160_BadDllpStatus_MASK                             0x80
#define DxF0x160_ReplayNumRolloverStatus_OFFSET                 8
#define DxF0x160_ReplayNumRolloverStatus_WIDTH                  1
#define DxF0x160_ReplayNumRolloverStatus_MASK                   0x100
#define DxF0x160_Reserved_11_9_OFFSET                           9
#define DxF0x160_Reserved_11_9_WIDTH                            3
#define DxF0x160_Reserved_11_9_MASK                             0xe00
#define DxF0x160_ReplayTimerTimeoutStatus_OFFSET                12
#define DxF0x160_ReplayTimerTimeoutStatus_WIDTH                 1
#define DxF0x160_ReplayTimerTimeoutStatus_MASK                  0x1000
#define DxF0x160_AdvisoryNonfatalErrStatus_OFFSET               13
#define DxF0x160_AdvisoryNonfatalErrStatus_WIDTH                1
#define DxF0x160_AdvisoryNonfatalErrStatus_MASK                 0x2000
#define DxF0x160_Reserved_31_14_OFFSET                          14
#define DxF0x160_Reserved_31_14_WIDTH                           18
#define DxF0x160_Reserved_31_14_MASK                            0xffffc000

/// DxF0x160
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             RcvErrStatus:1 ; ///<
    UINT32                                             Reserved_5_1:5 ; ///<
    UINT32                                             BadTlpStatus:1 ; ///<
    UINT32                                            BadDllpStatus:1 ; ///<
    UINT32                                  ReplayNumRolloverStatus:1 ; ///<
    UINT32                                            Reserved_11_9:3 ; ///<
    UINT32                                 ReplayTimerTimeoutStatus:1 ; ///<
    UINT32                                AdvisoryNonfatalErrStatus:1 ; ///<
    UINT32                                           Reserved_31_14:18; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x160_STRUCT;

// **** DxF0x164 Register Definition ****
// Address
#define DxF0x164_ADDRESS                                        0x164

// Type
#define DxF0x164_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x164_RcvErrMask_OFFSET                              0
#define DxF0x164_RcvErrMask_WIDTH                               1
#define DxF0x164_RcvErrMask_MASK                                0x1
#define DxF0x164_Reserved_5_1_OFFSET                            1
#define DxF0x164_Reserved_5_1_WIDTH                             5
#define DxF0x164_Reserved_5_1_MASK                              0x3e
#define DxF0x164_BadTlpMask_OFFSET                              6
#define DxF0x164_BadTlpMask_WIDTH                               1
#define DxF0x164_BadTlpMask_MASK                                0x40
#define DxF0x164_BadDllpMask_OFFSET                             7
#define DxF0x164_BadDllpMask_WIDTH                              1
#define DxF0x164_BadDllpMask_MASK                               0x80
#define DxF0x164_ReplayNumRolloverMask_OFFSET                   8
#define DxF0x164_ReplayNumRolloverMask_WIDTH                    1
#define DxF0x164_ReplayNumRolloverMask_MASK                     0x100
#define DxF0x164_Reserved_11_9_OFFSET                           9
#define DxF0x164_Reserved_11_9_WIDTH                            3
#define DxF0x164_Reserved_11_9_MASK                             0xe00
#define DxF0x164_ReplayTimerTimeoutMask_OFFSET                  12
#define DxF0x164_ReplayTimerTimeoutMask_WIDTH                   1
#define DxF0x164_ReplayTimerTimeoutMask_MASK                    0x1000
#define DxF0x164_AdvisoryNonfatalErrMask_OFFSET                 13
#define DxF0x164_AdvisoryNonfatalErrMask_WIDTH                  1
#define DxF0x164_AdvisoryNonfatalErrMask_MASK                   0x2000
#define DxF0x164_Reserved_31_14_OFFSET                          14
#define DxF0x164_Reserved_31_14_WIDTH                           18
#define DxF0x164_Reserved_31_14_MASK                            0xffffc000

/// DxF0x164
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               RcvErrMask:1 ; ///<
    UINT32                                             Reserved_5_1:5 ; ///<
    UINT32                                               BadTlpMask:1 ; ///<
    UINT32                                              BadDllpMask:1 ; ///<
    UINT32                                    ReplayNumRolloverMask:1 ; ///<
    UINT32                                            Reserved_11_9:3 ; ///<
    UINT32                                   ReplayTimerTimeoutMask:1 ; ///<
    UINT32                                  AdvisoryNonfatalErrMask:1 ; ///<
    UINT32                                           Reserved_31_14:18; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x164_STRUCT;

// **** DxF0x168 Register Definition ****
// Address
#define DxF0x168_ADDRESS                                        0x168

// Type
#define DxF0x168_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x168_FirstErrPtr_OFFSET                             0
#define DxF0x168_FirstErrPtr_WIDTH                              5
#define DxF0x168_FirstErrPtr_MASK                               0x1f
#define DxF0x168_EcrcGenCap_OFFSET                              5
#define DxF0x168_EcrcGenCap_WIDTH                               1
#define DxF0x168_EcrcGenCap_MASK                                0x20
#define DxF0x168_EcrcGenEn_OFFSET                               6
#define DxF0x168_EcrcGenEn_WIDTH                                1
#define DxF0x168_EcrcGenEn_MASK                                 0x40
#define DxF0x168_EcrcCheckCap_OFFSET                            7
#define DxF0x168_EcrcCheckCap_WIDTH                             1
#define DxF0x168_EcrcCheckCap_MASK                              0x80
#define DxF0x168_EcrcCheckEn_OFFSET                             8
#define DxF0x168_EcrcCheckEn_WIDTH                              1
#define DxF0x168_EcrcCheckEn_MASK                               0x100
#define DxF0x168_Reserved_31_9_OFFSET                           9
#define DxF0x168_Reserved_31_9_WIDTH                            23
#define DxF0x168_Reserved_31_9_MASK                             0xfffffe00

/// DxF0x168
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              FirstErrPtr:5 ; ///<The First Error Pointer identifies the bit position of the first error reported in the Uncorrectable Error Status register.
    UINT32                                               EcrcGenCap:1 ; ///<
    UINT32                                                EcrcGenEn:1 ; ///<
    UINT32                                             EcrcCheckCap:1 ; ///<
    UINT32                                              EcrcCheckEn:1 ; ///<
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x168_STRUCT;

// **** DxF0x16C Register Definition ****
// Address
#define DxF0x16C_ADDRESS                                        0x16c

// Type
#define DxF0x16C_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x16C_TlpHdr_OFFSET                                  0
#define DxF0x16C_TlpHdr_WIDTH                                   32
#define DxF0x16C_TlpHdr_MASK                                    0xffffffff

/// DxF0x16C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   TlpHdr:32; ///<Contains the header for a transaction layer packet corresponding to a detected error. The upper byte represents byte 0 of the header.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x16C_STRUCT;

// **** DxF0x170 Register Definition ****
// Address
#define DxF0x170_ADDRESS                                        0x170

// Type
#define DxF0x170_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x170_TlpHdr_OFFSET                                  0
#define DxF0x170_TlpHdr_WIDTH                                   32
#define DxF0x170_TlpHdr_MASK                                    0xffffffff

/// DxF0x170
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   TlpHdr:32; ///<Contains the header for a transaction layer packet corresponding to a detected error. The upper byte represents byte 4 of the header.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x170_STRUCT;

// **** DxF0x174 Register Definition ****
// Address
#define DxF0x174_ADDRESS                                        0x174

// Type
#define DxF0x174_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x174_TlpHdr_OFFSET                                  0
#define DxF0x174_TlpHdr_WIDTH                                   32
#define DxF0x174_TlpHdr_MASK                                    0xffffffff

/// DxF0x174
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   TlpHdr:32; ///<Contains the header for a transaction layer packet corresponding to a detected error. The upper byte represents byte 8 of the header.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x174_STRUCT;

// **** DxF0x178 Register Definition ****
// Address
#define DxF0x178_ADDRESS                                        0x178

// Type
#define DxF0x178_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x178_TlpHdr_OFFSET                                  0
#define DxF0x178_TlpHdr_WIDTH                                   32
#define DxF0x178_TlpHdr_MASK                                    0xffffffff

/// DxF0x178
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   TlpHdr:32; ///<Contains the header for a transaction layer packet corresponding to a detected error. The upper byte represents byte 12 of the header.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x178_STRUCT;

// **** DxF0x17C Register Definition ****
// Address
#define DxF0x17C_ADDRESS                                        0x17c

// Type
#define DxF0x17C_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x17C_CorrErrRepEn_OFFSET                            0
#define DxF0x17C_CorrErrRepEn_WIDTH                             1
#define DxF0x17C_CorrErrRepEn_MASK                              0x1
#define DxF0x17C_NonfatalErrRepEn_OFFSET                        1
#define DxF0x17C_NonfatalErrRepEn_WIDTH                         1
#define DxF0x17C_NonfatalErrRepEn_MASK                          0x2
#define DxF0x17C_FatalErrRepEn_OFFSET                           2
#define DxF0x17C_FatalErrRepEn_WIDTH                            1
#define DxF0x17C_FatalErrRepEn_MASK                             0x4
#define DxF0x17C_Reserved_31_3_OFFSET                           3
#define DxF0x17C_Reserved_31_3_WIDTH                            29
#define DxF0x17C_Reserved_31_3_MASK                             0xfffffff8

/// DxF0x17C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             CorrErrRepEn:1 ; ///<
    UINT32                                         NonfatalErrRepEn:1 ; ///<
    UINT32                                            FatalErrRepEn:1 ; ///<
    UINT32                                            Reserved_31_3:29; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x17C_STRUCT;

// **** DxF0x180 Register Definition ****
// Address
#define DxF0x180_ADDRESS                                        0x180

// Type
#define DxF0x180_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x180_ErrCorrRcvd_OFFSET                             0
#define DxF0x180_ErrCorrRcvd_WIDTH                              1
#define DxF0x180_ErrCorrRcvd_MASK                               0x1
#define DxF0x180_MultErrCorrRcvd_OFFSET                         1
#define DxF0x180_MultErrCorrRcvd_WIDTH                          1
#define DxF0x180_MultErrCorrRcvd_MASK                           0x2
#define DxF0x180_ErrFatalNonfatalRcvd_OFFSET                    2
#define DxF0x180_ErrFatalNonfatalRcvd_WIDTH                     1
#define DxF0x180_ErrFatalNonfatalRcvd_MASK                      0x4
#define DxF0x180_MultErrFatalNonfatalRcvd_OFFSET                3
#define DxF0x180_MultErrFatalNonfatalRcvd_WIDTH                 1
#define DxF0x180_MultErrFatalNonfatalRcvd_MASK                  0x8
#define DxF0x180_FirstUncorrFatalRcvd_OFFSET                    4
#define DxF0x180_FirstUncorrFatalRcvd_WIDTH                     1
#define DxF0x180_FirstUncorrFatalRcvd_MASK                      0x10
#define DxF0x180_NonFatalErrMsgRcvd_OFFSET                      5
#define DxF0x180_NonFatalErrMsgRcvd_WIDTH                       1
#define DxF0x180_NonFatalErrMsgRcvd_MASK                        0x20
#define DxF0x180_NFatalErrMsgRcvd_OFFSET                        6
#define DxF0x180_NFatalErrMsgRcvd_WIDTH                         1
#define DxF0x180_NFatalErrMsgRcvd_MASK                          0x40
#define DxF0x180_Reserved_26_7_OFFSET                           7
#define DxF0x180_Reserved_26_7_WIDTH                            20
#define DxF0x180_Reserved_26_7_MASK                             0x7ffff80
#define DxF0x180_AdvErrIntMsgNum_OFFSET                         27
#define DxF0x180_AdvErrIntMsgNum_WIDTH                          5
#define DxF0x180_AdvErrIntMsgNum_MASK                           0xf8000000

/// DxF0x180
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              ErrCorrRcvd:1 ; ///<Set when a correctable error message is received and this bit is not already set.
    UINT32                                          MultErrCorrRcvd:1 ; ///<Set when a correctable error message is received and ErrCorrRcvd is already set.
    UINT32                                     ErrFatalNonfatalRcvd:1 ; ///<Set when either a fatal or a non-fatal error is received and this bit is not already set.
    UINT32                                 MultErrFatalNonfatalRcvd:1 ; ///<Set when either a fatal or a non-fatal error is received and ErrFatalNonfatalRcvd is already set.
    UINT32                                     FirstUncorrFatalRcvd:1 ; ///<Set to 1 when the first uncorrectable error message received is for a fatal error.
    UINT32                                       NonFatalErrMsgRcvd:1 ; ///<Set to 1 when one or more non-fatal uncorrectable error messages have been received.
    UINT32                                         NFatalErrMsgRcvd:1 ; ///<Set to 1 when one or more fatal uncorrectable error messages have been received.
    UINT32                                            Reserved_26_7:20; ///<
    UINT32                                          AdvErrIntMsgNum:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x180_STRUCT;

// **** DxF0x184 Register Definition ****
// Address
#define DxF0x184_ADDRESS                                        0x184

// Type
#define DxF0x184_TYPE                                           TYPE_D4F0
// Field Data
#define DxF0x184_ErrCorlSrcID_OFFSET                            0
#define DxF0x184_ErrCorlSrcID_WIDTH                             16
#define DxF0x184_ErrCorlSrcID_MASK                              0xffff
#define DxF0x184_ErrFatalNonfatalSrcID_OFFSET                   16
#define DxF0x184_ErrFatalNonfatalSrcID_WIDTH                    16
#define DxF0x184_ErrFatalNonfatalSrcID_MASK                     0xffff0000

/// DxF0x184
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             ErrCorlSrcID:16; ///<Loaded with the requestor ID indicated in the received ERR_COR message when D[8:4]F0x180[ErrCorrRcvd] is not already set.
    UINT32                                    ErrFatalNonfatalSrcID:16; ///<Loaded with the requestor ID indicated in the received ERR_FATAL or ERR_NONFATAL message when D[8:4]F0x180[ErrFatalNonfatalRcvd] is not already set.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0x184_STRUCT;

// **** FCRxFE00_6000 Register Definition ****
// Address
#define FCRxFE00_6000_ADDRESS                                   0xfe006000

// Type
#define FCRxFE00_6000_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_6000_Reserved_6_0_OFFSET                       0
#define FCRxFE00_6000_Reserved_6_0_WIDTH                        7
#define FCRxFE00_6000_Reserved_6_0_MASK                         0x7f
#define FCRxFE00_6000_NbPs0Vid_OFFSET                           7
#define FCRxFE00_6000_NbPs0Vid_WIDTH                            7
#define FCRxFE00_6000_NbPs0Vid_MASK                             0x3f80
#define FCRxFE00_6000_NbPs1Vid_OFFSET                           14
#define FCRxFE00_6000_NbPs1Vid_WIDTH                            7
#define FCRxFE00_6000_NbPs1Vid_MASK                             0x1fc000
#define FCRxFE00_6000_Reserved_31_21_OFFSET                     21
#define FCRxFE00_6000_Reserved_31_21_WIDTH                      11
#define FCRxFE00_6000_Reserved_31_21_MASK                       0xffe00000

/// FCRxFE00_6000
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                                 NbPs0Vid:7 ; ///<Specifies the initial NBP0 voltage. See 2.5.5.1.1 [BIOS Requirements for NB P-state Initialization During DRAM Training].
    UINT32                                                 NbPs1Vid:7 ; ///<Specifies the initial NBP1 voltage. See 2.5.5.1.1 [BIOS Requirements for NB P-state Initialization During DRAM Training].
    UINT32                                           Reserved_31_21:11; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_6000_STRUCT;

// **** FCRxFE00_6002 Register Definition ****
// Address
#define FCRxFE00_6002_ADDRESS                                   0xfe006002

// Type
#define FCRxFE00_6002_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_6002_Reserved_4_0_OFFSET                       0
#define FCRxFE00_6002_Reserved_4_0_WIDTH                        5
#define FCRxFE00_6002_Reserved_4_0_MASK                         0x1f
#define FCRxFE00_6002_NbPs1VidAddl_OFFSET                       5
#define FCRxFE00_6002_NbPs1VidAddl_WIDTH                        7
#define FCRxFE00_6002_NbPs1VidAddl_MASK                         0xfe0
#define FCRxFE00_6002_NbPs1VidHigh_OFFSET                       12
#define FCRxFE00_6002_NbPs1VidHigh_WIDTH                        7
#define FCRxFE00_6002_NbPs1VidHigh_MASK                         0x7f000
#define FCRxFE00_6002_Reserved_31_19_OFFSET                     19
#define FCRxFE00_6002_Reserved_31_19_WIDTH                      13
#define FCRxFE00_6002_Reserved_31_19_MASK                       0xfff80000

/// FCRxFE00_6002
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                             NbPs1VidAddl:7 ; ///<Specifies a VID code used when calculating NB P-state voltages. See 2.5.5.1.1 [BIOS Requirements for NB P-state Initialization During DRAM Training].
    UINT32                                             NbPs1VidHigh:7 ; ///<Specifies a VID code used when calculating NB P-state voltages. See 2.5.5.1.1 [BIOS Requirements for NB P-state Initialization During DRAM Training].
    UINT32                                           Reserved_31_19:13; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_6002_STRUCT;

// **** FCRxFE00_600E Register Definition ****
// Address
#define FCRxFE00_600E_ADDRESS                                   0xfe00600e

// Field Data
#define FCRxFE00_600E_MainPllOpFreqIdStartup_OFFSET             0
#define FCRxFE00_600E_MainPllOpFreqIdStartup_WIDTH              6
#define FCRxFE00_600E_WrCkDid_OFFSET                            10
#define FCRxFE00_600E_WrCkDid_WIDTH                             5

/// FCRxFE00_600E
typedef union {
  struct {
    UINT32                                   MainPllOpFreqIdStartup:6 ; ///<
    UINT32                                                 Reserved:5 ; ///<
    UINT32                                                  WrCkDid:5 ; ///<
  } Field;
  UINT32 Value;
} FCRxFE00_600E_STRUCT;

// **** FCRxFE00_7006 Register Definition ****
// Address
#define FCRxFE00_7006_ADDRESS                                   0xfe007006

// Type
#define FCRxFE00_7006_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_7006_Reserved_13_0_OFFSET                      0
#define FCRxFE00_7006_Reserved_13_0_WIDTH                       14
#define FCRxFE00_7006_Reserved_13_0_MASK                        0x3fff
#define FCRxFE00_7006_NbPs1NclkDiv_OFFSET                       14
#define FCRxFE00_7006_NbPs1NclkDiv_WIDTH                        7
#define FCRxFE00_7006_NbPs1NclkDiv_MASK                         0x1fc000
#define FCRxFE00_7006_MaxNbFreqAtMinVid_OFFSET                  21
#define FCRxFE00_7006_MaxNbFreqAtMinVid_WIDTH                   5
#define FCRxFE00_7006_MaxNbFreqAtMinVid_MASK                    0x3e00000
#define FCRxFE00_7006_Reserved_31_26_OFFSET                     26
#define FCRxFE00_7006_Reserved_31_26_WIDTH                      6
#define FCRxFE00_7006_Reserved_31_26_MASK                       0xfc000000

/// FCRxFE00_7006
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            Reserved_13_0:14; ///<
    UINT32                                             NbPs1NclkDiv:7 ; ///<Specifies the initial NBP1 frequency. See 2.5.5.1.1 [BIOS Requirements for NB P-state Initialization During DRAM Training].
    UINT32                                        MaxNbFreqAtMinVid:5 ; ///<Specifies a frequency used when calculating NB P-state frequencies. See 2.5.5.1.1 [BIOS Requirements for NB P-state Initialization During DRAM Training].
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_7006_STRUCT;

// **** FCRxFE00_7009 Register Definition ****
// Address
#define FCRxFE00_7009_ADDRESS                                   0xfe007009

// Type
#define FCRxFE00_7009_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_7009_Reserved_1_0_OFFSET                       0
#define FCRxFE00_7009_Reserved_1_0_WIDTH                        2
#define FCRxFE00_7009_Reserved_1_0_MASK                         0x3
#define FCRxFE00_7009_NbPs0NclkDiv_OFFSET                       2
#define FCRxFE00_7009_NbPs0NclkDiv_WIDTH                        7
#define FCRxFE00_7009_NbPs0NclkDiv_MASK                         0x1fc
#define FCRxFE00_7009_Reserved_31_9_OFFSET                      9
#define FCRxFE00_7009_Reserved_31_9_WIDTH                       23
#define FCRxFE00_7009_Reserved_31_9_MASK                        0xfffffe00

/// FCRxFE00_7009
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_1_0:2 ; ///<
    UINT32                                             NbPs0NclkDiv:7 ; ///<Specifies the initial NBP0 frequency. See 2.5.5.1.1 [BIOS Requirements for NB P-state Initialization During DRAM Training].
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_7009_STRUCT;

// **** FCRxFE00_7070 Register Definition ****
// Address
#define FCRxFE00_7070_ADDRESS                                   0xfe007070

// Type
#define FCRxFE00_7070_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_7070_Reserved_2_0_OFFSET                       0
#define FCRxFE00_7070_Reserved_2_0_WIDTH                        3
#define FCRxFE00_7070_Reserved_2_0_MASK                         0x7
#define FCRxFE00_7070_GnbIdleAdjustVid_OFFSET                   3
#define FCRxFE00_7070_GnbIdleAdjustVid_WIDTH                    4
#define FCRxFE00_7070_GnbIdleAdjustVid_MASK                     0x78
#define FCRxFE00_7070_Reserved_31_7_OFFSET                      7
#define FCRxFE00_7070_Reserved_31_7_WIDTH                       25
#define FCRxFE00_7070_Reserved_31_7_MASK                        0xffffff80

/// FCRxFE00_7070
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_2_0:3 ; ///<
    UINT32                                         GnbIdleAdjustVid:4 ; ///<Specifies the voltage offset that is subtracted from VDDNB as specified by FCRxFF30_0191[GfxIdleVoltChgMode, GfxIdleVoltChgMode]. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating] and 2.5.6.7 [GPU and Root Complex Power Gating].  Voltage offset = GnbIdleAdjustVid * 12.5 mV.
    UINT32                                            Reserved_31_7:25; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_7070_STRUCT;

// **** FCRxFE00_70A2 Register Definition ****
// Address
#define FCRxFE00_70A2_ADDRESS                                   0xfe0070a2

// Type
#define FCRxFE00_70A2_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70A2_Reserved_6_0_OFFSET                       0
#define FCRxFE00_70A2_Reserved_6_0_WIDTH                        7
#define FCRxFE00_70A2_Reserved_6_0_MASK                         0x7f
#define FCRxFE00_70A2_PPlayTableRev_OFFSET                      7
#define FCRxFE00_70A2_PPlayTableRev_WIDTH                       4
#define FCRxFE00_70A2_PPlayTableRev_MASK                        0x780
#define FCRxFE00_70A2_SclkThermDid_OFFSET                       11
#define FCRxFE00_70A2_SclkThermDid_WIDTH                        7
#define FCRxFE00_70A2_SclkThermDid_MASK                         0x3f800
#define FCRxFE00_70A2_PcieGen2Vid_OFFSET                        18
#define FCRxFE00_70A2_PcieGen2Vid_WIDTH                         2
#define FCRxFE00_70A2_PcieGen2Vid_MASK                          0xc0000
#define FCRxFE00_70A2_Reserved_31_20_OFFSET                     20
#define FCRxFE00_70A2_Reserved_31_20_WIDTH                      12
#define FCRxFE00_70A2_Reserved_31_20_MASK                       0xfff00000

/// FCRxFE00_70A2
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                            PPlayTableRev:4 ; ///<
    UINT32                                             SclkThermDid:7 ; ///<
    UINT32                                              PcieGen2Vid:2 ; ///<Specifies the voltage required for generation 2 PCIe operation. See 2.5.2.3 [BIOS Requirements for Power Plane Initialization]. This field indexes into D18F3x15C as follows:
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70A2_STRUCT;

// **** FCRxFF30_0191 Register Definition ****
// Address
#define FCRxFF30_0191_ADDRESS                                   0xff300191

// Type
#define FCRxFF30_0191_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFF30_0191_SclkPwrMgmtOff_OFFSET                     0
#define FCRxFF30_0191_SclkPwrMgmtOff_WIDTH                      1
#define FCRxFF30_0191_SclkPwrMgmtOff_MASK                       0x1
#define FCRxFF30_0191_SclkLowD1_OFFSET                          1
#define FCRxFF30_0191_SclkLowD1_WIDTH                           1
#define FCRxFF30_0191_SclkLowD1_MASK                            0x2
#define FCRxFF30_0191_Reserved_3_2_OFFSET                       2
#define FCRxFF30_0191_Reserved_3_2_WIDTH                        2
#define FCRxFF30_0191_Reserved_3_2_MASK                         0xc
#define FCRxFF30_0191_FirReset_OFFSET                           4
#define FCRxFF30_0191_FirReset_WIDTH                            1
#define FCRxFF30_0191_FirReset_MASK                             0x10
#define FCRxFF30_0191_FirForceTrendSel_OFFSET                   5
#define FCRxFF30_0191_FirForceTrendSel_WIDTH                    1
#define FCRxFF30_0191_FirForceTrendSel_MASK                     0x20
#define FCRxFF30_0191_FirTrendMode_OFFSET                       6
#define FCRxFF30_0191_FirTrendMode_WIDTH                        1
#define FCRxFF30_0191_FirTrendMode_MASK                         0x40
#define FCRxFF30_0191_DynGfxClkOffEn_OFFSET                     7
#define FCRxFF30_0191_DynGfxClkOffEn_WIDTH                      1
#define FCRxFF30_0191_DynGfxClkOffEn_MASK                       0x80
#define FCRxFF30_0191_GfxClkForceOn_OFFSET                      8
#define FCRxFF30_0191_GfxClkForceOn_WIDTH                       1
#define FCRxFF30_0191_GfxClkForceOn_MASK                        0x100
#define FCRxFF30_0191_GfxClkRequestOff_OFFSET                   9
#define FCRxFF30_0191_GfxClkRequestOff_WIDTH                    1
#define FCRxFF30_0191_GfxClkRequestOff_MASK                     0x200
#define FCRxFF30_0191_GfxClkForceOff_OFFSET                     10
#define FCRxFF30_0191_GfxClkForceOff_WIDTH                      1
#define FCRxFF30_0191_GfxClkForceOff_MASK                       0x400
#define FCRxFF30_0191_GfxClkOffAcpiD1_OFFSET                    11
#define FCRxFF30_0191_GfxClkOffAcpiD1_WIDTH                     1
#define FCRxFF30_0191_GfxClkOffAcpiD1_MASK                      0x800
#define FCRxFF30_0191_GfxClkOffAcpiD2_OFFSET                    12
#define FCRxFF30_0191_GfxClkOffAcpiD2_WIDTH                     1
#define FCRxFF30_0191_GfxClkOffAcpiD2_MASK                      0x1000
#define FCRxFF30_0191_GfxClkOffAcpiD3_OFFSET                    13
#define FCRxFF30_0191_GfxClkOffAcpiD3_WIDTH                     1
#define FCRxFF30_0191_GfxClkOffAcpiD3_MASK                      0x2000
#define FCRxFF30_0191_Reserved_14_14_OFFSET                     14
#define FCRxFF30_0191_Reserved_14_14_WIDTH                      1
#define FCRxFF30_0191_Reserved_14_14_MASK                       0x4000
#define FCRxFF30_0191_Reserved_15_15_OFFSET                     15
#define FCRxFF30_0191_Reserved_15_15_WIDTH                      1
#define FCRxFF30_0191_Reserved_15_15_MASK                       0x8000
#define FCRxFF30_0191_GfxIdleVoltChgEn_OFFSET                   16
#define FCRxFF30_0191_GfxIdleVoltChgEn_WIDTH                    1
#define FCRxFF30_0191_GfxIdleVoltChgEn_MASK                     0x10000
#define FCRxFF30_0191_GfxIdleVoltChgMode_OFFSET                 17
#define FCRxFF30_0191_GfxIdleVoltChgMode_WIDTH                  1
#define FCRxFF30_0191_GfxIdleVoltChgMode_MASK                   0x20000
#define FCRxFF30_0191_Reserved_31_18_OFFSET                     18
#define FCRxFF30_0191_Reserved_31_18_WIDTH                      14
#define FCRxFF30_0191_Reserved_31_18_MASK                       0xfffc0000

/// FCRxFF30_0191
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           SclkPwrMgmtOff:1 ; ///<
    UINT32                                                SclkLowD1:1 ; ///<
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                                 FirReset:1 ; ///< See 2.5.6.2.1 [Activity Monitor].
    UINT32                                         FirForceTrendSel:1 ; ///<See FCRxFF30_0191[FirTrendMode].
    UINT32                                             FirTrendMode:1 ; ///<When FCRxFF30_0191[FirForceTrendSel]==1, this field specified the trend used by the activity monitor FIR filter. See 2.5.6.2.1 [Activity Monitor].
    UINT32                                           DynGfxClkOffEn:1 ; ///<Specifies whether SCLK distributed to the GPU can be gated off opportunistically. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                            GfxClkForceOn:1 ; ///< See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                         GfxClkRequestOff:1 ; ///<
    UINT32                                           GfxClkForceOff:1 ; ///<
    UINT32                                          GfxClkOffAcpiD1:1 ; ///<Specifies whether SCLK distributed to the GPU is gated off in certain conditions. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                          GfxClkOffAcpiD2:1 ; ///<See: FCRxFF30_0191[GfxClkOffAcpiD1].
    UINT32                                          GfxClkOffAcpiD3:1 ; ///<See: FCRxFF30_0191[GfxClkOffAcpiD1].
    UINT32                                           Reserved_14_14:1 ; ///<GfxSclkOffGpuDis: Not used.
    UINT32                                           Reserved_15_15:1 ; ///<GfxSclkOffGpuDisIOC: Not used.
    UINT32                                         GfxIdleVoltChgEn:1 ; ///<Specifies whether hardware reduces the VDDNB voltage when the GPU is clock gated or power gated. See 2.5.2.4.2 [Alternate Low Power Voltages].
    UINT32                                       GfxIdleVoltChgMode:1 ; ///<Specifies whether the GPU must be power gated or clock gated before hardware can reduce the VDDNB voltage. See 2.5.2.4.2 [Alternate Low Power Voltages].
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_0191_STRUCT;

// **** GMMx100 Register Definition ****
// Address
#define GMMx100_ADDRESS                                         0x100

// Type
#define GMMx100_TYPE                                            TYPE_GMM
// Field Data
#define GMMx100_RcuIndIndex_OFFSET                              0
#define GMMx100_RcuIndIndex_WIDTH                               32
#define GMMx100_RcuIndIndex_MASK                                0xffffffff

/// GMMx100
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              RcuIndIndex:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx100_STRUCT;

// **** GMMx104 Register Definition ****
// Address
#define GMMx104_ADDRESS                                         0x104

// Type
#define GMMx104_TYPE                                            TYPE_GMM
// Field Data
#define GMMx104_RcuIndData_OFFSET                               0
#define GMMx104_RcuIndData_WIDTH                                32
#define GMMx104_RcuIndData_MASK                                 0xffffffff

/// GMMx104
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               RcuIndData:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx104_STRUCT;

// **** GMMx670 Register Definition ****
// Address
#define GMMx670_ADDRESS                                         0x670

// Type
#define GMMx670_TYPE                                            TYPE_GMM
// Field Data
#define GMMx670_WrtDis_OFFSET                                   0
#define GMMx670_WrtDis_WIDTH                                    1
#define GMMx670_WrtDis_MASK                                     0x1
#define GMMx670_GpuDis_OFFSET                                   1
#define GMMx670_GpuDis_WIDTH                                    1
#define GMMx670_GpuDis_MASK                                     0x2
#define GMMx670_GnbSSTdpLmt_OFFSET                              2
#define GMMx670_GnbSSTdpLmt_WIDTH                               8
#define GMMx670_GnbSSTdpLmt_MASK                                0x3fc
#define GMMx670_LclkDivDwnMod_OFFSET                            10
#define GMMx670_LclkDivDwnMod_WIDTH                             7
#define GMMx670_LclkDivDwnMod_MASK                              0x1fc00
#define GMMx670_Reserved_31_17_OFFSET                           17
#define GMMx670_Reserved_31_17_WIDTH                            15
#define GMMx670_Reserved_31_17_MASK                             0xfffe0000

/// GMMx670
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   WrtDis:1 ; ///<Specifies whether GMMx670 may be written by software.
    UINT32                                                   GpuDis:1 ; ///<Specifies whether the GPU is disabled.
    UINT32                                              GnbSSTdpLmt:8 ; ///<
    UINT32                                            LclkDivDwnMod:7 ; ///<This field is unused.
    UINT32                                           Reserved_31_17:15; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx670_STRUCT;

// **** GMMx770 Register Definition ****
// Address
#define GMMx770_ADDRESS                                         0x770

// Type
#define GMMx770_TYPE                                            TYPE_GMM
// Field Data
#define GMMx770_VoltageChangeReq_OFFSET                         0
#define GMMx770_VoltageChangeReq_WIDTH                          1
#define GMMx770_VoltageChangeReq_MASK                           0x1
#define GMMx770_VoltageLevel_OFFSET                             1
#define GMMx770_VoltageLevel_WIDTH                              2
#define GMMx770_VoltageLevel_MASK                               0x6
#define GMMx770_VoltageChangeEn_OFFSET                          3
#define GMMx770_VoltageChangeEn_WIDTH                           1
#define GMMx770_VoltageChangeEn_MASK                            0x8
#define GMMx770_VoltageForceEn_OFFSET                           4
#define GMMx770_VoltageForceEn_WIDTH                            1
#define GMMx770_VoltageForceEn_MASK                             0x10
#define GMMx770_Reserved_31_5_OFFSET                            5
#define GMMx770_Reserved_31_5_WIDTH                             27
#define GMMx770_Reserved_31_5_MASK                              0xffffffe0

/// GMMx770
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         VoltageChangeReq:1 ; ///<See D0F0x64_x6A[VoltageChangeReq].
    UINT32                                             VoltageLevel:2 ; ///<See D0F0x64_x6A[VoltageLevel].
    UINT32                                          VoltageChangeEn:1 ; ///<See D0F0x64_x6A[VoltageChangeEn].
    UINT32                                           VoltageForceEn:1 ; ///<See D0F0x64_x6A[VoltageForceEn].
    UINT32                                            Reserved_31_5:27; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx770_STRUCT;

// **** GMMx774 Register Definition ****
// Address
#define GMMx774_ADDRESS                                         0x774

// Type
#define GMMx774_TYPE                                            TYPE_GMM
// Field Data
#define GMMx774_VoltageChangeAck_OFFSET                         0
#define GMMx774_VoltageChangeAck_WIDTH                          1
#define GMMx774_VoltageChangeAck_MASK                           0x1
#define GMMx774_CurrentVoltageLevel_OFFSET                      1
#define GMMx774_CurrentVoltageLevel_WIDTH                       2
#define GMMx774_CurrentVoltageLevel_MASK                        0x6
#define GMMx774_Reserved_31_3_OFFSET                            3
#define GMMx774_Reserved_31_3_WIDTH                             29
#define GMMx774_Reserved_31_3_MASK                              0xfffffff8

/// GMMx774
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         VoltageChangeAck:1 ; ///<See D0F0x64_x6B[VoltageChangeAck].
    UINT32                                      CurrentVoltageLevel:2 ; ///<See D0F0x64_x6B[CurrentVoltageLevel].
    UINT32                                            Reserved_31_3:29; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx774_STRUCT;

// **** GMMx2024 Register Definition ****
// Address
#define GMMx2024_ADDRESS                                        0x2024

// Type
#define GMMx2024_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2024_Base_OFFSET                                    0
#define GMMx2024_Base_WIDTH                                     16
#define GMMx2024_Base_MASK                                      0xffff
#define GMMx2024_Top_OFFSET                                     16
#define GMMx2024_Top_WIDTH                                      16
#define GMMx2024_Top_MASK                                       0xffff0000

/// GMMx2024
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Base:16; ///<Specifies the GPU base address of the frame buffer.
    UINT32                                                      Top:16; ///<Specifies the GPU address of the top of the frame buffer region 0.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2024_STRUCT;

// **** GMMx2028 Register Definition ****
// Address
#define GMMx2028_ADDRESS                                        0x2028

// Type
#define GMMx2028_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2028_SysTop_39_22__OFFSET                           0
#define GMMx2028_SysTop_39_22__WIDTH                            18
#define GMMx2028_SysTop_39_22__MASK                             0x3ffff
#define GMMx2028_Reserved_31_18_OFFSET                          18
#define GMMx2028_Reserved_31_18_WIDTH                           14
#define GMMx2028_Reserved_31_18_MASK                            0xfffc0000

/// GMMx2028
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            SysTop_39_22_:18; ///<
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2028_STRUCT;

// **** GMMx202C Register Definition ****
// Address
#define GMMx202C_ADDRESS                                        0x202c

// Type
#define GMMx202C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx202C_SysBot_39_22__OFFSET                           0
#define GMMx202C_SysBot_39_22__WIDTH                            18
#define GMMx202C_SysBot_39_22__MASK                             0x3ffff
#define GMMx202C_Reserved_31_18_OFFSET                          18
#define GMMx202C_Reserved_31_18_WIDTH                           14
#define GMMx202C_Reserved_31_18_MASK                            0xfffc0000

/// GMMx202C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            SysBot_39_22_:18; ///<
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx202C_STRUCT;

// **** GMMx277C Register Definition ****
// Address
#define GMMx277C_ADDRESS                                        0x277c

// Type
#define GMMx277C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx277C_ActRd_OFFSET                                   0
#define GMMx277C_ActRd_WIDTH                                    8
#define GMMx277C_ActRd_MASK                                     0xff
#define GMMx277C_ActWr_OFFSET                                   8
#define GMMx277C_ActWr_WIDTH                                    8
#define GMMx277C_ActWr_MASK                                     0xff00
#define GMMx277C_RasMActRd_OFFSET                               16
#define GMMx277C_RasMActRd_WIDTH                                8
#define GMMx277C_RasMActRd_MASK                                 0xff0000
#define GMMx277C_RasMActWr_OFFSET                               24
#define GMMx277C_RasMActWr_WIDTH                                8
#define GMMx277C_RasMActWr_MASK                                 0xff000000

/// GMMx277C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    ActRd:8 ; ///<
    UINT32                                                    ActWr:8 ; ///<
    UINT32                                                RasMActRd:8 ; ///<
    UINT32                                                RasMActWr:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx277C_STRUCT;

// **** GMMx2780 Register Definition ****
// Address
#define GMMx2780_ADDRESS                                        0x2780

// Type
#define GMMx2780_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2780_Ras2Ras_OFFSET                                 0
#define GMMx2780_Ras2Ras_WIDTH                                  8
#define GMMx2780_Ras2Ras_MASK                                   0xff
#define GMMx2780_Rp_OFFSET                                      8
#define GMMx2780_Rp_WIDTH                                       8
#define GMMx2780_Rp_MASK                                        0xff00
#define GMMx2780_WrPlusRp_OFFSET                                16
#define GMMx2780_WrPlusRp_WIDTH                                 8
#define GMMx2780_WrPlusRp_MASK                                  0xff0000
#define GMMx2780_BusTurn_OFFSET                                 24
#define GMMx2780_BusTurn_WIDTH                                  8
#define GMMx2780_BusTurn_MASK                                   0xff000000

/// GMMx2780
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Ras2Ras:8 ; ///<
    UINT32                                                       Rp:8 ; ///<
    UINT32                                                 WrPlusRp:8 ; ///<
    UINT32                                                  BusTurn:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2780_STRUCT;

// **** GMMx281C Register Definition ****
// Address
#define GMMx281C_ADDRESS                                        0x281c

// Type
#define GMMx281C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx281C_CSEnable_OFFSET                                0
#define GMMx281C_CSEnable_WIDTH                                 1
#define GMMx281C_CSEnable_MASK                                  0x1
#define GMMx281C_Reserved_4_1_OFFSET                            1
#define GMMx281C_Reserved_4_1_WIDTH                             4
#define GMMx281C_Reserved_4_1_MASK                              0x1e
#define GMMx281C_BaseAddr_21_13__OFFSET                         5
#define GMMx281C_BaseAddr_21_13__WIDTH                          9
#define GMMx281C_BaseAddr_21_13__MASK                           0x3fe0
#define GMMx281C_Reserved_18_14_OFFSET                          14
#define GMMx281C_Reserved_18_14_WIDTH                           5
#define GMMx281C_Reserved_18_14_MASK                            0x7c000
#define GMMx281C_BaseAddr_35_27__OFFSET                         19
#define GMMx281C_BaseAddr_35_27__WIDTH                          9
#define GMMx281C_BaseAddr_35_27__MASK                           0xff80000
#define GMMx281C_Reserved_28_28_OFFSET                          28
#define GMMx281C_Reserved_28_28_WIDTH                           1
#define GMMx281C_Reserved_28_28_MASK                            0x10000000
#define GMMx281C_Reserved_31_29_OFFSET                          29
#define GMMx281C_Reserved_31_29_WIDTH                           3
#define GMMx281C_Reserved_31_29_MASK                            0xe0000000

/// GMMx281C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_4_1:4 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///<BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx281C_STRUCT;

// **** GMMx2824 Register Definition ****
// Address
#define GMMx2824_ADDRESS                                        0x2824

// Type
#define GMMx2824_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2824_CSEnable_OFFSET                                0
#define GMMx2824_CSEnable_WIDTH                                 1
#define GMMx2824_CSEnable_MASK                                  0x1
#define GMMx2824_Reserved_4_1_OFFSET                            1
#define GMMx2824_Reserved_4_1_WIDTH                             4
#define GMMx2824_Reserved_4_1_MASK                              0x1e
#define GMMx2824_BaseAddr_21_13__OFFSET                         5
#define GMMx2824_BaseAddr_21_13__WIDTH                          9
#define GMMx2824_BaseAddr_21_13__MASK                           0x3fe0
#define GMMx2824_Reserved_18_14_OFFSET                          14
#define GMMx2824_Reserved_18_14_WIDTH                           5
#define GMMx2824_Reserved_18_14_MASK                            0x7c000
#define GMMx2824_BaseAddr_35_27__OFFSET                         19
#define GMMx2824_BaseAddr_35_27__WIDTH                          9
#define GMMx2824_BaseAddr_35_27__MASK                           0xff80000
#define GMMx2824_Reserved_28_28_OFFSET                          28
#define GMMx2824_Reserved_28_28_WIDTH                           1
#define GMMx2824_Reserved_28_28_MASK                            0x10000000
#define GMMx2824_Reserved_31_29_OFFSET                          29
#define GMMx2824_Reserved_31_29_WIDTH                           3
#define GMMx2824_Reserved_31_29_MASK                            0xe0000000

/// GMMx2824
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_4_1:4 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///<BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2824_STRUCT;

// **** GMMx282C Register Definition ****
// Address
#define GMMx282C_ADDRESS                                        0x282c

// Type
#define GMMx282C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx282C_CSEnable_OFFSET                                0
#define GMMx282C_CSEnable_WIDTH                                 1
#define GMMx282C_CSEnable_MASK                                  0x1
#define GMMx282C_Reserved_4_1_OFFSET                            1
#define GMMx282C_Reserved_4_1_WIDTH                             4
#define GMMx282C_Reserved_4_1_MASK                              0x1e
#define GMMx282C_BaseAddr_21_13__OFFSET                         5
#define GMMx282C_BaseAddr_21_13__WIDTH                          9
#define GMMx282C_BaseAddr_21_13__MASK                           0x3fe0
#define GMMx282C_Reserved_18_14_OFFSET                          14
#define GMMx282C_Reserved_18_14_WIDTH                           5
#define GMMx282C_Reserved_18_14_MASK                            0x7c000
#define GMMx282C_BaseAddr_35_27__OFFSET                         19
#define GMMx282C_BaseAddr_35_27__WIDTH                          9
#define GMMx282C_BaseAddr_35_27__MASK                           0xff80000
#define GMMx282C_Reserved_28_28_OFFSET                          28
#define GMMx282C_Reserved_28_28_WIDTH                           1
#define GMMx282C_Reserved_28_28_MASK                            0x10000000
#define GMMx282C_Reserved_31_29_OFFSET                          29
#define GMMx282C_Reserved_31_29_WIDTH                           3
#define GMMx282C_Reserved_31_29_MASK                            0xe0000000

/// GMMx282C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_4_1:4 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///<BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx282C_STRUCT;

// **** GMMx2834 Register Definition ****
// Address
#define GMMx2834_ADDRESS                                        0x2834

// Type
#define GMMx2834_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2834_CSEnable_OFFSET                                0
#define GMMx2834_CSEnable_WIDTH                                 1
#define GMMx2834_CSEnable_MASK                                  0x1
#define GMMx2834_Reserved_4_1_OFFSET                            1
#define GMMx2834_Reserved_4_1_WIDTH                             4
#define GMMx2834_Reserved_4_1_MASK                              0x1e
#define GMMx2834_BaseAddr_21_13__OFFSET                         5
#define GMMx2834_BaseAddr_21_13__WIDTH                          9
#define GMMx2834_BaseAddr_21_13__MASK                           0x3fe0
#define GMMx2834_Reserved_18_14_OFFSET                          14
#define GMMx2834_Reserved_18_14_WIDTH                           5
#define GMMx2834_Reserved_18_14_MASK                            0x7c000
#define GMMx2834_BaseAddr_35_27__OFFSET                         19
#define GMMx2834_BaseAddr_35_27__WIDTH                          9
#define GMMx2834_BaseAddr_35_27__MASK                           0xff80000
#define GMMx2834_Reserved_28_28_OFFSET                          28
#define GMMx2834_Reserved_28_28_WIDTH                           1
#define GMMx2834_Reserved_28_28_MASK                            0x10000000
#define GMMx2834_Reserved_31_29_OFFSET                          29
#define GMMx2834_Reserved_31_29_WIDTH                           3
#define GMMx2834_Reserved_31_29_MASK                            0xe0000000

/// GMMx2834
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 CSEnable:1 ; ///<
    UINT32                                             Reserved_4_1:4 ; ///<
    UINT32                                          BaseAddr_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          BaseAddr_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///<BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2834_STRUCT;

// **** GMMx283C Register Definition ****
// Address
#define GMMx283C_ADDRESS                                        0x283c

// Type
#define GMMx283C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx283C_Reserved_4_0_OFFSET                            0
#define GMMx283C_Reserved_4_0_WIDTH                             5
#define GMMx283C_Reserved_4_0_MASK                              0x1f
#define GMMx283C_AddrMask_21_13__OFFSET                         5
#define GMMx283C_AddrMask_21_13__WIDTH                          9
#define GMMx283C_AddrMask_21_13__MASK                           0x3fe0
#define GMMx283C_Reserved_18_14_OFFSET                          14
#define GMMx283C_Reserved_18_14_WIDTH                           5
#define GMMx283C_Reserved_18_14_MASK                            0x7c000
#define GMMx283C_AddrMask_35_27__OFFSET                         19
#define GMMx283C_AddrMask_35_27__WIDTH                          9
#define GMMx283C_AddrMask_35_27__MASK                           0xff80000
#define GMMx283C_Reserved_28_28_OFFSET                          28
#define GMMx283C_Reserved_28_28_WIDTH                           1
#define GMMx283C_Reserved_28_28_MASK                            0x10000000
#define GMMx283C_Reserved_31_29_OFFSET                          29
#define GMMx283C_Reserved_31_29_WIDTH                           3
#define GMMx283C_Reserved_31_29_MASK                            0xe0000000

/// GMMx283C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                          AddrMask_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          AddrMask_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///<BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx283C_STRUCT;

// **** GMMx2840 Register Definition ****
// Address
#define GMMx2840_ADDRESS                                        0x2840

// Type
#define GMMx2840_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2840_Reserved_4_0_OFFSET                            0
#define GMMx2840_Reserved_4_0_WIDTH                             5
#define GMMx2840_Reserved_4_0_MASK                              0x1f
#define GMMx2840_AddrMask_21_13__OFFSET                         5
#define GMMx2840_AddrMask_21_13__WIDTH                          9
#define GMMx2840_AddrMask_21_13__MASK                           0x3fe0
#define GMMx2840_Reserved_18_14_OFFSET                          14
#define GMMx2840_Reserved_18_14_WIDTH                           5
#define GMMx2840_Reserved_18_14_MASK                            0x7c000
#define GMMx2840_AddrMask_35_27__OFFSET                         19
#define GMMx2840_AddrMask_35_27__WIDTH                          9
#define GMMx2840_AddrMask_35_27__MASK                           0xff80000
#define GMMx2840_Reserved_28_28_OFFSET                          28
#define GMMx2840_Reserved_28_28_WIDTH                           1
#define GMMx2840_Reserved_28_28_MASK                            0x10000000
#define GMMx2840_Reserved_31_29_OFFSET                          29
#define GMMx2840_Reserved_31_29_WIDTH                           3
#define GMMx2840_Reserved_31_29_MASK                            0xe0000000

/// GMMx2840
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                          AddrMask_21_13_:9 ; ///<
    UINT32                                           Reserved_18_14:5 ; ///<
    UINT32                                          AddrMask_35_27_:9 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///<BaseAddr[36].
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2840_STRUCT;

// **** GMMx284C Register Definition ****
// Address
#define GMMx284C_ADDRESS                                        0x284c

// Type
#define GMMx284C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx284C_Dimm0AddrMap_OFFSET                            0
#define GMMx284C_Dimm0AddrMap_WIDTH                             4
#define GMMx284C_Dimm0AddrMap_MASK                              0xf
#define GMMx284C_Dimm1AddrMap_OFFSET                            4
#define GMMx284C_Dimm1AddrMap_WIDTH                             4
#define GMMx284C_Dimm1AddrMap_MASK                              0xf0
#define GMMx284C_Reserved_15_8_OFFSET                           8
#define GMMx284C_Reserved_15_8_WIDTH                            8
#define GMMx284C_Reserved_15_8_MASK                             0xff00
#define GMMx284C_BankSwizzleMode_OFFSET                         16
#define GMMx284C_BankSwizzleMode_WIDTH                          1
#define GMMx284C_BankSwizzleMode_MASK                           0x10000
#define GMMx284C_Reserved_17_17_OFFSET                          17
#define GMMx284C_Reserved_17_17_WIDTH                           1
#define GMMx284C_Reserved_17_17_MASK                            0x20000
#define GMMx284C_Reserved_18_18_OFFSET                          18
#define GMMx284C_Reserved_18_18_WIDTH                           1
#define GMMx284C_Reserved_18_18_MASK                            0x40000
#define GMMx284C_BankSwap_OFFSET                                19
#define GMMx284C_BankSwap_WIDTH                                 1
#define GMMx284C_BankSwap_MASK                                  0x80000
#define GMMx284C_Reserved_31_20_OFFSET                          20
#define GMMx284C_Reserved_31_20_WIDTH                           12
#define GMMx284C_Reserved_31_20_MASK                            0xfff00000

/// GMMx284C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Dimm0AddrMap:4 ; ///<
    UINT32                                             Dimm1AddrMap:4 ; ///<
    UINT32                                            Reserved_15_8:8 ; ///<
    UINT32                                          BankSwizzleMode:1 ; ///<
    UINT32                                           Reserved_17_17:1 ; ///< Ddr3Mode: Not used.
    UINT32                                           Reserved_18_18:1 ; ///< BurstLength32: Not used.
    UINT32                                                 BankSwap:1 ; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx284C_STRUCT;

// **** GMMx2858 Register Definition ****
// Address
#define GMMx2858_ADDRESS                                        0x2858

// Type
#define GMMx2858_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2858_Reserved_8_0_OFFSET                            0
#define GMMx2858_Reserved_8_0_WIDTH                             9
#define GMMx2858_Reserved_8_0_MASK                              0x1ff
#define GMMx2858_DctSelBankSwap_OFFSET                          9
#define GMMx2858_DctSelBankSwap_WIDTH                           1
#define GMMx2858_DctSelBankSwap_MASK                            0x200
#define GMMx2858_Reserved_23_10_OFFSET                          10
#define GMMx2858_Reserved_23_10_WIDTH                           14
#define GMMx2858_Reserved_23_10_MASK                            0xfffc00
#define GMMx2858_Reserved_31_24_OFFSET                          24
#define GMMx2858_Reserved_31_24_WIDTH                           8
#define GMMx2858_Reserved_31_24_MASK                            0xff000000

/// GMMx2858
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_8_0:9 ; ///<
    UINT32                                           DctSelBankSwap:1 ; ///<
    UINT32                                           Reserved_23_10:14; ///<DctSelBaseOffset[39:26]. This field does not drive any logic.
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2858_STRUCT;

// **** GMMx285C Register Definition ****
// Address
#define GMMx285C_ADDRESS                                        0x285c

// Type
#define GMMx285C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx285C_DramHoleValid_OFFSET                           0
#define GMMx285C_DramHoleValid_WIDTH                            1
#define GMMx285C_DramHoleValid_MASK                             0x1
#define GMMx285C_Reserved_6_1_OFFSET                            1
#define GMMx285C_Reserved_6_1_WIDTH                             6
#define GMMx285C_Reserved_6_1_MASK                              0x7e
#define GMMx285C_DramHoleOffset_31_23__OFFSET                   7
#define GMMx285C_DramHoleOffset_31_23__WIDTH                    9
#define GMMx285C_DramHoleOffset_31_23__MASK                     0xff80
#define GMMx285C_Reserved_23_16_OFFSET                          16
#define GMMx285C_Reserved_23_16_WIDTH                           8
#define GMMx285C_Reserved_23_16_MASK                            0xff0000
#define GMMx285C_DramHoleBase_31_24__OFFSET                     24
#define GMMx285C_DramHoleBase_31_24__WIDTH                      8
#define GMMx285C_DramHoleBase_31_24__MASK                       0xff000000

/// GMMx285C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DramHoleValid:1 ; ///<
    UINT32                                             Reserved_6_1:6 ; ///<
    UINT32                                    DramHoleOffset_31_23_:9 ; ///<
    UINT32                                           Reserved_23_16:8 ; ///<
    UINT32                                      DramHoleBase_31_24_:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx285C_STRUCT;

// **** GMMx2860 Register Definition ****
// Address
#define GMMx2860_ADDRESS                                        0x2860

// **** GMMx2864 Register Definition ****
// Address
#define GMMx2864_ADDRESS                                        0x2864

// Type
#define GMMx2864_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2864_A8Map_OFFSET                                   0
#define GMMx2864_A8Map_WIDTH                                    4
#define GMMx2864_A8Map_MASK                                     0xf
#define GMMx2864_A9Map_OFFSET                                   4
#define GMMx2864_A9Map_WIDTH                                    4
#define GMMx2864_A9Map_MASK                                     0xf0
#define GMMx2864_A10Map_OFFSET                                  8
#define GMMx2864_A10Map_WIDTH                                   4
#define GMMx2864_A10Map_MASK                                    0xf00
#define GMMx2864_A11Map_OFFSET                                  12
#define GMMx2864_A11Map_WIDTH                                   4
#define GMMx2864_A11Map_MASK                                    0xf000
#define GMMx2864_A12Map_OFFSET                                  16
#define GMMx2864_A12Map_WIDTH                                   4
#define GMMx2864_A12Map_MASK                                    0xf0000
#define GMMx2864_A13Map_OFFSET                                  20
#define GMMx2864_A13Map_WIDTH                                   4
#define GMMx2864_A13Map_MASK                                    0xf00000
#define GMMx2864_A14Map_OFFSET                                  24
#define GMMx2864_A14Map_WIDTH                                   4
#define GMMx2864_A14Map_MASK                                    0xf000000
#define GMMx2864_A15Map_OFFSET                                  28
#define GMMx2864_A15Map_WIDTH                                   4
#define GMMx2864_A15Map_MASK                                    0xf0000000

/// GMMx2864
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    A8Map:4 ; ///<
    UINT32                                                    A9Map:4 ; ///<
    UINT32                                                   A10Map:4 ; ///<
    UINT32                                                   A11Map:4 ; ///<
    UINT32                                                   A12Map:4 ; ///<
    UINT32                                                   A13Map:4 ; ///<
    UINT32                                                   A14Map:4 ; ///<
    UINT32                                                   A15Map:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2864_STRUCT;

// **** GMMx286C Register Definition ****
// Address
#define GMMx286C_ADDRESS                                        0x286c

// Type
#define GMMx286C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx286C_Base_OFFSET                                    0
#define GMMx286C_Base_WIDTH                                     20
#define GMMx286C_Base_MASK                                      0xfffff
#define GMMx286C_Reserved_31_20_OFFSET                          20
#define GMMx286C_Reserved_31_20_WIDTH                           12
#define GMMx286C_Reserved_31_20_MASK                            0xfff00000

/// GMMx286C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Base:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx286C_STRUCT;

// **** GMMx2870 Register Definition ****
// Address
#define GMMx2870_ADDRESS                                        0x2870

// Type
#define GMMx2870_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2870_Base_OFFSET                                    0
#define GMMx2870_Base_WIDTH                                     20
#define GMMx2870_Base_MASK                                      0xfffff
#define GMMx2870_Reserved_31_20_OFFSET                          20
#define GMMx2870_Reserved_31_20_WIDTH                           12
#define GMMx2870_Reserved_31_20_MASK                            0xfff00000

/// GMMx2870
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Base:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2870_STRUCT;

// **** GMMx2874 Register Definition ****
// Address
#define GMMx2874_ADDRESS                                        0x2874

// Type
#define GMMx2874_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2874_Base_OFFSET                                    0
#define GMMx2874_Base_WIDTH                                     20
#define GMMx2874_Base_MASK                                      0xfffff
#define GMMx2874_Reserved_31_20_OFFSET                          20
#define GMMx2874_Reserved_31_20_WIDTH                           12
#define GMMx2874_Reserved_31_20_MASK                            0xfff00000

/// GMMx2874
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Base:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2874_STRUCT;

// **** GMMx2878 Register Definition ****
// Address
#define GMMx2878_ADDRESS                                        0x2878

// Type
#define GMMx2878_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2878_Base_OFFSET                                    0
#define GMMx2878_Base_WIDTH                                     20
#define GMMx2878_Base_MASK                                      0xfffff
#define GMMx2878_Reserved_31_20_OFFSET                          20
#define GMMx2878_Reserved_31_20_WIDTH                           12
#define GMMx2878_Reserved_31_20_MASK                            0xfff00000

/// GMMx2878
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Base:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2878_STRUCT;

// **** GMMx287C Register Definition ****
// Address
#define GMMx287C_ADDRESS                                        0x287c

// Type
#define GMMx287C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx287C_Top_OFFSET                                     0
#define GMMx287C_Top_WIDTH                                      20
#define GMMx287C_Top_MASK                                       0xfffff
#define GMMx287C_Reserved_31_20_OFFSET                          20
#define GMMx287C_Reserved_31_20_WIDTH                           12
#define GMMx287C_Reserved_31_20_MASK                            0xfff00000

/// GMMx287C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Top:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx287C_STRUCT;

// **** GMMx2880 Register Definition ****
// Address
#define GMMx2880_ADDRESS                                        0x2880

// Type
#define GMMx2880_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2880_Top_OFFSET                                     0
#define GMMx2880_Top_WIDTH                                      20
#define GMMx2880_Top_MASK                                       0xfffff
#define GMMx2880_Reserved_31_20_OFFSET                          20
#define GMMx2880_Reserved_31_20_WIDTH                           12
#define GMMx2880_Reserved_31_20_MASK                            0xfff00000

/// GMMx2880
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Top:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2880_STRUCT;

// **** GMMx2884 Register Definition ****
// Address
#define GMMx2884_ADDRESS                                        0x2884

// Type
#define GMMx2884_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2884_Top_OFFSET                                     0
#define GMMx2884_Top_WIDTH                                      20
#define GMMx2884_Top_MASK                                       0xfffff
#define GMMx2884_Reserved_31_20_OFFSET                          20
#define GMMx2884_Reserved_31_20_WIDTH                           12
#define GMMx2884_Reserved_31_20_MASK                            0xfff00000

/// GMMx2884
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Top:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2884_STRUCT;

// **** GMMx2888 Register Definition ****
// Address
#define GMMx2888_ADDRESS                                        0x2888

// Type
#define GMMx2888_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2888_Top_OFFSET                                     0
#define GMMx2888_Top_WIDTH                                      20
#define GMMx2888_Top_MASK                                       0xfffff
#define GMMx2888_Reserved_31_20_OFFSET                          20
#define GMMx2888_Reserved_31_20_WIDTH                           12
#define GMMx2888_Reserved_31_20_MASK                            0xfff00000

/// GMMx2888
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Top:20; ///<BOZO: 39:36 reserved?
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2888_STRUCT;

// **** GMMx288C Register Definition ****
// Address
#define GMMx288C_ADDRESS                                        0x288c

// Type
#define GMMx288C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx288C_Base_OFFSET                                    0
#define GMMx288C_Base_WIDTH                                     20
#define GMMx288C_Base_MASK                                      0xfffff
#define GMMx288C_Reserved_31_20_OFFSET                          20
#define GMMx288C_Reserved_31_20_WIDTH                           12
#define GMMx288C_Reserved_31_20_MASK                            0xfff00000

/// GMMx288C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Base:20; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx288C_STRUCT;

// **** GMMx2890 Register Definition ****
// Address
#define GMMx2890_ADDRESS                                        0x2890

// Type
#define GMMx2890_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2890_Top_OFFSET                                     0
#define GMMx2890_Top_WIDTH                                      20
#define GMMx2890_Top_MASK                                       0xfffff
#define GMMx2890_Reserved_31_20_OFFSET                          20
#define GMMx2890_Reserved_31_20_WIDTH                           12
#define GMMx2890_Reserved_31_20_MASK                            0xfff00000

/// GMMx2890
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Top:20; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2890_STRUCT;

// **** GMMx2894 Register Definition ****
// Address
#define GMMx2894_ADDRESS                                        0x2894

// Type
#define GMMx2894_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2894_Def_OFFSET                                     0
#define GMMx2894_Def_WIDTH                                      28
#define GMMx2894_Def_MASK                                       0xfffffff
#define GMMx2894_Reserved_31_28_OFFSET                          28
#define GMMx2894_Reserved_31_28_WIDTH                           4
#define GMMx2894_Reserved_31_28_MASK                            0xf0000000

/// GMMx2894
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Def:28; ///<BOZO: 39:36 reserved? Should there be a BIOS recommendation here?
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2894_STRUCT;

// **** GMMx2898 Register Definition ****
// Address
#define GMMx2898_ADDRESS                                        0x2898

// Type
#define GMMx2898_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2898_Offset_OFFSET                                  0
#define GMMx2898_Offset_WIDTH                                   20
#define GMMx2898_Offset_MASK                                    0xfffff
#define GMMx2898_Base_OFFSET                                    20
#define GMMx2898_Base_WIDTH                                     4
#define GMMx2898_Base_MASK                                      0xf00000
#define GMMx2898_Top_OFFSET                                     24
#define GMMx2898_Top_WIDTH                                      4
#define GMMx2898_Top_MASK                                       0xf000000
#define GMMx2898_Reserved_31_28_OFFSET                          28
#define GMMx2898_Reserved_31_28_WIDTH                           4
#define GMMx2898_Reserved_31_28_MASK                            0xf0000000

/// GMMx2898
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   Offset:20; ///<Specifies the system base address of frame buffer region 0. BOZO: 39:36 reserved?
    UINT32                                                     Base:4 ; ///<Specifies the GPU base address of the frame buffer.
    UINT32                                                      Top:4 ; ///<Specifies the GPU address of the top of frame buffer region 0.
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2898_STRUCT;

// **** GMMx28D8 Register Definition ****
// Address
#define GMMx28D8_ADDRESS                                        0x28d8

// Type
#define GMMx28D8_TYPE                                           TYPE_GMM
// Field Data
#define GMMx28D8_ActRd_OFFSET                                   0
#define GMMx28D8_ActRd_WIDTH                                    8
#define GMMx28D8_ActRd_MASK                                     0xff
#define GMMx28D8_ActWr_OFFSET                                   8
#define GMMx28D8_ActWr_WIDTH                                    8
#define GMMx28D8_ActWr_MASK                                     0xff00
#define GMMx28D8_RasMActRd_OFFSET                               16
#define GMMx28D8_RasMActRd_WIDTH                                8
#define GMMx28D8_RasMActRd_MASK                                 0xff0000
#define GMMx28D8_RasMActWr_OFFSET                               24
#define GMMx28D8_RasMActWr_WIDTH                                8
#define GMMx28D8_RasMActWr_MASK                                 0xff000000

/// GMMx28D8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    ActRd:8 ; ///<
    UINT32                                                    ActWr:8 ; ///<
    UINT32                                                RasMActRd:8 ; ///<
    UINT32                                                RasMActWr:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx28D8_STRUCT;

// **** GMMx28DC Register Definition ****
// Address
#define GMMx28DC_ADDRESS                                        0x28dc

// Type
#define GMMx28DC_TYPE                                           TYPE_GMM
// Field Data
#define GMMx28DC_Ras2Ras_OFFSET                                 0
#define GMMx28DC_Ras2Ras_WIDTH                                  8
#define GMMx28DC_Ras2Ras_MASK                                   0xff
#define GMMx28DC_Rp_OFFSET                                      8
#define GMMx28DC_Rp_WIDTH                                       8
#define GMMx28DC_Rp_MASK                                        0xff00
#define GMMx28DC_WrPlusRp_OFFSET                                16
#define GMMx28DC_WrPlusRp_WIDTH                                 8
#define GMMx28DC_WrPlusRp_MASK                                  0xff0000
#define GMMx28DC_BusTurn_OFFSET                                 24
#define GMMx28DC_BusTurn_WIDTH                                  8
#define GMMx28DC_BusTurn_MASK                                   0xff000000

/// GMMx28DC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Ras2Ras:8 ; ///<
    UINT32                                                       Rp:8 ; ///<
    UINT32                                                 WrPlusRp:8 ; ///<
    UINT32                                                  BusTurn:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx28DC_STRUCT;

// **** GMMx5428 Register Definition ****
// Address
#define GMMx5428_ADDRESS                                        0x5428

// Type
#define GMMx5428_TYPE                                           TYPE_GMM
// Field Data
#define GMMx5428_ConfigMemsize_OFFSET                           0
#define GMMx5428_ConfigMemsize_WIDTH                            32
#define GMMx5428_ConfigMemsize_MASK                             0xffffffff

/// GMMx5428
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            ConfigMemsize:32; ///<Configuration memory size.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx5428_STRUCT;

// **** GMMx5490 Register Definition ****
// Address
#define GMMx5490_ADDRESS                                        0x5490

// Type
#define GMMx5490_TYPE                                           TYPE_GMM
// Field Data
#define GMMx5490_FbReadEn_OFFSET                                0
#define GMMx5490_FbReadEn_WIDTH                                 1
#define GMMx5490_FbReadEn_MASK                                  0x1
#define GMMx5490_FbWriteEn_OFFSET                               1
#define GMMx5490_FbWriteEn_WIDTH                                1
#define GMMx5490_FbWriteEn_MASK                                 0x2
#define GMMx5490_Reserved_31_2_OFFSET                           2
#define GMMx5490_Reserved_31_2_WIDTH                            30
#define GMMx5490_Reserved_31_2_MASK                             0xfffffffc

/// GMMx5490
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 FbReadEn:1 ; ///<Enables host (VGA / HDP) reads to the Frame Buffer.
    UINT32                                                FbWriteEn:1 ; ///<Enables host (VGA / HDP) writes to the Frame Buffer.
    UINT32                                            Reserved_31_2:30; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx5490_STRUCT;

// **** D0F0x64_x00 Register Definition ****
// Address
#define D0F0x64_x00_ADDRESS                                     0x0

// Type
#define D0F0x64_x00_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x00_Reserved_0_0_OFFSET                         0
#define D0F0x64_x00_Reserved_0_0_WIDTH                          1
#define D0F0x64_x00_Reserved_0_0_MASK                           0x1
#define D0F0x64_x00_HideP2pAgpCap_OFFSET                        1
#define D0F0x64_x00_HideP2pAgpCap_WIDTH                         1
#define D0F0x64_x00_HideP2pAgpCap_MASK                          0x2
#define D0F0x64_x00_Reserved_5_2_OFFSET                         2
#define D0F0x64_x00_Reserved_5_2_WIDTH                          4
#define D0F0x64_x00_Reserved_5_2_MASK                           0x3c
#define D0F0x64_x00_NbFchCfgEn_OFFSET                           6
#define D0F0x64_x00_NbFchCfgEn_WIDTH                            1
#define D0F0x64_x00_NbFchCfgEn_MASK                             0x40
#define D0F0x64_x00_HwInitWrLock_OFFSET                         7
#define D0F0x64_x00_HwInitWrLock_WIDTH                          1
#define D0F0x64_x00_HwInitWrLock_MASK                           0x80
#define D0F0x64_x00_Reserved_31_8_OFFSET                        8
#define D0F0x64_x00_Reserved_31_8_WIDTH                         24
#define D0F0x64_x00_Reserved_31_8_MASK                          0xffffff00

/// D0F0x64_x00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                            HideP2pAgpCap:1 ; ///<
    UINT32                                             Reserved_5_2:4 ; ///<
    UINT32                                               NbFchCfgEn:1 ; ///<
    UINT32                                             HwInitWrLock:1 ; ///<This bit prevents updates to the IOC shadow copies of the BIF core configuration registers locked by D0F0xE4_x0101_0010[HwInitWrLock].
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x00_STRUCT;

// **** D0F0x64_x0B Register Definition ****
// Address
#define D0F0x64_x0B_ADDRESS                                     0xb

// Type
#define D0F0x64_x0B_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x0B_ApcIntSelMode_OFFSET                        0
#define D0F0x64_x0B_ApcIntSelMode_WIDTH                         1
#define D0F0x64_x0B_ApcIntSelMode_MASK                          0x1
#define D0F0x64_x0B_Reserved_2_1_OFFSET                         1
#define D0F0x64_x0B_Reserved_2_1_WIDTH                          2
#define D0F0x64_x0B_Reserved_2_1_MASK                           0x6
#define D0F0x64_x0B_P2pDis_OFFSET                               3
#define D0F0x64_x0B_P2pDis_WIDTH                                1
#define D0F0x64_x0B_P2pDis_MASK                                 0x8
#define D0F0x64_x0B_Reserved_15_4_OFFSET                        4
#define D0F0x64_x0B_Reserved_15_4_WIDTH                         12
#define D0F0x64_x0B_Reserved_15_4_MASK                          0xfff0
#define D0F0x64_x0B_ExtDevPlug_OFFSET                           16
#define D0F0x64_x0B_ExtDevPlug_WIDTH                            1
#define D0F0x64_x0B_ExtDevPlug_MASK                             0x10000
#define D0F0x64_x0B_ExtDevCrsEn_OFFSET                          17
#define D0F0x64_x0B_ExtDevCrsEn_WIDTH                           1
#define D0F0x64_x0B_ExtDevCrsEn_MASK                            0x20000
#define D0F0x64_x0B_CrsEn_OFFSET                                18
#define D0F0x64_x0B_CrsEn_WIDTH                                 1
#define D0F0x64_x0B_CrsEn_MASK                                  0x40000
#define D0F0x64_x0B_IntSelMode_OFFSET                           19
#define D0F0x64_x0B_IntSelMode_WIDTH                            1
#define D0F0x64_x0B_IntSelMode_MASK                             0x80000
#define D0F0x64_x0B_SetPowEn_OFFSET                             20
#define D0F0x64_x0B_SetPowEn_WIDTH                              1
#define D0F0x64_x0B_SetPowEn_MASK                               0x100000
#define D0F0x64_x0B_IocFchSetPowEn_OFFSET                       21
#define D0F0x64_x0B_IocFchSetPowEn_WIDTH                        1
#define D0F0x64_x0B_IocFchSetPowEn_MASK                         0x200000
#define D0F0x64_x0B_Reserved_22_22_OFFSET                       22
#define D0F0x64_x0B_Reserved_22_22_WIDTH                        1
#define D0F0x64_x0B_Reserved_22_22_MASK                         0x400000
#define D0F0x64_x0B_IocFchSetPmeTurnOffEn_OFFSET                23
#define D0F0x64_x0B_IocFchSetPmeTurnOffEn_WIDTH                 1
#define D0F0x64_x0B_IocFchSetPmeTurnOffEn_MASK                  0x800000
#define D0F0x64_x0B_Reserved_31_24_OFFSET                       24
#define D0F0x64_x0B_Reserved_31_24_WIDTH                        8
#define D0F0x64_x0B_Reserved_31_24_MASK                         0xff000000

/// D0F0x64_x0B
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            ApcIntSelMode:1 ; ///<
    UINT32                                             Reserved_2_1:2 ; ///<
    UINT32                                                   P2pDis:1 ; ///<
    UINT32                                            Reserved_15_4:12; ///<
    UINT32                                               ExtDevPlug:1 ; ///<
    UINT32                                              ExtDevCrsEn:1 ; ///<
    UINT32                                                    CrsEn:1 ; ///<
    UINT32                                               IntSelMode:1 ; ///<
    UINT32                                                 SetPowEn:1 ; ///<
    UINT32                                           IocFchSetPowEn:1 ; ///<
    UINT32                                           Reserved_22_22:1 ; ///<
    UINT32                                    IocFchSetPmeTurnOffEn:1 ; ///< See 2.12.4.5 [PME Turn Off Messaging].
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x0B_STRUCT;

// **** D0F0x64_x0C Register Definition ****
// Address
#define D0F0x64_x0C_ADDRESS                                     0xc

// Type
#define D0F0x64_x0C_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x0C_Reserved_0_0_OFFSET                         0
#define D0F0x64_x0C_Reserved_0_0_WIDTH                          1
#define D0F0x64_x0C_Reserved_0_0_MASK                           0x1
#define D0F0x64_x0C_ApcP2pDis_OFFSET                            1
#define D0F0x64_x0C_ApcP2pDis_WIDTH                             1
#define D0F0x64_x0C_ApcP2pDis_MASK                              0x2
#define D0F0x64_x0C_Reserved_3_2_OFFSET                         2
#define D0F0x64_x0C_Reserved_3_2_WIDTH                          2
#define D0F0x64_x0C_Reserved_3_2_MASK                           0xc
#define D0F0x64_x0C_Dev4BridgeDis_OFFSET                        4
#define D0F0x64_x0C_Dev4BridgeDis_WIDTH                         1
#define D0F0x64_x0C_Dev4BridgeDis_MASK                          0x10
#define D0F0x64_x0C_Dev5BridgeDis_OFFSET                        5
#define D0F0x64_x0C_Dev5BridgeDis_WIDTH                         1
#define D0F0x64_x0C_Dev5BridgeDis_MASK                          0x20
#define D0F0x64_x0C_Dev6BridgeDis_OFFSET                        6
#define D0F0x64_x0C_Dev6BridgeDis_WIDTH                         1
#define D0F0x64_x0C_Dev6BridgeDis_MASK                          0x40
#define D0F0x64_x0C_Dev7BridgeDis_OFFSET                        7
#define D0F0x64_x0C_Dev7BridgeDis_WIDTH                         1
#define D0F0x64_x0C_Dev7BridgeDis_MASK                          0x80
#define D0F0x64_x0C_Reserved_10_8_OFFSET                        8
#define D0F0x64_x0C_Reserved_10_8_WIDTH                         3
#define D0F0x64_x0C_Reserved_10_8_MASK                          0x700
#define D0F0x64_x0C_DlDownResetEn_OFFSET                        11
#define D0F0x64_x0C_DlDownResetEn_WIDTH                         1
#define D0F0x64_x0C_DlDownResetEn_MASK                          0x800
#define D0F0x64_x0C_Reserved_15_12_OFFSET                       12
#define D0F0x64_x0C_Reserved_15_12_WIDTH                        4
#define D0F0x64_x0C_Reserved_15_12_MASK                         0xf000
#define D0F0x64_x0C_Reserved_19_16_OFFSET                       16
#define D0F0x64_x0C_Reserved_19_16_WIDTH                        4
#define D0F0x64_x0C_Reserved_19_16_MASK                         0xf0000
#define D0F0x64_x0C_Reserved_31_20_OFFSET                       20
#define D0F0x64_x0C_Reserved_31_20_WIDTH                        12
#define D0F0x64_x0C_Reserved_31_20_MASK                         0xfff00000

/// D0F0x64_x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                                ApcP2pDis:1 ; ///<
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                            Dev4BridgeDis:1 ; ///<
    UINT32                                            Dev5BridgeDis:1 ; ///<
    UINT32                                            Dev6BridgeDis:1 ; ///<
    UINT32                                            Dev7BridgeDis:1 ; ///<
    UINT32                                            Reserved_10_8:3 ; ///<
    UINT32                                            DlDownResetEn:1 ; ///<
    UINT32                                           Reserved_15_12:4 ; ///<
    UINT32                                           Reserved_19_16:4 ; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x0C_STRUCT;

// **** D0F0x64_x16 Register Definition ****
// Address
#define D0F0x64_x16_ADDRESS                                     0x16

// Type
#define D0F0x64_x16_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x16_AerUrMsgEn_OFFSET                           0
#define D0F0x64_x16_AerUrMsgEn_WIDTH                            1
#define D0F0x64_x16_AerUrMsgEn_MASK                             0x1
#define D0F0x64_x16_Reserved_3_1_OFFSET                         1
#define D0F0x64_x16_Reserved_3_1_WIDTH                          3
#define D0F0x64_x16_Reserved_3_1_MASK                           0xe
#define D0F0x64_x16_GfxAerCredits_OFFSET                        4
#define D0F0x64_x16_GfxAerCredits_WIDTH                         3
#define D0F0x64_x16_GfxAerCredits_MASK                          0x70
#define D0F0x64_x16_Reserved_7_7_OFFSET                         7
#define D0F0x64_x16_Reserved_7_7_WIDTH                          1
#define D0F0x64_x16_Reserved_7_7_MASK                           0x80
#define D0F0x64_x16_GppAerCredits_OFFSET                        8
#define D0F0x64_x16_GppAerCredits_WIDTH                         3
#define D0F0x64_x16_GppAerCredits_MASK                          0x700
#define D0F0x64_x16_Reserved_31_11_OFFSET                       11
#define D0F0x64_x16_Reserved_31_11_WIDTH                        21
#define D0F0x64_x16_Reserved_31_11_MASK                         0xfffff800

/// D0F0x64_x16
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               AerUrMsgEn:1 ; ///<
    UINT32                                             Reserved_3_1:3 ; ///<
    UINT32                                            GfxAerCredits:3 ; ///<The number of FIFO entries available for AER unsupported request message headers from the GFX core.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                            GppAerCredits:3 ; ///<The number of FIFO entries available for AER unsupported request message headers from the GPP core.
    UINT32                                           Reserved_31_11:21; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x16_STRUCT;

// **** D0F0x64_x19 Register Definition ****
// Address
#define D0F0x64_x19_ADDRESS                                     0x19

// Type
#define D0F0x64_x19_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x19_TomEn_OFFSET                                0
#define D0F0x64_x19_TomEn_WIDTH                                 1
#define D0F0x64_x19_TomEn_MASK                                  0x1
#define D0F0x64_x19_Reserved_22_1_OFFSET                        1
#define D0F0x64_x19_Reserved_22_1_WIDTH                         22
#define D0F0x64_x19_Reserved_22_1_MASK                          0x7ffffe
#define D0F0x64_x19_Tom2_31_23__OFFSET                          23
#define D0F0x64_x19_Tom2_31_23__WIDTH                           9
#define D0F0x64_x19_Tom2_31_23__MASK                            0xff800000

/// D0F0x64_x19
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    TomEn:1 ; ///<
    UINT32                                            Reserved_22_1:22; ///<
    UINT32                                              Tom2_31_23_:9 ; ///<This field specifies the maximum system address for upstream read and write transactions that are forwarded to the host bridge (from the GNB to the CNB). All addresses less than or equal to this system address are forwarded to DRAM and are not checked to determine if the transaction is a peer-to-peer transaction. All upstream reads with addresses greater than this system address are master aborted. D0F0x64_x46[P2PMode] controls the GNB response to writes with addresses greater than this system address.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x19_STRUCT;

// **** D0F0x64_x1A Register Definition ****
// Address
#define D0F0x64_x1A_ADDRESS                                     0x1a

// Type
#define D0F0x64_x1A_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x1A_Tom2_35_32__OFFSET                          0
#define D0F0x64_x1A_Tom2_35_32__WIDTH                           4
#define D0F0x64_x1A_Tom2_35_32__MASK                            0xf
#define D0F0x64_x1A_Reserved_7_4_OFFSET                         4
#define D0F0x64_x1A_Reserved_7_4_WIDTH                          4
#define D0F0x64_x1A_Reserved_7_4_MASK                           0xf0
#define D0F0x64_x1A_Reserved_31_8_OFFSET                        8
#define D0F0x64_x1A_Reserved_31_8_WIDTH                         24
#define D0F0x64_x1A_Reserved_31_8_MASK                          0xffffff00

/// D0F0x64_x1A
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              Tom2_35_32_:4 ; ///<See D0F0x64_x19[Tom2].
    UINT32                                             Reserved_7_4:4 ; ///<Tom2[39:36].
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x1A_STRUCT;

// **** D0F0x64_x1C Register Definition ****
// Address
#define D0F0x64_x1C_ADDRESS                                     0x1c

// Type
#define D0F0x64_x1C_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x1C_WriteDis_OFFSET                             0
#define D0F0x64_x1C_WriteDis_WIDTH                              1
#define D0F0x64_x1C_WriteDis_MASK                               0x1
#define D0F0x64_x1C_F0NonlegacyDeviceTypeEn_OFFSET              1
#define D0F0x64_x1C_F0NonlegacyDeviceTypeEn_WIDTH               1
#define D0F0x64_x1C_F0NonlegacyDeviceTypeEn_MASK                0x2
#define D0F0x64_x1C_F064BarEn_OFFSET                            2
#define D0F0x64_x1C_F064BarEn_WIDTH                             1
#define D0F0x64_x1C_F064BarEn_MASK                              0x4
#define D0F0x64_x1C_MemApSize_OFFSET                            3
#define D0F0x64_x1C_MemApSize_WIDTH                             3
#define D0F0x64_x1C_MemApSize_MASK                              0x38
#define D0F0x64_x1C_RegApSize_OFFSET                            6
#define D0F0x64_x1C_RegApSize_WIDTH                             1
#define D0F0x64_x1C_RegApSize_MASK                              0x40
#define D0F0x64_x1C_DualfuncDisplayEn_OFFSET                    7
#define D0F0x64_x1C_DualfuncDisplayEn_WIDTH                     1
#define D0F0x64_x1C_DualfuncDisplayEn_MASK                      0x80
#define D0F0x64_x1C_AudioEn_OFFSET                              8
#define D0F0x64_x1C_AudioEn_WIDTH                               1
#define D0F0x64_x1C_AudioEn_MASK                                0x100
#define D0F0x64_x1C_MsiDis_OFFSET                               9
#define D0F0x64_x1C_MsiDis_WIDTH                                1
#define D0F0x64_x1C_MsiDis_MASK                                 0x200
#define D0F0x64_x1C_AudioNonlegacyDeviceTypeEn_OFFSET           10
#define D0F0x64_x1C_AudioNonlegacyDeviceTypeEn_WIDTH            1
#define D0F0x64_x1C_AudioNonlegacyDeviceTypeEn_MASK             0x400
#define D0F0x64_x1C_Audio64BarEn_OFFSET                         11
#define D0F0x64_x1C_Audio64BarEn_WIDTH                          1
#define D0F0x64_x1C_Audio64BarEn_MASK                           0x800
#define D0F0x64_x1C_VgaDis_OFFSET                               12
#define D0F0x64_x1C_VgaDis_WIDTH                                1
#define D0F0x64_x1C_VgaDis_MASK                                 0x1000
#define D0F0x64_x1C_FbAlwaysOn_OFFSET                           13
#define D0F0x64_x1C_FbAlwaysOn_WIDTH                            1
#define D0F0x64_x1C_FbAlwaysOn_MASK                             0x2000
#define D0F0x64_x1C_FbCplTypeSel_OFFSET                         14
#define D0F0x64_x1C_FbCplTypeSel_WIDTH                          2
#define D0F0x64_x1C_FbCplTypeSel_MASK                           0xc000
#define D0F0x64_x1C_IoBarDis_OFFSET                             16
#define D0F0x64_x1C_IoBarDis_WIDTH                              1
#define D0F0x64_x1C_IoBarDis_MASK                               0x10000
#define D0F0x64_x1C_F0En_OFFSET                                 17
#define D0F0x64_x1C_F0En_WIDTH                                  1
#define D0F0x64_x1C_F0En_MASK                                   0x20000
#define D0F0x64_x1C_F0BarEn_OFFSET                              18
#define D0F0x64_x1C_F0BarEn_WIDTH                               1
#define D0F0x64_x1C_F0BarEn_MASK                                0x40000
#define D0F0x64_x1C_F1BarEn_OFFSET                              19
#define D0F0x64_x1C_F1BarEn_WIDTH                               1
#define D0F0x64_x1C_F1BarEn_MASK                                0x80000
#define D0F0x64_x1C_F2BarEn_OFFSET                              20
#define D0F0x64_x1C_F2BarEn_WIDTH                               1
#define D0F0x64_x1C_F2BarEn_MASK                                0x100000
#define D0F0x64_x1C_PcieDis_OFFSET                              21
#define D0F0x64_x1C_PcieDis_WIDTH                               1
#define D0F0x64_x1C_PcieDis_MASK                                0x200000
#define D0F0x64_x1C_BifBxcntlSpare0_OFFSET                      22
#define D0F0x64_x1C_BifBxcntlSpare0_WIDTH                       1
#define D0F0x64_x1C_BifBxcntlSpare0_MASK                        0x400000
#define D0F0x64_x1C_RcieEn_OFFSET                               23
#define D0F0x64_x1C_RcieEn_WIDTH                                1
#define D0F0x64_x1C_RcieEn_MASK                                 0x800000
#define D0F0x64_x1C_BifBxcntlSpare_OFFSET                       24
#define D0F0x64_x1C_BifBxcntlSpare_WIDTH                        8
#define D0F0x64_x1C_BifBxcntlSpare_MASK                         0xff000000

/// D0F0x64_x1C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 WriteDis:1 ; ///< See 2.17.1 [GPU PCI Interface].
    UINT32                                  F0NonlegacyDeviceTypeEn:1 ; ///< Must be 0 because graphics requires IO.
    UINT32                                                F064BarEn:1 ; ///<
    UINT32                                                MemApSize:3 ; ///< Specifies the size of the frame buffer aperture.
    UINT32                                                RegApSize:1 ; ///<Specifies the size of the graphics register aperture.
    UINT32                                        DualfuncDisplayEn:1 ; ///<Legacy OS multi-monitor support.
    UINT32                                                  AudioEn:1 ; ///<
    UINT32                                                   MsiDis:1 ; ///<
    UINT32                               AudioNonlegacyDeviceTypeEn:1 ; ///< Must be 0 because graphics requires IO.
    UINT32                                             Audio64BarEn:1 ; ///< Controls the size of the audio BAR.
    UINT32                                                   VgaDis:1 ; ///<
    UINT32                                               FbAlwaysOn:1 ; ///< Enables read and write access to the frame buffer region when the memory controller has not been initialized.
    UINT32                                             FbCplTypeSel:2 ; ///< Specifies the completion returned for transaction received before the memory controller is initialized when FbAlwaysOn=1.
    UINT32                                                 IoBarDis:1 ; ///<
    UINT32                                                     F0En:1 ; ///<
    UINT32                                                  F0BarEn:1 ; ///<
    UINT32                                                  F1BarEn:1 ; ///<
    UINT32                                                  F2BarEn:1 ; ///<
    UINT32                                                  PcieDis:1 ; ///<
    UINT32                                          BifBxcntlSpare0:1 ; ///<
    UINT32                                                   RcieEn:1 ; ///<
    UINT32                                           BifBxcntlSpare:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x1C_STRUCT;

// **** D0F0x64_x1D Register Definition ****
// Address
#define D0F0x64_x1D_ADDRESS                                     0x1d

// Type
#define D0F0x64_x1D_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x1D_IntGfxAsPcieEn_OFFSET                       0
#define D0F0x64_x1D_IntGfxAsPcieEn_WIDTH                        1
#define D0F0x64_x1D_IntGfxAsPcieEn_MASK                         0x1
#define D0F0x64_x1D_VgaEn_OFFSET                                1
#define D0F0x64_x1D_VgaEn_WIDTH                                 1
#define D0F0x64_x1D_VgaEn_MASK                                  0x2
#define D0F0x64_x1D_Reserved_2_2_OFFSET                         2
#define D0F0x64_x1D_Reserved_2_2_WIDTH                          1
#define D0F0x64_x1D_Reserved_2_2_MASK                           0x4
#define D0F0x64_x1D_Vga16En_OFFSET                              3
#define D0F0x64_x1D_Vga16En_WIDTH                               1
#define D0F0x64_x1D_Vga16En_MASK                                0x8
#define D0F0x64_x1D_Reserved_31_4_OFFSET                        4
#define D0F0x64_x1D_Reserved_31_4_WIDTH                         28
#define D0F0x64_x1D_Reserved_31_4_MASK                          0xfffffff0

/// D0F0x64_x1D
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           IntGfxAsPcieEn:1 ; ///< Software must program D1F0x04[BusMasterEn]=1 before programming IntGfxAsPcieEn=1. UBTS #229490. The bridge device is device 1 on bus 0.
    UINT32                                                    VgaEn:1 ; ///<Affects the response by the internal graphics to compatible VGA addresses when IntGfxAsPcieEn=1. IO address where address bits 9:0 are in the ranges of 3B0h to 3BBh or 3C0h to 3DFh. For IO cycles the decoding of address bits 15:10 depends on Vga16En.
    UINT32                                             Reserved_2_2:1 ; ///<
    UINT32                                                  Vga16En:1 ; ///<
    UINT32                                            Reserved_31_4:28; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x1D_STRUCT;

// **** D0F0x64_x46 Register Definition ****
// Address
#define D0F0x64_x46_ADDRESS                                     0x46

// Type
#define D0F0x64_x46_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x46_HpPmmeDevIdEn_OFFSET                        0
#define D0F0x64_x46_HpPmmeDevIdEn_WIDTH                         1
#define D0F0x64_x46_HpPmmeDevIdEn_MASK                          0x1
#define D0F0x64_x46_P2PMode_OFFSET                              1
#define D0F0x64_x46_P2PMode_WIDTH                               2
#define D0F0x64_x46_P2PMode_MASK                                0x6
#define D0F0x64_x46_Reserved_4_3_OFFSET                         3
#define D0F0x64_x46_Reserved_4_3_WIDTH                          2
#define D0F0x64_x46_Reserved_4_3_MASK                           0x18
#define D0F0x64_x46_JtagEn_OFFSET                               5
#define D0F0x64_x46_JtagEn_WIDTH                                1
#define D0F0x64_x46_JtagEn_MASK                                 0x20
#define D0F0x64_x46_McuEn_OFFSET                                6
#define D0F0x64_x46_McuEn_WIDTH                                 1
#define D0F0x64_x46_McuEn_MASK                                  0x40
#define D0F0x64_x46_JtagReqStop_OFFSET                          7
#define D0F0x64_x46_JtagReqStop_WIDTH                           1
#define D0F0x64_x46_JtagReqStop_MASK                            0x80
#define D0F0x64_x46_TestAssrt_OFFSET                            8
#define D0F0x64_x46_TestAssrt_WIDTH                             1
#define D0F0x64_x46_TestAssrt_MASK                              0x100
#define D0F0x64_x46_FrameBufferEn_OFFSET                        9
#define D0F0x64_x46_FrameBufferEn_WIDTH                         1
#define D0F0x64_x46_FrameBufferEn_MASK                          0x200
#define D0F0x64_x46_Reserved_10_10_OFFSET                       10
#define D0F0x64_x46_Reserved_10_10_WIDTH                        1
#define D0F0x64_x46_Reserved_10_10_MASK                         0x400
#define D0F0x64_x46_DsAlwaysBusy_OFFSET                         11
#define D0F0x64_x46_DsAlwaysBusy_WIDTH                          1
#define D0F0x64_x46_DsAlwaysBusy_MASK                           0x800
#define D0F0x64_x46_IntAccEn_OFFSET                             12
#define D0F0x64_x46_IntAccEn_WIDTH                              1
#define D0F0x64_x46_IntAccEn_MASK                               0x1000
#define D0F0x64_x46_MsgHiPrio_OFFSET                            13
#define D0F0x64_x46_MsgHiPrio_WIDTH                             1
#define D0F0x64_x46_MsgHiPrio_MASK                              0x2000
#define D0F0x64_x46_HwAssrtIntMode_OFFSET                       14
#define D0F0x64_x46_HwAssrtIntMode_WIDTH                        2
#define D0F0x64_x46_HwAssrtIntMode_MASK                         0xc000
#define D0F0x64_x46_Msi64bitEn_OFFSET                           16
#define D0F0x64_x46_Msi64bitEn_WIDTH                            1
#define D0F0x64_x46_Msi64bitEn_MASK                             0x10000
#define D0F0x64_x46_PcieSMIEn_OFFSET                            17
#define D0F0x64_x46_PcieSMIEn_WIDTH                             1
#define D0F0x64_x46_PcieSMIEn_MASK                              0x20000
#define D0F0x64_x46_PcieSCIEn_OFFSET                            18
#define D0F0x64_x46_PcieSCIEn_WIDTH                             1
#define D0F0x64_x46_PcieSCIEn_MASK                              0x40000
#define D0F0x64_x46_PDmaDropped_OFFSET                          19
#define D0F0x64_x46_PDmaDropped_WIDTH                           1
#define D0F0x64_x46_PDmaDropped_MASK                            0x80000
#define D0F0x64_x46_NpDmaDropped_OFFSET                         20
#define D0F0x64_x46_NpDmaDropped_WIDTH                          1
#define D0F0x64_x46_NpDmaDropped_MASK                           0x100000
#define D0F0x64_x46_AgpVgaBiosEn_OFFSET                         21
#define D0F0x64_x46_AgpVgaBiosEn_WIDTH                          1
#define D0F0x64_x46_AgpVgaBiosEn_MASK                           0x200000
#define D0F0x64_x46_MiscFeatureCntl_OFFSET                      22
#define D0F0x64_x46_MiscFeatureCntl_WIDTH                       10
#define D0F0x64_x46_MiscFeatureCntl_MASK                        0xffc00000

/// D0F0x64_x46
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            HpPmmeDevIdEn:1 ; ///< 0=Disable bridge device number insertion into Hot-plug and PMPME messages to the FCH
    UINT32                                                  P2PMode:2 ; ///<Specifies how upstream write transactions above D0F0x64_x19[Tom2] are completed.
    UINT32                                             Reserved_4_3:2 ; ///<MemoryPowerMode: not supported.
    UINT32                                                   JtagEn:1 ; ///< Reset to 0 by a HASH_START region access.
    UINT32                                                    McuEn:1 ; ///< Reset to 0 by a HASH_START region access.
    UINT32                                              JtagReqStop:1 ; ///<
    UINT32                                                TestAssrt:1 ; ///<Test assertion that drives bit 0 of the 32-bit bus from IOC to the HW assertion block.
    UINT32                                            FrameBufferEn:1 ; ///< Bozo: Add links to base limit registers when added to BKDG. Does P2PMode affect this?
    UINT32                                           Reserved_10_10:1 ; ///<ExtGfxDis: not used.
    UINT32                                             DsAlwaysBusy:1 ; ///<
    UINT32                                                 IntAccEn:1 ; ///<
    UINT32                                                MsgHiPrio:1 ; ///<
    UINT32                                           HwAssrtIntMode:2 ; ///<Specify the action to take when a hardware assertion SMI is asserted.
    UINT32                                               Msi64bitEn:1 ; ///<
    UINT32                                                PcieSMIEn:1 ; ///<
    UINT32                                                PcieSCIEn:1 ; ///<
    UINT32                                              PDmaDropped:1 ; ///< Write-1-to-clear may not work, see UBTS #230911.
    UINT32                                             NpDmaDropped:1 ; ///< Write-1-to-clear may not work, see UBTS #230911.
    UINT32                                             AgpVgaBiosEn:1 ; ///<
    UINT32                                          MiscFeatureCntl:10; ///<MiscFeatureCntl[0] = disable_block_rtr_apcrx_int. Others unused.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x46_STRUCT;

// **** D0F0x64_x4D Register Definition ****
// Address
#define D0F0x64_x4D_ADDRESS                                     0x4d

// Type
#define D0F0x64_x4D_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x4D_WriteData_OFFSET                            0
#define D0F0x64_x4D_WriteData_WIDTH                             16
#define D0F0x64_x4D_WriteData_MASK                              0xffff
#define D0F0x64_x4D_SmuAddr_OFFSET                              16
#define D0F0x64_x4D_SmuAddr_WIDTH                               8
#define D0F0x64_x4D_SmuAddr_MASK                                0xff0000
#define D0F0x64_x4D_ReqToggle_OFFSET                            24
#define D0F0x64_x4D_ReqToggle_WIDTH                             1
#define D0F0x64_x4D_ReqToggle_MASK                              0x1000000
#define D0F0x64_x4D_ReqType_OFFSET                              25
#define D0F0x64_x4D_ReqType_WIDTH                               1
#define D0F0x64_x4D_ReqType_MASK                                0x2000000
#define D0F0x64_x4D_Reserved_31_26_OFFSET                       26
#define D0F0x64_x4D_Reserved_31_26_WIDTH                        6
#define D0F0x64_x4D_Reserved_31_26_MASK                         0xfc000000

/// D0F0x64_x4D
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                WriteData:16; ///<Specifies the data written to the SMU.
    UINT32                                                  SmuAddr:8 ; ///<Specifies the SMU register address.
    UINT32                                                ReqToggle:1 ; ///<
    UINT32                                                  ReqType:1 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x4D_STRUCT;

// **** D0F0x98_x06 Register Definition ****
// Address
#define D0F0x98_x06_ADDRESS                                     0x6

// Type
#define D0F0x98_x06_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x06_Reserved_1_0_OFFSET                         0
#define D0F0x98_x06_Reserved_1_0_WIDTH                          2
#define D0F0x98_x06_Reserved_1_0_MASK                           0x3
#define D0F0x98_x06_HostReqPassPWMode_OFFSET                    2
#define D0F0x98_x06_HostReqPassPWMode_WIDTH                     1
#define D0F0x98_x06_HostReqPassPWMode_MASK                      0x4
#define D0F0x98_x06_HostReqSnoopMode_OFFSET                     3
#define D0F0x98_x06_HostReqSnoopMode_WIDTH                      1
#define D0F0x98_x06_HostReqSnoopMode_MASK                       0x8
#define D0F0x98_x06_HostRdRspPassPWMode_OFFSET                  4
#define D0F0x98_x06_HostRdRspPassPWMode_WIDTH                   1
#define D0F0x98_x06_HostRdRspPassPWMode_MASK                    0x10
#define D0F0x98_x06_Reserved_10_5_OFFSET                        5
#define D0F0x98_x06_Reserved_10_5_WIDTH                         6
#define D0F0x98_x06_Reserved_10_5_MASK                          0x7e0
#define D0F0x98_x06_HtdNoErr_OFFSET                             11
#define D0F0x98_x06_HtdNoErr_WIDTH                              1
#define D0F0x98_x06_HtdNoErr_MASK                               0x800
#define D0F0x98_x06_Reserved_13_12_OFFSET                       12
#define D0F0x98_x06_Reserved_13_12_WIDTH                        2
#define D0F0x98_x06_Reserved_13_12_MASK                         0x3000
#define D0F0x98_x06_ReqCompatModeDis_OFFSET                     14
#define D0F0x98_x06_ReqCompatModeDis_WIDTH                      1
#define D0F0x98_x06_ReqCompatModeDis_MASK                       0x4000
#define D0F0x98_x06_HostRdSplitEn_OFFSET                        15
#define D0F0x98_x06_HostRdSplitEn_WIDTH                         1
#define D0F0x98_x06_HostRdSplitEn_MASK                          0x8000
#define D0F0x98_x06_Reserved_25_16_OFFSET                       16
#define D0F0x98_x06_Reserved_25_16_WIDTH                        10
#define D0F0x98_x06_Reserved_25_16_MASK                         0x3ff0000
#define D0F0x98_x06_UmiNpMemWrEn_OFFSET                         26
#define D0F0x98_x06_UmiNpMemWrEn_WIDTH                          1
#define D0F0x98_x06_UmiNpMemWrEn_MASK                           0x4000000
#define D0F0x98_x06_Reserved_31_27_OFFSET                       27
#define D0F0x98_x06_Reserved_31_27_WIDTH                        5
#define D0F0x98_x06_Reserved_31_27_MASK                         0xf8000000

/// D0F0x98_x06
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_1_0:2 ; ///<
    UINT32                                        HostReqPassPWMode:1 ; ///<This field encodes how the PassPW bit is set for host requests.
    UINT32                                         HostReqSnoopMode:1 ; ///<This field encodes how the coherent bit is set for host requests.
    UINT32                                      HostRdRspPassPWMode:1 ; ///<This field encodes how the PassPW bit is set for read responses sent to the CNB.
    UINT32                                            Reserved_10_5:6 ; ///<
    UINT32                                                 HtdNoErr:1 ; ///<
    UINT32                                           Reserved_13_12:2 ; ///<
    UINT32                                         ReqCompatModeDis:1 ; ///<
    UINT32                                            HostRdSplitEn:1 ; ///<
    UINT32                                           Reserved_25_16:10; ///<
    UINT32                                             UmiNpMemWrEn:1 ; ///< This bit may be set to avoid a deadlock condition.
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x06_STRUCT;

// **** D0F0x98_x07 Register Definition ****
// Address
#define D0F0x98_x07_ADDRESS                                     0x7

// Type
#define D0F0x98_x07_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x07_IocBwOptEn_OFFSET                           0
#define D0F0x98_x07_IocBwOptEn_WIDTH                            1
#define D0F0x98_x07_IocBwOptEn_MASK                             0x1
#define D0F0x98_x07_Reserved_5_1_OFFSET                         1
#define D0F0x98_x07_Reserved_5_1_WIDTH                          5
#define D0F0x98_x07_Reserved_5_1_MASK                           0x3e
#define D0F0x98_x07_DmaReqRespPassPWMode_OFFSET                 6
#define D0F0x98_x07_DmaReqRespPassPWMode_WIDTH                  1
#define D0F0x98_x07_DmaReqRespPassPWMode_MASK                   0x40
#define D0F0x98_x07_Reserved_13_7_OFFSET                        7
#define D0F0x98_x07_Reserved_13_7_WIDTH                         7
#define D0F0x98_x07_Reserved_13_7_MASK                          0x3f80
#define D0F0x98_x07_MSIHTIntConversionEn_OFFSET                 14
#define D0F0x98_x07_MSIHTIntConversionEn_WIDTH                  1
#define D0F0x98_x07_MSIHTIntConversionEn_MASK                   0x4000
#define D0F0x98_x07_DropZeroMaskWrEn_OFFSET                     15
#define D0F0x98_x07_DropZeroMaskWrEn_WIDTH                      1
#define D0F0x98_x07_DropZeroMaskWrEn_MASK                       0x8000
#define D0F0x98_x07_Reserved_29_16_OFFSET                       16
#define D0F0x98_x07_Reserved_29_16_WIDTH                        14
#define D0F0x98_x07_Reserved_29_16_MASK                         0x3fff0000
#define D0F0x98_x07_UnadjustThrottlingStpclk_OFFSET             30
#define D0F0x98_x07_UnadjustThrottlingStpclk_WIDTH              1
#define D0F0x98_x07_UnadjustThrottlingStpclk_MASK               0x40000000
#define D0F0x98_x07_Reserved_31_31_OFFSET                       31
#define D0F0x98_x07_Reserved_31_31_WIDTH                        1
#define D0F0x98_x07_Reserved_31_31_MASK                         0x80000000

/// D0F0x98_x07
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               IocBwOptEn:1 ; ///<
    UINT32                                             Reserved_5_1:5 ; ///<
    UINT32                                     DmaReqRespPassPWMode:1 ; ///<This field encodes how the RespPassPW bit is set for DMA requests.
    UINT32                                            Reserved_13_7:7 ; ///<
    UINT32                                     MSIHTIntConversionEn:1 ; ///<
    UINT32                                         DropZeroMaskWrEn:1 ; ///<
    UINT32                                           Reserved_29_16:14; ///<
    UINT32                                 UnadjustThrottlingStpclk:1 ; ///<
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x07_STRUCT;

// **** D0F0x98_x08 Register Definition ****
// Address
#define D0F0x98_x08_ADDRESS                                     0x8

// Type
#define D0F0x98_x08_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x08_NpWrrLenA_OFFSET                            0
#define D0F0x98_x08_NpWrrLenA_WIDTH                             8
#define D0F0x98_x08_NpWrrLenA_MASK                              0xff
#define D0F0x98_x08_Reserved_15_8_OFFSET                        8
#define D0F0x98_x08_Reserved_15_8_WIDTH                         8
#define D0F0x98_x08_Reserved_15_8_MASK                          0xff00
#define D0F0x98_x08_NpWrrLenC_OFFSET                            16
#define D0F0x98_x08_NpWrrLenC_WIDTH                             8
#define D0F0x98_x08_NpWrrLenC_MASK                              0xff0000
#define D0F0x98_x08_Reserved_31_24_OFFSET                       24
#define D0F0x98_x08_Reserved_31_24_WIDTH                        8
#define D0F0x98_x08_Reserved_31_24_MASK                         0xff000000

/// D0F0x98_x08
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                NpWrrLenA:8 ; ///<This field defines the maximum number of non-posted read requests from IOC that are serviced before the arbiter switches to the next client.
    UINT32                                            Reserved_15_8:8 ; ///<
    UINT32                                                NpWrrLenC:8 ; ///<This field defines the maximum number of non-posted read requests from the GPU (SRBM) that are serviced before the arbiter switches to the next client.
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x08_STRUCT;

// **** D0F0x98_x09 Register Definition ****
// Address
#define D0F0x98_x09_ADDRESS                                     0x9

// Type
#define D0F0x98_x09_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x09_PWrrLenA_OFFSET                             0
#define D0F0x98_x09_PWrrLenA_WIDTH                              8
#define D0F0x98_x09_PWrrLenA_MASK                               0xff
#define D0F0x98_x09_Reserved_23_8_OFFSET                        8
#define D0F0x98_x09_Reserved_23_8_WIDTH                         16
#define D0F0x98_x09_Reserved_23_8_MASK                          0xffff00
#define D0F0x98_x09_PWrrLenD_OFFSET                             24
#define D0F0x98_x09_PWrrLenD_WIDTH                              8
#define D0F0x98_x09_PWrrLenD_MASK                               0xff000000

/// D0F0x98_x09
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 PWrrLenA:8 ; ///<This field defines the maximum number of posted write requests from the IOC that are serviced before the arbiter switches to the next client.
    UINT32                                            Reserved_23_8:16; ///<
    UINT32                                                 PWrrLenD:8 ; ///<This field defines the maximum number of posted write requests from the GPU (SRBM) that are serviced before the arbiter switches to the next client.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x09_STRUCT;

// **** D0F0x98_x0C Register Definition ****
// Address
#define D0F0x98_x0C_ADDRESS                                     0xc

// Type
#define D0F0x98_x0C_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x0C_GcmWrrLenA_OFFSET                           0
#define D0F0x98_x0C_GcmWrrLenA_WIDTH                            8
#define D0F0x98_x0C_GcmWrrLenA_MASK                             0xff
#define D0F0x98_x0C_GcmWrrLenB_OFFSET                           8
#define D0F0x98_x0C_GcmWrrLenB_WIDTH                            8
#define D0F0x98_x0C_GcmWrrLenB_MASK                             0xff00
#define D0F0x98_x0C_Reserved_29_16_OFFSET                       16
#define D0F0x98_x0C_Reserved_29_16_WIDTH                        14
#define D0F0x98_x0C_Reserved_29_16_MASK                         0x3fff0000
#define D0F0x98_x0C_StrictSelWinnerEn_OFFSET                    30
#define D0F0x98_x0C_StrictSelWinnerEn_WIDTH                     1
#define D0F0x98_x0C_StrictSelWinnerEn_MASK                      0x40000000
#define D0F0x98_x0C_IntrHiPriClr_OFFSET                         31
#define D0F0x98_x0C_IntrHiPriClr_WIDTH                          1
#define D0F0x98_x0C_IntrHiPriClr_MASK                           0x80000000

/// D0F0x98_x0C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               GcmWrrLenA:8 ; ///<This field defines the maximum number of non-posted read requests from stage 1 that are getting serviced in the round-robin before the stage 2 arbiter switches to the next client.
    UINT32                                               GcmWrrLenB:8 ; ///<This field defines the maximum number of posted write requests from stage 1 that are getting serviced in the round-robin before the stage 2 arbiter switches to the next client.
    UINT32                                           Reserved_29_16:14; ///<
    UINT32                                        StrictSelWinnerEn:1 ; ///<
    UINT32                                             IntrHiPriClr:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x0C_STRUCT;

// **** D0F0x98_x0E Register Definition ****
// Address
#define D0F0x98_x0E_ADDRESS                                     0xe

// Type
#define D0F0x98_x0E_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x0E_MsiHtRsvIntRemapEn_OFFSET                   0
#define D0F0x98_x0E_MsiHtRsvIntRemapEn_WIDTH                    1
#define D0F0x98_x0E_MsiHtRsvIntRemapEn_MASK                     0x1
#define D0F0x98_x0E_Reserved_1_1_OFFSET                         1
#define D0F0x98_x0E_Reserved_1_1_WIDTH                          1
#define D0F0x98_x0E_Reserved_1_1_MASK                           0x2
#define D0F0x98_x0E_MsiHtRsvIntMt_OFFSET                        2
#define D0F0x98_x0E_MsiHtRsvIntMt_WIDTH                         3
#define D0F0x98_x0E_MsiHtRsvIntMt_MASK                          0x1c
#define D0F0x98_x0E_MsiHtRsvIntRqEoi_OFFSET                     5
#define D0F0x98_x0E_MsiHtRsvIntRqEoi_WIDTH                      1
#define D0F0x98_x0E_MsiHtRsvIntRqEoi_MASK                       0x20
#define D0F0x98_x0E_MsiHtRsvIntDM_OFFSET                        6
#define D0F0x98_x0E_MsiHtRsvIntDM_WIDTH                         1
#define D0F0x98_x0E_MsiHtRsvIntDM_MASK                          0x40
#define D0F0x98_x0E_Reserved_7_7_OFFSET                         7
#define D0F0x98_x0E_Reserved_7_7_WIDTH                          1
#define D0F0x98_x0E_Reserved_7_7_MASK                           0x80
#define D0F0x98_x0E_MsiHtRsvIntDestination_OFFSET               8
#define D0F0x98_x0E_MsiHtRsvIntDestination_WIDTH                8
#define D0F0x98_x0E_MsiHtRsvIntDestination_MASK                 0xff00
#define D0F0x98_x0E_MsiHtRsvIntVector_OFFSET                    16
#define D0F0x98_x0E_MsiHtRsvIntVector_WIDTH                     8
#define D0F0x98_x0E_MsiHtRsvIntVector_MASK                      0xff0000
#define D0F0x98_x0E_Reserved_31_24_OFFSET                       24
#define D0F0x98_x0E_Reserved_31_24_WIDTH                        8
#define D0F0x98_x0E_Reserved_31_24_MASK                         0xff000000

/// D0F0x98_x0E
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       MsiHtRsvIntRemapEn:1 ; ///<
    UINT32                                             Reserved_1_1:1 ; ///<
    UINT32                                            MsiHtRsvIntMt:3 ; ///<Specifies the message type used when an MSI interrupt is received that has a reserved delivery mode field if MsiHtRsvIntRemapEn==1.
    UINT32                                         MsiHtRsvIntRqEoi:1 ; ///<Specifies the REQEIOI state when an MSI interrupt is received that has a reserved delivery mode field if MsiHtRsvIntRemapEn==1.
    UINT32                                            MsiHtRsvIntDM:1 ; ///<Defines the interrupt destination mode when an MSI interrupt is received that has a reserved delivery mode field if MsiHtRsvIntRemapEn==1.
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                   MsiHtRsvIntDestination:8 ; ///<This field defines the interrupt destination used when an MSI interrupt is received that has a reserved delivery mode field when MsiHtRsvIntRemapEn==1.
    UINT32                                        MsiHtRsvIntVector:8 ; ///<This field defines the interrupt vector used when an MSI interrupt is received that has a reserved delivery mode field if MsiHtRsvIntRemapEn==1.
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x0E_STRUCT;

// **** D0F0x98_x1E Register Definition ****
// Address
#define D0F0x98_x1E_ADDRESS                                     0x1e

// Type
#define D0F0x98_x1E_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x1E_DisableSyncFloodDetect_OFFSET               0
#define D0F0x98_x1E_DisableSyncFloodDetect_WIDTH                1
#define D0F0x98_x1E_DisableSyncFloodDetect_MASK                 0x1
#define D0F0x98_x1E_HiPriEn_OFFSET                              1
#define D0F0x98_x1E_HiPriEn_WIDTH                               1
#define D0F0x98_x1E_HiPriEn_MASK                                0x2
#define D0F0x98_x1E_Reserved_31_2_OFFSET                        2
#define D0F0x98_x1E_Reserved_31_2_WIDTH                         30
#define D0F0x98_x1E_Reserved_31_2_MASK                          0xfffffffc

/// D0F0x98_x1E
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                   DisableSyncFloodDetect:1 ; ///<
    UINT32                                                  HiPriEn:1 ; ///< See Table 18. D0F0x98_x24[VC1UrAddrUpper] and D0F0x98_x25[VC1UrAddrLower] must be programmed to a safe system memory address when the high priority channel is enabled.
    UINT32                                            Reserved_31_2:30; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x1E_STRUCT;

// **** D0F0x98_x28 Register Definition ****
// Address
#define D0F0x98_x28_ADDRESS                                     0x28

// Type
#define D0F0x98_x28_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x28_SmuPmInterfaceEn_OFFSET                     0
#define D0F0x98_x28_SmuPmInterfaceEn_WIDTH                      1
#define D0F0x98_x28_SmuPmInterfaceEn_MASK                       0x1
#define D0F0x98_x28_ForceCoherentIntr_OFFSET                    1
#define D0F0x98_x28_ForceCoherentIntr_WIDTH                     1
#define D0F0x98_x28_ForceCoherentIntr_MASK                      0x2
#define D0F0x98_x28_ForceFifoFlush_OFFSET                       2
#define D0F0x98_x28_ForceFifoFlush_WIDTH                        1
#define D0F0x98_x28_ForceFifoFlush_MASK                         0x4
#define D0F0x98_x28_Reserved_31_3_OFFSET                        3
#define D0F0x98_x28_Reserved_31_3_WIDTH                         29
#define D0F0x98_x28_Reserved_31_3_MASK                          0xfffffff8

/// D0F0x98_x28
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         SmuPmInterfaceEn:1 ; ///<
    UINT32                                        ForceCoherentIntr:1 ; ///<
    UINT32                                           ForceFifoFlush:1 ; ///<
    UINT32                                            Reserved_31_3:29; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x28_STRUCT;

// **** D0F0x98_x2C Register Definition ****
// Address
#define D0F0x98_x2C_ADDRESS                                     0x2c

// Type
#define D0F0x98_x2C_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x2C_Reserved_0_0_OFFSET                         0
#define D0F0x98_x2C_Reserved_0_0_WIDTH                          1
#define D0F0x98_x2C_Reserved_0_0_MASK                           0x1
#define D0F0x98_x2C_DynWakeEn_OFFSET                            1
#define D0F0x98_x2C_DynWakeEn_WIDTH                             1
#define D0F0x98_x2C_DynWakeEn_MASK                              0x2
#define D0F0x98_x2C_Reserved_15_2_OFFSET                        2
#define D0F0x98_x2C_Reserved_15_2_WIDTH                         14
#define D0F0x98_x2C_Reserved_15_2_MASK                          0xfffc
#define D0F0x98_x2C_WakeHysteresis_OFFSET                       16
#define D0F0x98_x2C_WakeHysteresis_WIDTH                        16
#define D0F0x98_x2C_WakeHysteresis_MASK                         0xffff0000

/// D0F0x98_x2C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                                DynWakeEn:1 ; ///<
    UINT32                                            Reserved_15_2:14; ///<
    UINT32                                           WakeHysteresis:16; ///<Specifies the amount of time hardware waits after ORB becomes idle before de-asserting the wake signal to the CNB. Wait time = WakeHysteresis * 50 ns. Values less than 64h may result in undefined behavior (UBTS #205818).
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x2C_STRUCT;

// **** D0F0xE4_WRAP_0000 Register Definition ****
// Address
#define D0F0xE4_WRAP_0000_ADDRESS                               0x0

// Type
#define D0F0xE4_WRAP_0000_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_0000_Reserved_4_0_OFFSET                   0
#define D0F0xE4_WRAP_0000_Reserved_4_0_WIDTH                    5
#define D0F0xE4_WRAP_0000_Reserved_4_0_MASK                     0x1f
#define D0F0xE4_WRAP_0000_StrapBifEnDecToHiddenReg_OFFSET       5
#define D0F0xE4_WRAP_0000_StrapBifEnDecToHiddenReg_WIDTH        1
#define D0F0xE4_WRAP_0000_StrapBifEnDecToHiddenReg_MASK         0x20
#define D0F0xE4_WRAP_0000_Reserved_8_6_OFFSET                   6
#define D0F0xE4_WRAP_0000_Reserved_8_6_WIDTH                    3
#define D0F0xE4_WRAP_0000_Reserved_8_6_MASK                     0x1c0
#define D0F0xE4_WRAP_0000_StrapBifMstCplTimeoutEn_OFFSET        9
#define D0F0xE4_WRAP_0000_StrapBifMstCplTimeoutEn_WIDTH         1
#define D0F0xE4_WRAP_0000_StrapBifMstCplTimeoutEn_MASK          0x200
#define D0F0xE4_WRAP_0000_Reserved_20_10_OFFSET                 10
#define D0F0xE4_WRAP_0000_Reserved_20_10_WIDTH                  11
#define D0F0xE4_WRAP_0000_Reserved_20_10_MASK                   0x1ffc00
#define D0F0xE4_WRAP_0000_StrapBif2VcEn_OFFSET                  21
#define D0F0xE4_WRAP_0000_StrapBif2VcEn_WIDTH                   1
#define D0F0xE4_WRAP_0000_StrapBif2VcEn_MASK                    0x200000
#define D0F0xE4_WRAP_0000_Reserved_22_22_OFFSET                 22
#define D0F0xE4_WRAP_0000_Reserved_22_22_WIDTH                  1
#define D0F0xE4_WRAP_0000_Reserved_22_22_MASK                   0x400000
#define D0F0xE4_WRAP_0000_StrapBifAriEn_OFFSET                  23
#define D0F0xE4_WRAP_0000_StrapBifAriEn_WIDTH                   1
#define D0F0xE4_WRAP_0000_StrapBifAriEn_MASK                    0x800000
#define D0F0xE4_WRAP_0000_StrapBifAcsEn_OFFSET                  24
#define D0F0xE4_WRAP_0000_StrapBifAcsEn_WIDTH                   1
#define D0F0xE4_WRAP_0000_StrapBifAcsEn_MASK                    0x1000000
#define D0F0xE4_WRAP_0000_StrapBifAcsSourceValidation_OFFSET    25
#define D0F0xE4_WRAP_0000_StrapBifAcsSourceValidation_WIDTH     1
#define D0F0xE4_WRAP_0000_StrapBifAcsSourceValidation_MASK      0x2000000
#define D0F0xE4_WRAP_0000_StrapBifAcsTranslationBlocking_OFFSET 26
#define D0F0xE4_WRAP_0000_StrapBifAcsTranslationBlocking_WIDTH  1
#define D0F0xE4_WRAP_0000_StrapBifAcsTranslationBlocking_MASK   0x4000000
#define D0F0xE4_WRAP_0000_Reserved_31_27_OFFSET                 27
#define D0F0xE4_WRAP_0000_Reserved_31_27_WIDTH                  5
#define D0F0xE4_WRAP_0000_Reserved_31_27_MASK                   0xf8000000

/// D0F0xE4_WRAP_0000
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                 StrapBifEnDecToHiddenReg:1 ; ///<
    UINT32                                             Reserved_8_6:3 ; ///<
    UINT32                                  StrapBifMstCplTimeoutEn:1 ; ///<
    UINT32                                           Reserved_20_10:11; ///<
    UINT32                                            StrapBif2VcEn:1 ; ///<
    UINT32                                           Reserved_22_22:1 ; ///<
    UINT32                                            StrapBifAriEn:1 ; ///<
    UINT32                                            StrapBifAcsEn:1 ; ///<
    UINT32                              StrapBifAcsSourceValidation:1 ; ///<
    UINT32                           StrapBifAcsTranslationBlocking:1 ; ///<
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_0000_STRUCT;

// **** D0F0xE4_WRAP_0002 Register Definition ****
// Address
#define D0F0xE4_WRAP_0002_ADDRESS                               0x2

// Type
#define D0F0xE4_WRAP_0002_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_0002_Reserved_0_0_OFFSET                   0
#define D0F0xE4_WRAP_0002_Reserved_0_0_WIDTH                    1
#define D0F0xE4_WRAP_0002_Reserved_0_0_MASK                     0x1
#define D0F0xE4_WRAP_0002_StrapBifAlwaysUseFastTxClk_OFFSET     1
#define D0F0xE4_WRAP_0002_StrapBifAlwaysUseFastTxClk_WIDTH      1
#define D0F0xE4_WRAP_0002_StrapBifAlwaysUseFastTxClk_MASK       0x2
#define D0F0xE4_WRAP_0002_StrapPllCmpFreqMode_OFFSET            2
#define D0F0xE4_WRAP_0002_StrapPllCmpFreqMode_WIDTH             1
#define D0F0xE4_WRAP_0002_StrapPllCmpFreqMode_MASK              0x4
#define D0F0xE4_WRAP_0002_StrapBifForceGen2mode_OFFSET          3
#define D0F0xE4_WRAP_0002_StrapBifForceGen2mode_WIDTH           1
#define D0F0xE4_WRAP_0002_StrapBifForceGen2mode_MASK            0x8
#define D0F0xE4_WRAP_0002_Reserved_31_4_OFFSET                  4
#define D0F0xE4_WRAP_0002_Reserved_31_4_WIDTH                   28
#define D0F0xE4_WRAP_0002_Reserved_31_4_MASK                    0xfffffff0

/// D0F0xE4_WRAP_0002
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                               StrapBifAlwaysUseFastTxClk:1 ; ///<
    UINT32                                      StrapPllCmpFreqMode:1 ; ///<5 GHz.
    UINT32                                    StrapBifForceGen2mode:1 ; ///< This mode is intended for ATE use only.
    UINT32                                            Reserved_31_4:28; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_0002_STRUCT;

// **** D0F0xE4_WRAP_0080 Register Definition ****
// Address
#define D0F0xE4_WRAP_0080_ADDRESS                               0x80

// Type
#define D0F0xE4_WRAP_0080_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_0080_StrapBifLinkConfig_OFFSET             0
#define D0F0xE4_WRAP_0080_StrapBifLinkConfig_WIDTH              4
#define D0F0xE4_WRAP_0080_StrapBifLinkConfig_MASK               0xf
#define D0F0xE4_WRAP_0080_Reserved_31_4_OFFSET                  4
#define D0F0xE4_WRAP_0080_Reserved_31_4_WIDTH                   28
#define D0F0xE4_WRAP_0080_Reserved_31_4_MASK                    0xfffffff0

/// D0F0xE4_WRAP_0080
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       StrapBifLinkConfig:4 ; ///<This field configures the GPP and FCH links. All the encodings below assume a x4 FCH link.
    UINT32                                            Reserved_31_4:28; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_0080_STRUCT;

// **** D0F0xE4_WRAP_8002 Register Definition ****
// Address
#define D0F0xE4_WRAP_8002_ADDRESS                               0x8002

// Type
#define D0F0xE4_WRAP_8002_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8002_SubsystemVendorID_OFFSET              0
#define D0F0xE4_WRAP_8002_SubsystemVendorID_WIDTH               16
#define D0F0xE4_WRAP_8002_SubsystemVendorID_MASK                0xffff
#define D0F0xE4_WRAP_8002_SubsystemID_OFFSET                    16
#define D0F0xE4_WRAP_8002_SubsystemID_WIDTH                     16
#define D0F0xE4_WRAP_8002_SubsystemID_MASK                      0xffff0000

/// D0F0xE4_WRAP_8002
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        SubsystemVendorID:16; ///<
    UINT32                                              SubsystemID:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8002_STRUCT;

// **** D0F0xE4_WRAP_8011 Register Definition ****
// Address
#define D0F0xE4_WRAP_8011_ADDRESS                               0x8011

// Type
#define D0F0xE4_WRAP_8011_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8011_TxclkDynGateLatency_OFFSET            0
#define D0F0xE4_WRAP_8011_TxclkDynGateLatency_WIDTH             6
#define D0F0xE4_WRAP_8011_TxclkDynGateLatency_MASK              0x3f
#define D0F0xE4_WRAP_8011_TxclkPermGateEven_OFFSET              6
#define D0F0xE4_WRAP_8011_TxclkPermGateEven_WIDTH               1
#define D0F0xE4_WRAP_8011_TxclkPermGateEven_MASK                0x40
#define D0F0xE4_WRAP_8011_TxclkDynGateEnable_OFFSET             7
#define D0F0xE4_WRAP_8011_TxclkDynGateEnable_WIDTH              1
#define D0F0xE4_WRAP_8011_TxclkDynGateEnable_MASK               0x80
#define D0F0xE4_WRAP_8011_TxclkPermStop_OFFSET                  8
#define D0F0xE4_WRAP_8011_TxclkPermStop_WIDTH                   1
#define D0F0xE4_WRAP_8011_TxclkPermStop_MASK                    0x100
#define D0F0xE4_WRAP_8011_TxclkRegsGateEnable_OFFSET            9
#define D0F0xE4_WRAP_8011_TxclkRegsGateEnable_WIDTH             1
#define D0F0xE4_WRAP_8011_TxclkRegsGateEnable_MASK              0x200
#define D0F0xE4_WRAP_8011_TxclkRegsGateLatency_OFFSET           10
#define D0F0xE4_WRAP_8011_TxclkRegsGateLatency_WIDTH            6
#define D0F0xE4_WRAP_8011_TxclkRegsGateLatency_MASK             0xfc00
#define D0F0xE4_WRAP_8011_RcvrDetClkEnable_OFFSET               16
#define D0F0xE4_WRAP_8011_RcvrDetClkEnable_WIDTH                1
#define D0F0xE4_WRAP_8011_RcvrDetClkEnable_MASK                 0x10000
#define D0F0xE4_WRAP_8011_TxclkPermGateLatency_OFFSET           17
#define D0F0xE4_WRAP_8011_TxclkPermGateLatency_WIDTH            6
#define D0F0xE4_WRAP_8011_TxclkPermGateLatency_MASK             0x7e0000
#define D0F0xE4_WRAP_8011_DebugBusClkEnable_OFFSET              23
#define D0F0xE4_WRAP_8011_DebugBusClkEnable_WIDTH               1
#define D0F0xE4_WRAP_8011_DebugBusClkEnable_MASK                0x800000
#define D0F0xE4_WRAP_8011_TxclkLcntGateEnable_OFFSET            24
#define D0F0xE4_WRAP_8011_TxclkLcntGateEnable_WIDTH             1
#define D0F0xE4_WRAP_8011_TxclkLcntGateEnable_MASK              0x1000000
#define D0F0xE4_WRAP_8011_DdiDualLinkOverride_OFFSET            25
#define D0F0xE4_WRAP_8011_DdiDualLinkOverride_WIDTH             1
#define D0F0xE4_WRAP_8011_DdiDualLinkOverride_MASK              0x2000000
#define D0F0xE4_WRAP_8011_Reserved_30_26_OFFSET                 26
#define D0F0xE4_WRAP_8011_Reserved_30_26_WIDTH                  5
#define D0F0xE4_WRAP_8011_Reserved_30_26_MASK                   0x7c000000
#define D0F0xE4_WRAP_8011_StrapBifValid_OFFSET                  31
#define D0F0xE4_WRAP_8011_StrapBifValid_WIDTH                   1
#define D0F0xE4_WRAP_8011_StrapBifValid_MASK                    0x80000000

/// D0F0xE4_WRAP_8011
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                      TxclkDynGateLatency:6 ; ///<Specifies the number of clocks to wait after idle is signaled before gating off the dynamic clock branch. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                        TxclkPermGateEven:1 ; ///< See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                       TxclkDynGateEnable:1 ; ///< See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                            TxclkPermStop:1 ; ///< This bit should only be set if all links associated with the PCIe core are unconnected. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                      TxclkRegsGateEnable:1 ; ///< See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                     TxclkRegsGateLatency:6 ; ///<Specifies the number of clocks to wait after idle is signaled before gating off the register clock branch. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                         RcvrDetClkEnable:1 ; ///<
    UINT32                                     TxclkPermGateLatency:6 ; ///<Specifies the number of clocks to wait after detecting an entry into L1 before gating off the permanent clock branches. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                        DebugBusClkEnable:1 ; ///<
    UINT32                                      TxclkLcntGateEnable:1 ; ///< See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                      DdiDualLinkOverride:1 ; ///<
    UINT32                                           Reserved_30_26:5 ; ///<
    UINT32                                            StrapBifValid:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8011_STRUCT;

// **** D0F0xE4_WRAP_80F0 Register Definition ****
// Address
#define D0F0xE4_WRAP_80F0_ADDRESS                               0x80f0

// Type
#define D0F0xE4_WRAP_80F0_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_80F0_MicroSeconds_OFFSET                   0
#define D0F0xE4_WRAP_80F0_MicroSeconds_WIDTH                    32
#define D0F0xE4_WRAP_80F0_MicroSeconds_MASK                     0xffffffff

/// D0F0xE4_WRAP_80F0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             MicroSeconds:32; ///<This field increments once every microsecond when the timer is enabled. The counter will roll over and continue counting when it reaches its FFFF_FFFFh. A write to this register causes the counter to reset and begin counting from the value written.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_80F0_STRUCT;

// **** D0F0xE4_WRAP_80F1 Register Definition ****
// Address
#define D0F0xE4_WRAP_80F1_ADDRESS                               0x80f1

// Type
#define D0F0xE4_WRAP_80F1_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_80F1_ClockRate_OFFSET                      0
#define D0F0xE4_WRAP_80F1_ClockRate_WIDTH                       8
#define D0F0xE4_WRAP_80F1_ClockRate_MASK                        0xff
#define D0F0xE4_WRAP_80F1_Reserved_31_8_OFFSET                  8
#define D0F0xE4_WRAP_80F1_Reserved_31_8_WIDTH                   24
#define D0F0xE4_WRAP_80F1_Reserved_31_8_MASK                    0xffffff00

/// D0F0xE4_WRAP_80F1
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                ClockRate:8 ; ///<Disable to save power. Specifies the frequency of the reference clock in 1 MHz increments.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_80F1_STRUCT;

// **** D0F0xE4_CORE_0010 Register Definition ****
// Address
#define D0F0xE4_CORE_0010_ADDRESS                               0x10

// Type
#define D0F0xE4_CORE_0010_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_0010_HwInitWrLock_OFFSET                   0
#define D0F0xE4_CORE_0010_HwInitWrLock_WIDTH                    1
#define D0F0xE4_CORE_0010_HwInitWrLock_MASK                     0x1
#define D0F0xE4_CORE_0010_LcHotPlugDelSel_OFFSET                1
#define D0F0xE4_CORE_0010_LcHotPlugDelSel_WIDTH                 3
#define D0F0xE4_CORE_0010_LcHotPlugDelSel_MASK                  0xe
#define D0F0xE4_CORE_0010_Reserved_6_4_OFFSET                   4
#define D0F0xE4_CORE_0010_Reserved_6_4_WIDTH                    3
#define D0F0xE4_CORE_0010_Reserved_6_4_MASK                     0x70
#define D0F0xE4_CORE_0010_UrErrReportDis_OFFSET                 7
#define D0F0xE4_CORE_0010_UrErrReportDis_WIDTH                  1
#define D0F0xE4_CORE_0010_UrErrReportDis_MASK                   0x80
#define D0F0xE4_CORE_0010_Reserved_8_8_OFFSET                   8
#define D0F0xE4_CORE_0010_Reserved_8_8_WIDTH                    1
#define D0F0xE4_CORE_0010_Reserved_8_8_MASK                     0x100
#define D0F0xE4_CORE_0010_UmiNpMemWrite_OFFSET                  9
#define D0F0xE4_CORE_0010_UmiNpMemWrite_WIDTH                   1
#define D0F0xE4_CORE_0010_UmiNpMemWrite_MASK                    0x200
#define D0F0xE4_CORE_0010_RxUmiAdjPayloadSize_OFFSET            10
#define D0F0xE4_CORE_0010_RxUmiAdjPayloadSize_WIDTH             3
#define D0F0xE4_CORE_0010_RxUmiAdjPayloadSize_MASK              0x1c00
#define D0F0xE4_CORE_0010_Reserved_15_13_OFFSET                 13
#define D0F0xE4_CORE_0010_Reserved_15_13_WIDTH                  3
#define D0F0xE4_CORE_0010_Reserved_15_13_MASK                   0xe000
#define D0F0xE4_CORE_0010_RxRcbReorderEn_OFFSET                 16
#define D0F0xE4_CORE_0010_RxRcbReorderEn_WIDTH                  1
#define D0F0xE4_CORE_0010_RxRcbReorderEn_MASK                   0x10000
#define D0F0xE4_CORE_0010_RxRcbInvalidSizeDis_OFFSET            17
#define D0F0xE4_CORE_0010_RxRcbInvalidSizeDis_WIDTH             1
#define D0F0xE4_CORE_0010_RxRcbInvalidSizeDis_MASK              0x20000
#define D0F0xE4_CORE_0010_RxRcbUnexpCplDis_OFFSET               18
#define D0F0xE4_CORE_0010_RxRcbUnexpCplDis_WIDTH                1
#define D0F0xE4_CORE_0010_RxRcbUnexpCplDis_MASK                 0x40000
#define D0F0xE4_CORE_0010_RxRcbCplTimeoutTestMode_OFFSET        19
#define D0F0xE4_CORE_0010_RxRcbCplTimeoutTestMode_WIDTH         1
#define D0F0xE4_CORE_0010_RxRcbCplTimeoutTestMode_MASK          0x80000
#define D0F0xE4_CORE_0010_RxRcbChannelOrdering_OFFSET           20
#define D0F0xE4_CORE_0010_RxRcbChannelOrdering_WIDTH            1
#define D0F0xE4_CORE_0010_RxRcbChannelOrdering_MASK             0x100000
#define D0F0xE4_CORE_0010_RxRcbWrongAttrDis_OFFSET              21
#define D0F0xE4_CORE_0010_RxRcbWrongAttrDis_WIDTH               1
#define D0F0xE4_CORE_0010_RxRcbWrongAttrDis_MASK                0x200000
#define D0F0xE4_CORE_0010_RxRcbWrongFuncnumDis_OFFSET           22
#define D0F0xE4_CORE_0010_RxRcbWrongFuncnumDis_WIDTH            1
#define D0F0xE4_CORE_0010_RxRcbWrongFuncnumDis_MASK             0x400000
#define D0F0xE4_CORE_0010_Reserved_23_23_OFFSET                 23
#define D0F0xE4_CORE_0010_Reserved_23_23_WIDTH                  1
#define D0F0xE4_CORE_0010_Reserved_23_23_MASK                   0x800000
#define D0F0xE4_CORE_0010_Reserved_29_24_OFFSET                 24
#define D0F0xE4_CORE_0010_Reserved_29_24_WIDTH                  6
#define D0F0xE4_CORE_0010_Reserved_29_24_MASK                   0x3f000000
#define D0F0xE4_CORE_0010_Reserved_30_30_OFFSET                 30
#define D0F0xE4_CORE_0010_Reserved_30_30_WIDTH                  1
#define D0F0xE4_CORE_0010_Reserved_30_30_MASK                   0x40000000
#define D0F0xE4_CORE_0010_RxCplPostedReqOrdEn_OFFSET            31
#define D0F0xE4_CORE_0010_RxCplPostedReqOrdEn_WIDTH             1
#define D0F0xE4_CORE_0010_RxCplPostedReqOrdEn_MASK              0x80000000

/// D0F0xE4_CORE_0010
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             HwInitWrLock:1 ; ///<
    UINT32                                          LcHotPlugDelSel:3 ; ///<
    UINT32                                             Reserved_6_4:3 ; ///<
    UINT32                                           UrErrReportDis:1 ; ///<
    UINT32                                             Reserved_8_8:1 ; ///<
    UINT32                                            UmiNpMemWrite:1 ; ///<
    UINT32                                      RxUmiAdjPayloadSize:3 ; ///<Payload size for the UMI.
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                           RxRcbReorderEn:1 ; ///<
    UINT32                                      RxRcbInvalidSizeDis:1 ; ///<
    UINT32                                         RxRcbUnexpCplDis:1 ; ///<
    UINT32                                  RxRcbCplTimeoutTestMode:1 ; ///<RCB completion timeout test mode.
    UINT32                                     RxRcbChannelOrdering:1 ; ///<
    UINT32                                        RxRcbWrongAttrDis:1 ; ///<
    UINT32                                     RxRcbWrongFuncnumDis:1 ; ///<
    UINT32                                           Reserved_23_23:1 ; ///<
    UINT32                                           Reserved_29_24:6 ; ///<TxCplDebug: Not used.
    UINT32                                           Reserved_30_30:1 ; ///<
    UINT32                                      RxCplPostedReqOrdEn:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_0010_STRUCT;

// **** D0F0xE4_CORE_001C Register Definition ****
// Address
#define D0F0xE4_CORE_001C_ADDRESS                               0x1c

// Type
#define D0F0xE4_CORE_001C_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_001C_TxArbRoundRobinEn_OFFSET              0
#define D0F0xE4_CORE_001C_TxArbRoundRobinEn_WIDTH               1
#define D0F0xE4_CORE_001C_TxArbRoundRobinEn_MASK                0x1
#define D0F0xE4_CORE_001C_TxArbSlvLimit_OFFSET                  1
#define D0F0xE4_CORE_001C_TxArbSlvLimit_WIDTH                   5
#define D0F0xE4_CORE_001C_TxArbSlvLimit_MASK                    0x3e
#define D0F0xE4_CORE_001C_TxArbMstLimit_OFFSET                  6
#define D0F0xE4_CORE_001C_TxArbMstLimit_WIDTH                   5
#define D0F0xE4_CORE_001C_TxArbMstLimit_MASK                    0x7c0
#define D0F0xE4_CORE_001C_Reserved_15_11_OFFSET                 11
#define D0F0xE4_CORE_001C_Reserved_15_11_WIDTH                  5
#define D0F0xE4_CORE_001C_Reserved_15_11_MASK                   0xf800
#define D0F0xE4_CORE_001C_SlvMemLsEn_OFFSET                     16
#define D0F0xE4_CORE_001C_SlvMemLsEn_WIDTH                      1
#define D0F0xE4_CORE_001C_SlvMemLsEn_MASK                       0x10000
#define D0F0xE4_CORE_001C_SlvMemAggressiveLsEn_OFFSET           17
#define D0F0xE4_CORE_001C_SlvMemAggressiveLsEn_WIDTH            1
#define D0F0xE4_CORE_001C_SlvMemAggressiveLsEn_MASK             0x20000
#define D0F0xE4_CORE_001C_MstMemLsEn_OFFSET                     18
#define D0F0xE4_CORE_001C_MstMemLsEn_WIDTH                      1
#define D0F0xE4_CORE_001C_MstMemLsEn_MASK                       0x40000
#define D0F0xE4_CORE_001C_ReplayMemLsEn_OFFSET                  19
#define D0F0xE4_CORE_001C_ReplayMemLsEn_WIDTH                   1
#define D0F0xE4_CORE_001C_ReplayMemLsEn_MASK                    0x80000
#define D0F0xE4_CORE_001C_Reserved_31_20_OFFSET                 20
#define D0F0xE4_CORE_001C_Reserved_31_20_WIDTH                  12
#define D0F0xE4_CORE_001C_Reserved_31_20_MASK                   0xfff00000

/// D0F0xE4_CORE_001C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        TxArbRoundRobinEn:1 ; ///<
    UINT32                                            TxArbSlvLimit:5 ; ///<See TxArbMstLimit for details
    UINT32                                            TxArbMstLimit:5 ; ///<Defines together with TxArbSlvLimit a round robin arbitration pattern for downstream accesses. TxArbMstLimit defines the weight for downstream CPU requests and TxArbSlvLimit for the downstream read responses.
    UINT32                                           Reserved_15_11:5 ; ///<
    UINT32                                               SlvMemLsEn:1 ; ///<
    UINT32                                     SlvMemAggressiveLsEn:1 ; ///<
    UINT32                                               MstMemLsEn:1 ; ///<
    UINT32                                            ReplayMemLsEn:1 ; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_001C_STRUCT;

// **** D0F0xE4_CORE_0020 Register Definition ****
// Address
#define D0F0xE4_CORE_0020_ADDRESS                               0x20

// Type
#define D0F0xE4_CORE_0020_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_0020_Reserved_1_0_OFFSET                   0
#define D0F0xE4_CORE_0020_Reserved_1_0_WIDTH                    2
#define D0F0xE4_CORE_0020_Reserved_1_0_MASK                     0x3
#define D0F0xE4_CORE_0020_CiSlvSplitMode_OFFSET                 2
#define D0F0xE4_CORE_0020_CiSlvSplitMode_WIDTH                  1
#define D0F0xE4_CORE_0020_CiSlvSplitMode_MASK                   0x4
#define D0F0xE4_CORE_0020_CiSlvGenUsrDis_OFFSET                 3
#define D0F0xE4_CORE_0020_CiSlvGenUsrDis_WIDTH                  1
#define D0F0xE4_CORE_0020_CiSlvGenUsrDis_MASK                   0x8
#define D0F0xE4_CORE_0020_CiMstCmplDummyData_OFFSET             4
#define D0F0xE4_CORE_0020_CiMstCmplDummyData_WIDTH              1
#define D0F0xE4_CORE_0020_CiMstCmplDummyData_MASK               0x10
#define D0F0xE4_CORE_0020_Reserved_5_5_OFFSET                   5
#define D0F0xE4_CORE_0020_Reserved_5_5_WIDTH                    1
#define D0F0xE4_CORE_0020_Reserved_5_5_MASK                     0x20
#define D0F0xE4_CORE_0020_CiSlvRcRdReqSize_OFFSET               6
#define D0F0xE4_CORE_0020_CiSlvRcRdReqSize_WIDTH                2
#define D0F0xE4_CORE_0020_CiSlvRcRdReqSize_MASK                 0xc0
#define D0F0xE4_CORE_0020_CiSlvOrderingDis_OFFSET               8
#define D0F0xE4_CORE_0020_CiSlvOrderingDis_WIDTH                1
#define D0F0xE4_CORE_0020_CiSlvOrderingDis_MASK                 0x100
#define D0F0xE4_CORE_0020_CiRcOrderingDis_OFFSET                9
#define D0F0xE4_CORE_0020_CiRcOrderingDis_WIDTH                 1
#define D0F0xE4_CORE_0020_CiRcOrderingDis_MASK                  0x200
#define D0F0xE4_CORE_0020_CiSlvCplAllocDis_OFFSET               10
#define D0F0xE4_CORE_0020_CiSlvCplAllocDis_WIDTH                1
#define D0F0xE4_CORE_0020_CiSlvCplAllocDis_MASK                 0x400
#define D0F0xE4_CORE_0020_CiSlvCplAllocMode_OFFSET              11
#define D0F0xE4_CORE_0020_CiSlvCplAllocMode_WIDTH               1
#define D0F0xE4_CORE_0020_CiSlvCplAllocMode_MASK                0x800
#define D0F0xE4_CORE_0020_Reserved_31_12_OFFSET                 12
#define D0F0xE4_CORE_0020_Reserved_31_12_WIDTH                  20
#define D0F0xE4_CORE_0020_Reserved_31_12_MASK                   0xfffff000

/// D0F0xE4_CORE_0020
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_1_0:2 ; ///<
    UINT32                                           CiSlvSplitMode:1 ; ///<
    UINT32                                           CiSlvGenUsrDis:1 ; ///<
    UINT32                                       CiMstCmplDummyData:1 ; ///<
    UINT32                                             Reserved_5_5:1 ; ///<
    UINT32                                         CiSlvRcRdReqSize:2 ; ///<This field specifies the request size for upstream transactions.
    UINT32                                         CiSlvOrderingDis:1 ; ///<
    UINT32                                          CiRcOrderingDis:1 ; ///<
    UINT32                                         CiSlvCplAllocDis:1 ; ///<
    UINT32                                        CiSlvCplAllocMode:1 ; ///<This bit controls the mode how the slave completion buffer is sub-divided.
    UINT32                                           Reserved_31_12:20; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_0020_STRUCT;

// **** D0F0xE4_CORE_0040 Register Definition ****
// Address
#define D0F0xE4_CORE_0040_ADDRESS                               0x40

// Type
#define D0F0xE4_CORE_0040_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_0040_Reserved_0_0_OFFSET                   0
#define D0F0xE4_CORE_0040_Reserved_0_0_WIDTH                    1
#define D0F0xE4_CORE_0040_Reserved_0_0_MASK                     0x1
#define D0F0xE4_CORE_0040_PSymalignMode_OFFSET                  1
#define D0F0xE4_CORE_0040_PSymalignMode_WIDTH                   1
#define D0F0xE4_CORE_0040_PSymalignMode_MASK                    0x2
#define D0F0xE4_CORE_0040_Reserved_9_2_OFFSET                   2
#define D0F0xE4_CORE_0040_Reserved_9_2_WIDTH                    8
#define D0F0xE4_CORE_0040_Reserved_9_2_MASK                     0x3fc
#define D0F0xE4_CORE_0040_PSymalignHwDebug_OFFSET               10
#define D0F0xE4_CORE_0040_PSymalignHwDebug_WIDTH                1
#define D0F0xE4_CORE_0040_PSymalignHwDebug_MASK                 0x400
#define D0F0xE4_CORE_0040_PElastDeskewHwDebug_OFFSET            11
#define D0F0xE4_CORE_0040_PElastDeskewHwDebug_WIDTH             1
#define D0F0xE4_CORE_0040_PElastDeskewHwDebug_MASK              0x800
#define D0F0xE4_CORE_0040_Reserved_12_12_OFFSET                 12
#define D0F0xE4_CORE_0040_Reserved_12_12_WIDTH                  1
#define D0F0xE4_CORE_0040_Reserved_12_12_MASK                   0x1000
#define D0F0xE4_CORE_0040_PAlwaysUseFastTxclk_OFFSET            13
#define D0F0xE4_CORE_0040_PAlwaysUseFastTxclk_WIDTH             1
#define D0F0xE4_CORE_0040_PAlwaysUseFastTxclk_MASK              0x2000
#define D0F0xE4_CORE_0040_PElecIdleMode_OFFSET                  14
#define D0F0xE4_CORE_0040_PElecIdleMode_WIDTH                   2
#define D0F0xE4_CORE_0040_PElecIdleMode_MASK                    0xc000
#define D0F0xE4_CORE_0040_Reserved_31_16_OFFSET                 16
#define D0F0xE4_CORE_0040_Reserved_31_16_WIDTH                  16
#define D0F0xE4_CORE_0040_Reserved_31_16_MASK                   0xffff0000

/// D0F0xE4_CORE_0040
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                            PSymalignMode:1 ; ///< Data valid is always asserted and symbol lock updates occur right away when any bit shift is detected. Data valid confirmation is need before it is set.
    UINT32                                             Reserved_9_2:8 ; ///<
    UINT32                                         PSymalignHwDebug:1 ; ///<
    UINT32                                      PElastDeskewHwDebug:1 ; ///<
    UINT32                                           Reserved_12_12:1 ; ///<
    UINT32                                      PAlwaysUseFastTxclk:1 ; ///<
    UINT32                                            PElecIdleMode:2 ; ///<Defines which electrical idle signal is used, either inferred by link controller of from phy.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_0040_STRUCT;

// **** D0F0xE4_CORE_00B0 Register Definition ****
// Address
#define D0F0xE4_CORE_00B0_ADDRESS                               0xb0

// Type
#define D0F0xE4_CORE_00B0_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_00B0_StrapF0En_OFFSET                      0
#define D0F0xE4_CORE_00B0_StrapF0En_WIDTH                       1
#define D0F0xE4_CORE_00B0_StrapF0En_MASK                        0x1
#define D0F0xE4_CORE_00B0_StrapF0LegacyDeviceTypeEn_OFFSET      1
#define D0F0xE4_CORE_00B0_StrapF0LegacyDeviceTypeEn_WIDTH       1
#define D0F0xE4_CORE_00B0_StrapF0LegacyDeviceTypeEn_MASK        0x2
#define D0F0xE4_CORE_00B0_StrapF0MsiEn_OFFSET                   2
#define D0F0xE4_CORE_00B0_StrapF0MsiEn_WIDTH                    1
#define D0F0xE4_CORE_00B0_StrapF0MsiEn_MASK                     0x4
#define D0F0xE4_CORE_00B0_StrapF0VcEn_OFFSET                    3
#define D0F0xE4_CORE_00B0_StrapF0VcEn_WIDTH                     1
#define D0F0xE4_CORE_00B0_StrapF0VcEn_MASK                      0x8
#define D0F0xE4_CORE_00B0_StrapF0DsnEn_OFFSET                   4
#define D0F0xE4_CORE_00B0_StrapF0DsnEn_WIDTH                    1
#define D0F0xE4_CORE_00B0_StrapF0DsnEn_MASK                     0x10
#define D0F0xE4_CORE_00B0_StrapF0AerEn_OFFSET                   5
#define D0F0xE4_CORE_00B0_StrapF0AerEn_WIDTH                    1
#define D0F0xE4_CORE_00B0_StrapF0AerEn_MASK                     0x20
#define D0F0xE4_CORE_00B0_StrapF0AcsEn_OFFSET                   6
#define D0F0xE4_CORE_00B0_StrapF0AcsEn_WIDTH                    1
#define D0F0xE4_CORE_00B0_StrapF0AcsEn_MASK                     0x40
#define D0F0xE4_CORE_00B0_StrapF0BarEn_OFFSET                   7
#define D0F0xE4_CORE_00B0_StrapF0BarEn_WIDTH                    1
#define D0F0xE4_CORE_00B0_StrapF0BarEn_MASK                     0x80
#define D0F0xE4_CORE_00B0_StrapF0PwrEn_OFFSET                   8
#define D0F0xE4_CORE_00B0_StrapF0PwrEn_WIDTH                    1
#define D0F0xE4_CORE_00B0_StrapF0PwrEn_MASK                     0x100
#define D0F0xE4_CORE_00B0_Reserved_31_9_OFFSET                  9
#define D0F0xE4_CORE_00B0_Reserved_31_9_WIDTH                   23
#define D0F0xE4_CORE_00B0_Reserved_31_9_MASK                    0xfffffe00

/// D0F0xE4_CORE_00B0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                StrapF0En:1 ; ///<Overrides function 0 enable.
    UINT32                                StrapF0LegacyDeviceTypeEn:1 ; ///<Overrides legacy device type enable.
    UINT32                                             StrapF0MsiEn:1 ; ///<
    UINT32                                              StrapF0VcEn:1 ; ///<Overrides virtual channel enable.
    UINT32                                             StrapF0DsnEn:1 ; ///<Overrides device serial number enable.
    UINT32                                             StrapF0AerEn:1 ; ///< AER is not supported. UBTS #222472, #229213.
    UINT32                                             StrapF0AcsEn:1 ; ///<Overrides ACS enable.
    UINT32                                             StrapF0BarEn:1 ; ///<Returns the value of BAR enable.
    UINT32                                             StrapF0PwrEn:1 ; ///<Returns the value of power enable.
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_00B0_STRUCT;

// **** D0F0xE4_CORE_00C0 Register Definition ****
// Address
#define D0F0xE4_CORE_00C0_ADDRESS                               0xc0

// Type
#define D0F0xE4_CORE_00C0_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_00C0_StrapLinkConfig_OFFSET                0
#define D0F0xE4_CORE_00C0_StrapLinkConfig_WIDTH                 4
#define D0F0xE4_CORE_00C0_StrapLinkConfig_MASK                  0xf
#define D0F0xE4_CORE_00C0_Reserved_5_4_OFFSET                   4
#define D0F0xE4_CORE_00C0_Reserved_5_4_WIDTH                    2
#define D0F0xE4_CORE_00C0_Reserved_5_4_MASK                     0x30
#define D0F0xE4_CORE_00C0_StrapBypassScrambler_OFFSET           6
#define D0F0xE4_CORE_00C0_StrapBypassScrambler_WIDTH            1
#define D0F0xE4_CORE_00C0_StrapBypassScrambler_MASK             0x40
#define D0F0xE4_CORE_00C0_Reserved_23_7_OFFSET                  7
#define D0F0xE4_CORE_00C0_Reserved_23_7_WIDTH                   17
#define D0F0xE4_CORE_00C0_Reserved_23_7_MASK                    0xffff80
#define D0F0xE4_CORE_00C0_StrapClkPmEn_OFFSET                   24
#define D0F0xE4_CORE_00C0_StrapClkPmEn_WIDTH                    1
#define D0F0xE4_CORE_00C0_StrapClkPmEn_MASK                     0x1000000
#define D0F0xE4_CORE_00C0_StrapEcn1p1En_OFFSET                  25
#define D0F0xE4_CORE_00C0_StrapEcn1p1En_WIDTH                   1
#define D0F0xE4_CORE_00C0_StrapEcn1p1En_MASK                    0x2000000
#define D0F0xE4_CORE_00C0_StrapExtVcCount_OFFSET                26
#define D0F0xE4_CORE_00C0_StrapExtVcCount_WIDTH                 1
#define D0F0xE4_CORE_00C0_StrapExtVcCount_MASK                  0x4000000
#define D0F0xE4_CORE_00C0_Reserved_27_27_OFFSET                 27
#define D0F0xE4_CORE_00C0_Reserved_27_27_WIDTH                  1
#define D0F0xE4_CORE_00C0_Reserved_27_27_MASK                   0x8000000
#define D0F0xE4_CORE_00C0_StrapReverseAll_OFFSET                28
#define D0F0xE4_CORE_00C0_StrapReverseAll_WIDTH                 1
#define D0F0xE4_CORE_00C0_StrapReverseAll_MASK                  0x10000000
#define D0F0xE4_CORE_00C0_StrapMstAdr64En_OFFSET                29
#define D0F0xE4_CORE_00C0_StrapMstAdr64En_WIDTH                 1
#define D0F0xE4_CORE_00C0_StrapMstAdr64En_MASK                  0x20000000
#define D0F0xE4_CORE_00C0_Reserved_31_30_OFFSET                 30
#define D0F0xE4_CORE_00C0_Reserved_31_30_WIDTH                  2
#define D0F0xE4_CORE_00C0_Reserved_31_30_MASK                   0xc0000000

/// D0F0xE4_CORE_00C0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          StrapLinkConfig:4 ; ///<
    UINT32                                             Reserved_5_4:2 ; ///<
    UINT32                                     StrapBypassScrambler:1 ; ///<
    UINT32                                            Reserved_23_7:17; ///<
    UINT32                                             StrapClkPmEn:1 ; ///<
    UINT32                                            StrapEcn1p1En:1 ; ///<
    UINT32                                          StrapExtVcCount:1 ; ///<
    UINT32                                           Reserved_27_27:1 ; ///<
    UINT32                                          StrapReverseAll:1 ; ///<
    UINT32                                          StrapMstAdr64En:1 ; ///< D0F0xE4_x0101_00B0[StrapF0MsiEn] must be 1 before StrapMstAdr64En is programmed to 1. BOZO: Wrestler spec has reset 1, check this.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_00C0_STRUCT;

// **** D0F0xE4_CORE_00C1 Register Definition ****
// Address
#define D0F0xE4_CORE_00C1_ADDRESS                               0xc1

// Type
#define D0F0xE4_CORE_00C1_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_00C1_StrapLinkBwNotificationCapEn_OFFSET   0
#define D0F0xE4_CORE_00C1_StrapLinkBwNotificationCapEn_WIDTH    1
#define D0F0xE4_CORE_00C1_StrapLinkBwNotificationCapEn_MASK     0x1
#define D0F0xE4_CORE_00C1_StrapGen2Compliance_OFFSET            1
#define D0F0xE4_CORE_00C1_StrapGen2Compliance_WIDTH             1
#define D0F0xE4_CORE_00C1_StrapGen2Compliance_MASK              0x2
#define D0F0xE4_CORE_00C1_StrapMstcplTimeoutEn_OFFSET           2
#define D0F0xE4_CORE_00C1_StrapMstcplTimeoutEn_WIDTH            1
#define D0F0xE4_CORE_00C1_StrapMstcplTimeoutEn_MASK             0x4
#define D0F0xE4_CORE_00C1_Reserved_31_3_OFFSET                  3
#define D0F0xE4_CORE_00C1_Reserved_31_3_WIDTH                   29
#define D0F0xE4_CORE_00C1_Reserved_31_3_MASK                    0xfffffff8

/// D0F0xE4_CORE_00C1
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                             StrapLinkBwNotificationCapEn:1 ; ///<
    UINT32                                      StrapGen2Compliance:1 ; ///<
    UINT32                                     StrapMstcplTimeoutEn:1 ; ///<
    UINT32                                            Reserved_31_3:29; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_00C1_STRUCT;

// **** D0F0xE4_PIF_0011 Register Definition ****
// Address
#define D0F0xE4_PIF_0011_ADDRESS                                0x11

// Type
#define D0F0xE4_PIF_0011_TYPE                                   TYPE_D0F0xE4
// Field Data
#define D0F0xE4_PIF_0011_X2Lane10_OFFSET                        0
#define D0F0xE4_PIF_0011_X2Lane10_WIDTH                         1
#define D0F0xE4_PIF_0011_X2Lane10_MASK                          0x1
#define D0F0xE4_PIF_0011_X2Lane32_OFFSET                        1
#define D0F0xE4_PIF_0011_X2Lane32_WIDTH                         1
#define D0F0xE4_PIF_0011_X2Lane32_MASK                          0x2
#define D0F0xE4_PIF_0011_X2Lane54_OFFSET                        2
#define D0F0xE4_PIF_0011_X2Lane54_WIDTH                         1
#define D0F0xE4_PIF_0011_X2Lane54_MASK                          0x4
#define D0F0xE4_PIF_0011_X2Lane76_OFFSET                        3
#define D0F0xE4_PIF_0011_X2Lane76_WIDTH                         1
#define D0F0xE4_PIF_0011_X2Lane76_MASK                          0x8
#define D0F0xE4_PIF_0011_Reserved_7_4_OFFSET                    4
#define D0F0xE4_PIF_0011_Reserved_7_4_WIDTH                     4
#define D0F0xE4_PIF_0011_Reserved_7_4_MASK                      0xf0
#define D0F0xE4_PIF_0011_X4Lane30_OFFSET                        8
#define D0F0xE4_PIF_0011_X4Lane30_WIDTH                         1
#define D0F0xE4_PIF_0011_X4Lane30_MASK                          0x100
#define D0F0xE4_PIF_0011_X4Lane74_OFFSET                        9
#define D0F0xE4_PIF_0011_X4Lane74_WIDTH                         1
#define D0F0xE4_PIF_0011_X4Lane74_MASK                          0x200
#define D0F0xE4_PIF_0011_Reserved_11_10_OFFSET                  10
#define D0F0xE4_PIF_0011_Reserved_11_10_WIDTH                   2
#define D0F0xE4_PIF_0011_Reserved_11_10_MASK                    0xc00
#define D0F0xE4_PIF_0011_X4Lane52_OFFSET                        12
#define D0F0xE4_PIF_0011_X4Lane52_WIDTH                         1
#define D0F0xE4_PIF_0011_X4Lane52_MASK                          0x1000
#define D0F0xE4_PIF_0011_Reserved_15_13_OFFSET                  13
#define D0F0xE4_PIF_0011_Reserved_15_13_WIDTH                   3
#define D0F0xE4_PIF_0011_Reserved_15_13_MASK                    0xe000
#define D0F0xE4_PIF_0011_X8Lane70_OFFSET                        16
#define D0F0xE4_PIF_0011_X8Lane70_WIDTH                         1
#define D0F0xE4_PIF_0011_X8Lane70_MASK                          0x10000
#define D0F0xE4_PIF_0011_Reserved_24_17_OFFSET                  17
#define D0F0xE4_PIF_0011_Reserved_24_17_WIDTH                   8
#define D0F0xE4_PIF_0011_Reserved_24_17_MASK                    0x1fe0000
#define D0F0xE4_PIF_0011_MultiPif_OFFSET                        25
#define D0F0xE4_PIF_0011_MultiPif_WIDTH                         1
#define D0F0xE4_PIF_0011_MultiPif_MASK                          0x2000000
#define D0F0xE4_PIF_0011_Reserved_31_26_OFFSET                  26
#define D0F0xE4_PIF_0011_Reserved_31_26_WIDTH                   6
#define D0F0xE4_PIF_0011_Reserved_31_26_MASK                    0xfc000000

/// D0F0xE4_PIF_0011
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 X2Lane10:1 ; ///<
    UINT32                                                 X2Lane32:1 ; ///<
    UINT32                                                 X2Lane54:1 ; ///<
    UINT32                                                 X2Lane76:1 ; ///<
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                                 X4Lane30:1 ; ///<
    UINT32                                                 X4Lane74:1 ; ///<
    UINT32                                           Reserved_11_10:2 ; ///<
    UINT32                                                 X4Lane52:1 ; ///<
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                                 X8Lane70:1 ; ///<
    UINT32                                           Reserved_24_17:8 ; ///<
    UINT32                                                 MultiPif:1 ; ///< Family 14h Models 00h-0Fh Processors do not have a second PIF.
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_PIF_0011_STRUCT;

// **** DxF0xE4_x50 Register Definition ****
// Address
#define DxF0xE4_x50_ADDRESS                                     0x50

// Type
#define DxF0xE4_x50_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_x50_PortLaneReversal_OFFSET                     0
#define DxF0xE4_x50_PortLaneReversal_WIDTH                      1
#define DxF0xE4_x50_PortLaneReversal_MASK                       0x1
#define DxF0xE4_x50_PhyLinkWidth_OFFSET                         1
#define DxF0xE4_x50_PhyLinkWidth_WIDTH                          6
#define DxF0xE4_x50_PhyLinkWidth_MASK                           0x7e
#define DxF0xE4_x50_Reserved_31_7_OFFSET                        7
#define DxF0xE4_x50_Reserved_31_7_WIDTH                         25
#define DxF0xE4_x50_Reserved_31_7_MASK                          0xffffff80

/// DxF0xE4_x50
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         PortLaneReversal:1 ; ///<
    UINT32                                             PhyLinkWidth:6 ; ///<
    UINT32                                            Reserved_31_7:25; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_x50_STRUCT;

// **** DxF0xE4_x6A Register Definition ****
// Address
#define DxF0xE4_x6A_ADDRESS                                     0x6a

// Type
#define DxF0xE4_x6A_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_x6A_ErrReportingDis_OFFSET                      0
#define DxF0xE4_x6A_ErrReportingDis_WIDTH                       1
#define DxF0xE4_x6A_ErrReportingDis_MASK                        0x1
#define DxF0xE4_x6A_StrapFirstRcvdErrLog_OFFSET                 1
#define DxF0xE4_x6A_StrapFirstRcvdErrLog_WIDTH                  1
#define DxF0xE4_x6A_StrapFirstRcvdErrLog_MASK                   0x2
#define DxF0xE4_x6A_Reserved_3_2_OFFSET                         2
#define DxF0xE4_x6A_Reserved_3_2_WIDTH                          2
#define DxF0xE4_x6A_Reserved_3_2_MASK                           0xc
#define DxF0xE4_x6A_TxGenerateLcrcErr_OFFSET                    4
#define DxF0xE4_x6A_TxGenerateLcrcErr_WIDTH                     1
#define DxF0xE4_x6A_TxGenerateLcrcErr_MASK                      0x10
#define DxF0xE4_x6A_RxGenerateLcrcErr_OFFSET                    5
#define DxF0xE4_x6A_RxGenerateLcrcErr_WIDTH                     1
#define DxF0xE4_x6A_RxGenerateLcrcErr_MASK                      0x20
#define DxF0xE4_x6A_TxGenerateEcrcErr_OFFSET                    6
#define DxF0xE4_x6A_TxGenerateEcrcErr_WIDTH                     1
#define DxF0xE4_x6A_TxGenerateEcrcErr_MASK                      0x40
#define DxF0xE4_x6A_RxGenerateEcrcErr_OFFSET                    7
#define DxF0xE4_x6A_RxGenerateEcrcErr_WIDTH                     1
#define DxF0xE4_x6A_RxGenerateEcrcErr_MASK                      0x80
#define DxF0xE4_x6A_AerHdrLogTimeout_OFFSET                     8
#define DxF0xE4_x6A_AerHdrLogTimeout_WIDTH                      3
#define DxF0xE4_x6A_AerHdrLogTimeout_MASK                       0x700
#define DxF0xE4_x6A_AerHdrLogF0TimerExpired_OFFSET              11
#define DxF0xE4_x6A_AerHdrLogF0TimerExpired_WIDTH               1
#define DxF0xE4_x6A_AerHdrLogF0TimerExpired_MASK                0x800
#define DxF0xE4_x6A_Reserved_13_12_OFFSET                       12
#define DxF0xE4_x6A_Reserved_13_12_WIDTH                        2
#define DxF0xE4_x6A_Reserved_13_12_MASK                         0x3000
#define DxF0xE4_x6A_CiPSlvBufRdHaltStatus_OFFSET                14
#define DxF0xE4_x6A_CiPSlvBufRdHaltStatus_WIDTH                 1
#define DxF0xE4_x6A_CiPSlvBufRdHaltStatus_MASK                  0x4000
#define DxF0xE4_x6A_CiNpSlvBufRdHaltStatus_OFFSET               15
#define DxF0xE4_x6A_CiNpSlvBufRdHaltStatus_WIDTH                1
#define DxF0xE4_x6A_CiNpSlvBufRdHaltStatus_MASK                 0x8000
#define DxF0xE4_x6A_CiSlvBufHaltReset_OFFSET                    16
#define DxF0xE4_x6A_CiSlvBufHaltReset_WIDTH                     1
#define DxF0xE4_x6A_CiSlvBufHaltReset_MASK                      0x10000
#define DxF0xE4_x6A_Reserved_31_17_OFFSET                       17
#define DxF0xE4_x6A_Reserved_31_17_WIDTH                        15
#define DxF0xE4_x6A_Reserved_31_17_MASK                         0xfffe0000

/// DxF0xE4_x6A
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          ErrReportingDis:1 ; ///<
    UINT32                                     StrapFirstRcvdErrLog:1 ; ///<
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                        TxGenerateLcrcErr:1 ; ///<
    UINT32                                        RxGenerateLcrcErr:1 ; ///<
    UINT32                                        TxGenerateEcrcErr:1 ; ///<
    UINT32                                        RxGenerateEcrcErr:1 ; ///<
    UINT32                                         AerHdrLogTimeout:3 ; ///<
    UINT32                                  AerHdrLogF0TimerExpired:1 ; ///<
    UINT32                                           Reserved_13_12:2 ; ///<
    UINT32                                    CiPSlvBufRdHaltStatus:1 ; ///<
    UINT32                                   CiNpSlvBufRdHaltStatus:1 ; ///<
    UINT32                                        CiSlvBufHaltReset:1 ; ///<
    UINT32                                           Reserved_31_17:15; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_x6A_STRUCT;

// **** DxF0xE4_x70 Register Definition ****
// Address
#define DxF0xE4_x70_ADDRESS                                     0x70

// Type
#define DxF0xE4_x70_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_x70_RxIgnoreIoErr_OFFSET                        0
#define DxF0xE4_x70_RxIgnoreIoErr_WIDTH                         1
#define DxF0xE4_x70_RxIgnoreIoErr_MASK                          0x1
#define DxF0xE4_x70_RxIgnoreBeErr_OFFSET                        1
#define DxF0xE4_x70_RxIgnoreBeErr_WIDTH                         1
#define DxF0xE4_x70_RxIgnoreBeErr_MASK                          0x2
#define DxF0xE4_x70_RxIgnoreMsgErr_OFFSET                       2
#define DxF0xE4_x70_RxIgnoreMsgErr_WIDTH                        1
#define DxF0xE4_x70_RxIgnoreMsgErr_MASK                         0x4
#define DxF0xE4_x70_Reserved_3_3_OFFSET                         3
#define DxF0xE4_x70_Reserved_3_3_WIDTH                          1
#define DxF0xE4_x70_Reserved_3_3_MASK                           0x8
#define DxF0xE4_x70_RxIgnoreCfgErr_OFFSET                       4
#define DxF0xE4_x70_RxIgnoreCfgErr_WIDTH                        1
#define DxF0xE4_x70_RxIgnoreCfgErr_MASK                         0x10
#define DxF0xE4_x70_RxIgnoreCplErr_OFFSET                       5
#define DxF0xE4_x70_RxIgnoreCplErr_WIDTH                        1
#define DxF0xE4_x70_RxIgnoreCplErr_MASK                         0x20
#define DxF0xE4_x70_RxIgnoreEpErr_OFFSET                        6
#define DxF0xE4_x70_RxIgnoreEpErr_WIDTH                         1
#define DxF0xE4_x70_RxIgnoreEpErr_MASK                          0x40
#define DxF0xE4_x70_RxIgnoreLenMismatchErr_OFFSET               7
#define DxF0xE4_x70_RxIgnoreLenMismatchErr_WIDTH                1
#define DxF0xE4_x70_RxIgnoreLenMismatchErr_MASK                 0x80
#define DxF0xE4_x70_RxIgnoreMaxPayloadErr_OFFSET                8
#define DxF0xE4_x70_RxIgnoreMaxPayloadErr_WIDTH                 1
#define DxF0xE4_x70_RxIgnoreMaxPayloadErr_MASK                  0x100
#define DxF0xE4_x70_RxIgnoreTcErr_OFFSET                        9
#define DxF0xE4_x70_RxIgnoreTcErr_WIDTH                         1
#define DxF0xE4_x70_RxIgnoreTcErr_MASK                          0x200
#define DxF0xE4_x70_Reserved_11_10_OFFSET                       10
#define DxF0xE4_x70_Reserved_11_10_WIDTH                        2
#define DxF0xE4_x70_Reserved_11_10_MASK                         0xc00
#define DxF0xE4_x70_RxIgnoreVend0_UR_OFFSET                     12
#define DxF0xE4_x70_RxIgnoreVend0_UR_WIDTH                      1
#define DxF0xE4_x70_RxIgnoreVend0_UR_MASK                       0x1000
#define DxF0xE4_x70_RxNakIfFifoFull_OFFSET                      13
#define DxF0xE4_x70_RxNakIfFifoFull_WIDTH                       1
#define DxF0xE4_x70_RxNakIfFifoFull_MASK                        0x2000
#define DxF0xE4_x70_RxGenOneNak_OFFSET                          14
#define DxF0xE4_x70_RxGenOneNak_WIDTH                           1
#define DxF0xE4_x70_RxGenOneNak_MASK                            0x4000
#define DxF0xE4_x70_RxFcInitFromReg_OFFSET                      15
#define DxF0xE4_x70_RxFcInitFromReg_WIDTH                       1
#define DxF0xE4_x70_RxFcInitFromReg_MASK                        0x8000
#define DxF0xE4_x70_RxRcbCplTimeout_OFFSET                      16
#define DxF0xE4_x70_RxRcbCplTimeout_WIDTH                       3
#define DxF0xE4_x70_RxRcbCplTimeout_MASK                        0x70000
#define DxF0xE4_x70_RxRcbCplTimeoutMode_OFFSET                  19
#define DxF0xE4_x70_RxRcbCplTimeoutMode_WIDTH                   1
#define DxF0xE4_x70_RxRcbCplTimeoutMode_MASK                    0x80000
#define DxF0xE4_x70_RxPcieCplTimeoutDis_OFFSET                  20
#define DxF0xE4_x70_RxPcieCplTimeoutDis_WIDTH                   1
#define DxF0xE4_x70_RxPcieCplTimeoutDis_MASK                    0x100000
#define DxF0xE4_x70_Reserved_31_21_OFFSET                       21
#define DxF0xE4_x70_Reserved_31_21_WIDTH                        11
#define DxF0xE4_x70_Reserved_31_21_MASK                         0xffe00000

/// DxF0xE4_x70
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            RxIgnoreIoErr:1 ; ///<
    UINT32                                            RxIgnoreBeErr:1 ; ///<
    UINT32                                           RxIgnoreMsgErr:1 ; ///<
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                           RxIgnoreCfgErr:1 ; ///<
    UINT32                                           RxIgnoreCplErr:1 ; ///<
    UINT32                                            RxIgnoreEpErr:1 ; ///<
    UINT32                                   RxIgnoreLenMismatchErr:1 ; ///<
    UINT32                                    RxIgnoreMaxPayloadErr:1 ; ///<
    UINT32                                            RxIgnoreTcErr:1 ; ///<
    UINT32                                           Reserved_11_10:2 ; ///<
    UINT32                                         RxIgnoreVend0_UR:1 ; ///<
    UINT32                                          RxNakIfFifoFull:1 ; ///<
    UINT32                                              RxGenOneNak:1 ; ///<
    UINT32                                          RxFcInitFromReg:1 ; ///<
    UINT32                                          RxRcbCplTimeout:3 ; ///<
    UINT32                                      RxRcbCplTimeoutMode:1 ; ///<
    UINT32                                      RxPcieCplTimeoutDis:1 ; ///<
    UINT32                                           Reserved_31_21:11; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_x70_STRUCT;

// **** DxF0xE4_xA4 Register Definition ****
// Address
#define DxF0xE4_xA4_ADDRESS                                     0xa4

// Type
#define DxF0xE4_xA4_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xA4_LcGen2EnStrap_OFFSET                        0
#define DxF0xE4_xA4_LcGen2EnStrap_WIDTH                         1
#define DxF0xE4_xA4_LcGen2EnStrap_MASK                          0x1
#define DxF0xE4_xA4_LcTargetLinkSpeedOverrideEn_OFFSET          1
#define DxF0xE4_xA4_LcTargetLinkSpeedOverrideEn_WIDTH           1
#define DxF0xE4_xA4_LcTargetLinkSpeedOverrideEn_MASK            0x2
#define DxF0xE4_xA4_LcTargetLinkSpeedOverride_OFFSET            2
#define DxF0xE4_xA4_LcTargetLinkSpeedOverride_WIDTH             1
#define DxF0xE4_xA4_LcTargetLinkSpeedOverride_MASK              0x4
#define DxF0xE4_xA4_LcForceEnSwSpeedChange_OFFSET               3
#define DxF0xE4_xA4_LcForceEnSwSpeedChange_WIDTH                1
#define DxF0xE4_xA4_LcForceEnSwSpeedChange_MASK                 0x8
#define DxF0xE4_xA4_LcForceDisSwSpeedChange_OFFSET              4
#define DxF0xE4_xA4_LcForceDisSwSpeedChange_WIDTH               1
#define DxF0xE4_xA4_LcForceDisSwSpeedChange_MASK                0x10
#define DxF0xE4_xA4_LcForceEnHwSpeedChange_OFFSET               5
#define DxF0xE4_xA4_LcForceEnHwSpeedChange_WIDTH                1
#define DxF0xE4_xA4_LcForceEnHwSpeedChange_MASK                 0x20
#define DxF0xE4_xA4_LcForceDisHwSpeedChange_OFFSET              6
#define DxF0xE4_xA4_LcForceDisHwSpeedChange_WIDTH               1
#define DxF0xE4_xA4_LcForceDisHwSpeedChange_MASK                0x40
#define DxF0xE4_xA4_LcInitiateLinkSpeedChange_OFFSET            7
#define DxF0xE4_xA4_LcInitiateLinkSpeedChange_WIDTH             1
#define DxF0xE4_xA4_LcInitiateLinkSpeedChange_MASK              0x80
#define DxF0xE4_xA4_LcSpeedChangeAttemptsAllowed_OFFSET         8
#define DxF0xE4_xA4_LcSpeedChangeAttemptsAllowed_WIDTH          2
#define DxF0xE4_xA4_LcSpeedChangeAttemptsAllowed_MASK           0x300
#define DxF0xE4_xA4_LcSpeedChangeAttemptFailed_OFFSET           10
#define DxF0xE4_xA4_LcSpeedChangeAttemptFailed_WIDTH            1
#define DxF0xE4_xA4_LcSpeedChangeAttemptFailed_MASK             0x400
#define DxF0xE4_xA4_LcCurrentDataRate_OFFSET                    11
#define DxF0xE4_xA4_LcCurrentDataRate_WIDTH                     1
#define DxF0xE4_xA4_LcCurrentDataRate_MASK                      0x800
#define DxF0xE4_xA4_Reserved_17_12_OFFSET                       12
#define DxF0xE4_xA4_Reserved_17_12_WIDTH                        6
#define DxF0xE4_xA4_Reserved_17_12_MASK                         0x3f000
#define DxF0xE4_xA4_LcGoToRecovery_OFFSET                       18
#define DxF0xE4_xA4_LcGoToRecovery_WIDTH                        1
#define DxF0xE4_xA4_LcGoToRecovery_MASK                         0x40000
#define DxF0xE4_xA4_LcNEieSel_OFFSET                            19
#define DxF0xE4_xA4_LcNEieSel_WIDTH                             1
#define DxF0xE4_xA4_LcNEieSel_MASK                              0x80000
#define DxF0xE4_xA4_DontClrTargetSpdChangeStatus_OFFSET         20
#define DxF0xE4_xA4_DontClrTargetSpdChangeStatus_WIDTH          1
#define DxF0xE4_xA4_DontClrTargetSpdChangeStatus_MASK           0x100000
#define DxF0xE4_xA4_LcClrFailedSpdChangeCnt_OFFSET              21
#define DxF0xE4_xA4_LcClrFailedSpdChangeCnt_WIDTH               1
#define DxF0xE4_xA4_LcClrFailedSpdChangeCnt_MASK                0x200000
#define DxF0xE4_xA4_Lc1orMoreTs2SpeedArcEn_OFFSET               22
#define DxF0xE4_xA4_Lc1orMoreTs2SpeedArcEn_WIDTH                1
#define DxF0xE4_xA4_Lc1orMoreTs2SpeedArcEn_MASK                 0x400000
#define DxF0xE4_xA4_LcOtherSideEverSentGen2_OFFSET              23
#define DxF0xE4_xA4_LcOtherSideEverSentGen2_WIDTH               1
#define DxF0xE4_xA4_LcOtherSideEverSentGen2_MASK                0x800000
#define DxF0xE4_xA4_LcOtherSideSupportsGen2_OFFSET              24
#define DxF0xE4_xA4_LcOtherSideSupportsGen2_WIDTH               1
#define DxF0xE4_xA4_LcOtherSideSupportsGen2_MASK                0x1000000
#define DxF0xE4_xA4_LcAutoRecoveryDis_OFFSET                    25
#define DxF0xE4_xA4_LcAutoRecoveryDis_WIDTH                     1
#define DxF0xE4_xA4_LcAutoRecoveryDis_MASK                      0x2000000
#define DxF0xE4_xA4_LcSpeedChangeStatus_OFFSET                  26
#define DxF0xE4_xA4_LcSpeedChangeStatus_WIDTH                   1
#define DxF0xE4_xA4_LcSpeedChangeStatus_MASK                    0x4000000
#define DxF0xE4_xA4_LcDataRateAdvertised_OFFSET                 27
#define DxF0xE4_xA4_LcDataRateAdvertised_WIDTH                  1
#define DxF0xE4_xA4_LcDataRateAdvertised_MASK                   0x8000000
#define DxF0xE4_xA4_LcCheckDataRate_OFFSET                      28
#define DxF0xE4_xA4_LcCheckDataRate_WIDTH                       1
#define DxF0xE4_xA4_LcCheckDataRate_MASK                        0x10000000
#define DxF0xE4_xA4_LcMultUpstreamAutoSpdChngEn_OFFSET          29
#define DxF0xE4_xA4_LcMultUpstreamAutoSpdChngEn_WIDTH           1
#define DxF0xE4_xA4_LcMultUpstreamAutoSpdChngEn_MASK            0x20000000
#define DxF0xE4_xA4_LcInitSpeedNegInL0sEn_OFFSET                30
#define DxF0xE4_xA4_LcInitSpeedNegInL0sEn_WIDTH                 1
#define DxF0xE4_xA4_LcInitSpeedNegInL0sEn_MASK                  0x40000000
#define DxF0xE4_xA4_LcInitSpeedNegInL1En_OFFSET                 31
#define DxF0xE4_xA4_LcInitSpeedNegInL1En_WIDTH                  1
#define DxF0xE4_xA4_LcInitSpeedNegInL1En_MASK                   0x80000000

/// DxF0xE4_xA4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            LcGen2EnStrap:1 ; ///<
    UINT32                              LcTargetLinkSpeedOverrideEn:1 ; ///<
    UINT32                                LcTargetLinkSpeedOverride:1 ; ///<
    UINT32                                   LcForceEnSwSpeedChange:1 ; ///<
    UINT32                                  LcForceDisSwSpeedChange:1 ; ///<
    UINT32                                   LcForceEnHwSpeedChange:1 ; ///<
    UINT32                                  LcForceDisHwSpeedChange:1 ; ///<
    UINT32                                LcInitiateLinkSpeedChange:1 ; ///<
    UINT32                             LcSpeedChangeAttemptsAllowed:2 ; ///<Determines the number of speed change attempts that are allowed.
    UINT32                               LcSpeedChangeAttemptFailed:1 ; ///<
    UINT32                                        LcCurrentDataRate:1 ; ///<
    UINT32                                           Reserved_17_12:6 ; ///<
    UINT32                                           LcGoToRecovery:1 ; ///<
    UINT32                                                LcNEieSel:1 ; ///<Selects the number of EIE (K28.7) symbols that are sent when exiting L0s at Gen2 speed.
    UINT32                             DontClrTargetSpdChangeStatus:1 ; ///<
    UINT32                                  LcClrFailedSpdChangeCnt:1 ; ///<
    UINT32                                   Lc1orMoreTs2SpeedArcEn:1 ; ///<Rcvr.Cfg to Recovery.Speed if one or more TS2 set is received with the required parameters for a speed change.
    UINT32                                  LcOtherSideEverSentGen2:1 ; ///<
    UINT32                                  LcOtherSideSupportsGen2:1 ; ///<
    UINT32                                        LcAutoRecoveryDis:1 ; ///<
    UINT32                                      LcSpeedChangeStatus:1 ; ///< This bit is set by hardware if LcOtherSideSupportsGen2=1.
    UINT32                                     LcDataRateAdvertised:1 ; ///<
    UINT32                                          LcCheckDataRate:1 ; ///<
    UINT32                              LcMultUpstreamAutoSpdChngEn:1 ; ///<
    UINT32                                    LcInitSpeedNegInL0sEn:1 ; ///<
    UINT32                                     LcInitSpeedNegInL1En:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xA4_STRUCT;

// **** DxF0xE4_xB5 Register Definition ****
// Address
#define DxF0xE4_xB5_ADDRESS                                     0xb5

// Type
#define DxF0xE4_xB5_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xB5_LcSelectDeemphasis_OFFSET                   0
#define DxF0xE4_xB5_LcSelectDeemphasis_WIDTH                    1
#define DxF0xE4_xB5_LcSelectDeemphasis_MASK                     0x1
#define DxF0xE4_xB5_LcSelectDeemphasisCntl_OFFSET               1
#define DxF0xE4_xB5_LcSelectDeemphasisCntl_WIDTH                2
#define DxF0xE4_xB5_LcSelectDeemphasisCntl_MASK                 0x6
#define DxF0xE4_xB5_LcRcvdDeemphasis_OFFSET                     3
#define DxF0xE4_xB5_LcRcvdDeemphasis_WIDTH                      1
#define DxF0xE4_xB5_LcRcvdDeemphasis_MASK                       0x8
#define DxF0xE4_xB5_LcCompToDetect_OFFSET                       4
#define DxF0xE4_xB5_LcCompToDetect_WIDTH                        1
#define DxF0xE4_xB5_LcCompToDetect_MASK                         0x10
#define DxF0xE4_xB5_LcResetTsxCntInRlockEn_OFFSET               5
#define DxF0xE4_xB5_LcResetTsxCntInRlockEn_WIDTH                1
#define DxF0xE4_xB5_LcResetTsxCntInRlockEn_MASK                 0x20
#define DxF0xE4_xB5_LcAutoSpeedChangeAttemptsAllowed_OFFSET     6
#define DxF0xE4_xB5_LcAutoSpeedChangeAttemptsAllowed_WIDTH      2
#define DxF0xE4_xB5_LcAutoSpeedChangeAttemptsAllowed_MASK       0xc0
#define DxF0xE4_xB5_LcAutoSpeedChangeAttemptFailed_OFFSET       8
#define DxF0xE4_xB5_LcAutoSpeedChangeAttemptFailed_WIDTH        1
#define DxF0xE4_xB5_LcAutoSpeedChangeAttemptFailed_MASK         0x100
#define DxF0xE4_xB5_LcClrFailedAutoSpdChangeCnt_OFFSET          9
#define DxF0xE4_xB5_LcClrFailedAutoSpdChangeCnt_WIDTH           1
#define DxF0xE4_xB5_LcClrFailedAutoSpdChangeCnt_MASK            0x200
#define DxF0xE4_xB5_LcEnhancedHotPlugEn_OFFSET                  10
#define DxF0xE4_xB5_LcEnhancedHotPlugEn_WIDTH                   1
#define DxF0xE4_xB5_LcEnhancedHotPlugEn_MASK                    0x400
#define DxF0xE4_xB5_LcRcvrDetEnOverride_OFFSET                  11
#define DxF0xE4_xB5_LcRcvrDetEnOverride_WIDTH                   1
#define DxF0xE4_xB5_LcRcvrDetEnOverride_MASK                    0x800
#define DxF0xE4_xB5_LcEhpRxPhyCmd_OFFSET                        12
#define DxF0xE4_xB5_LcEhpRxPhyCmd_WIDTH                         2
#define DxF0xE4_xB5_LcEhpRxPhyCmd_MASK                          0x3000
#define DxF0xE4_xB5_LcEhpTxPhyCmd_OFFSET                        14
#define DxF0xE4_xB5_LcEhpTxPhyCmd_WIDTH                         2
#define DxF0xE4_xB5_LcEhpTxPhyCmd_MASK                          0xc000
#define DxF0xE4_xB5_LcChipBifUsbIdleEn_OFFSET                   16
#define DxF0xE4_xB5_LcChipBifUsbIdleEn_WIDTH                    1
#define DxF0xE4_xB5_LcChipBifUsbIdleEn_MASK                     0x10000
#define DxF0xE4_xB5_LcL1BlockReconfigEn_OFFSET                  17
#define DxF0xE4_xB5_LcL1BlockReconfigEn_WIDTH                   1
#define DxF0xE4_xB5_LcL1BlockReconfigEn_MASK                    0x20000
#define DxF0xE4_xB5_LcAutoDisableGen2En_OFFSET                  18
#define DxF0xE4_xB5_LcAutoDisableGen2En_WIDTH                   1
#define DxF0xE4_xB5_LcAutoDisableGen2En_MASK                    0x40000
#define DxF0xE4_xB5_LcAutoDisableGen2MaxFailSel_OFFSET          19
#define DxF0xE4_xB5_LcAutoDisableGen2MaxFailSel_WIDTH           2
#define DxF0xE4_xB5_LcAutoDisableGen2MaxFailSel_MASK            0x180000
#define DxF0xE4_xB5_LcFastL1EntryExitEn_OFFSET                  21
#define DxF0xE4_xB5_LcFastL1EntryExitEn_WIDTH                   1
#define DxF0xE4_xB5_LcFastL1EntryExitEn_MASK                    0x200000
#define DxF0xE4_xB5_LcRxPhyCmdInactiveEnMode_OFFSET             22
#define DxF0xE4_xB5_LcRxPhyCmdInactiveEnMode_WIDTH              1
#define DxF0xE4_xB5_LcRxPhyCmdInactiveEnMode_MASK               0x400000
#define DxF0xE4_xB5_Reserved_31_23_OFFSET                       23
#define DxF0xE4_xB5_Reserved_31_23_WIDTH                        9
#define DxF0xE4_xB5_Reserved_31_23_MASK                         0xff800000

/// DxF0xE4_xB5
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       LcSelectDeemphasis:1 ; ///<Specifies the downstream de-emphasis.5 dB.
    UINT32                                   LcSelectDeemphasisCntl:2 ; ///<Specifies the de-emphasis used by the transmitter.
    UINT32                                         LcRcvdDeemphasis:1 ; ///<De-emphasis advertised by the downstream device.5 dB.
    UINT32                                           LcCompToDetect:1 ; ///<Compliance to Detect if sending out modified compliance pattern due to receipt of TS1s.
    UINT32                                   LcResetTsxCntInRlockEn:1 ; ///<RcvrLock.
    UINT32                         LcAutoSpeedChangeAttemptsAllowed:2 ; ///<Specifies the number of autonomous speed change attempts are allowed.
    UINT32                           LcAutoSpeedChangeAttemptFailed:1 ; ///< No more autonomous speed change attempts are initiated until this bit is cleared.
    UINT32                              LcClrFailedAutoSpdChangeCnt:1 ; ///<
    UINT32                                      LcEnhancedHotPlugEn:1 ; ///<
    UINT32                                      LcRcvrDetEnOverride:1 ; ///<
    UINT32                                            LcEhpRxPhyCmd:2 ; ///<
    UINT32                                            LcEhpTxPhyCmd:2 ; ///<
    UINT32                                       LcChipBifUsbIdleEn:1 ; ///< Not used in the NB architecture.
    UINT32                                      LcL1BlockReconfigEn:1 ; ///<
    UINT32                                      LcAutoDisableGen2En:1 ; ///<
    UINT32                              LcAutoDisableGen2MaxFailSel:2 ; ///<Specifies the number of training failures before disabling GEN2 support if LcAutoDisableGen2En=1.
    UINT32                                      LcFastL1EntryExitEn:1 ; ///<1=Enables transitioning from L1 Entry to L1 Idle after the AUX_COUNT has expired
    UINT32                                 LcRxPhyCmdInactiveEnMode:1 ; ///<
    UINT32                                           Reserved_31_23:9 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xB5_STRUCT;

// **** DxF0xE4_xC0 Register Definition ****
// Address
#define DxF0xE4_xC0_ADDRESS                                     0xc0

// Type
#define DxF0xE4_xC0_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xC0_StrapFTSyTSxCount_OFFSET                    0
#define DxF0xE4_xC0_StrapFTSyTSxCount_WIDTH                     2
#define DxF0xE4_xC0_StrapFTSyTSxCount_MASK                      0x3
#define DxF0xE4_xC0_StrapLongyTSxCount_OFFSET                   2
#define DxF0xE4_xC0_StrapLongyTSxCount_WIDTH                    2
#define DxF0xE4_xC0_StrapLongyTSxCount_MASK                     0xc
#define DxF0xE4_xC0_StrapMedyTSxCount_OFFSET                    4
#define DxF0xE4_xC0_StrapMedyTSxCount_WIDTH                     2
#define DxF0xE4_xC0_StrapMedyTSxCount_MASK                      0x30
#define DxF0xE4_xC0_StrapShortyTSxCount_OFFSET                  6
#define DxF0xE4_xC0_StrapShortyTSxCount_WIDTH                   2
#define DxF0xE4_xC0_StrapShortyTSxCount_MASK                    0xc0
#define DxF0xE4_xC0_StrapSkipInterval_OFFSET                    8
#define DxF0xE4_xC0_StrapSkipInterval_WIDTH                     3
#define DxF0xE4_xC0_StrapSkipInterval_MASK                      0x700
#define DxF0xE4_xC0_StrapBypassRcvrDet_OFFSET                   11
#define DxF0xE4_xC0_StrapBypassRcvrDet_WIDTH                    1
#define DxF0xE4_xC0_StrapBypassRcvrDet_MASK                     0x800
#define DxF0xE4_xC0_StrapComplianceDis_OFFSET                   12
#define DxF0xE4_xC0_StrapComplianceDis_WIDTH                    1
#define DxF0xE4_xC0_StrapComplianceDis_MASK                     0x1000
#define DxF0xE4_xC0_StrapForceCompliance_OFFSET                 13
#define DxF0xE4_xC0_StrapForceCompliance_WIDTH                  1
#define DxF0xE4_xC0_StrapForceCompliance_MASK                   0x2000
#define DxF0xE4_xC0_StrapReverseLcLanes_OFFSET                  14
#define DxF0xE4_xC0_StrapReverseLcLanes_WIDTH                   1
#define DxF0xE4_xC0_StrapReverseLcLanes_MASK                    0x4000
#define DxF0xE4_xC0_StrapAutoRcSpeedNegotiationDis_OFFSET       15
#define DxF0xE4_xC0_StrapAutoRcSpeedNegotiationDis_WIDTH        1
#define DxF0xE4_xC0_StrapAutoRcSpeedNegotiationDis_MASK         0x8000
#define DxF0xE4_xC0_StrapLaneNegotiation_OFFSET                 16
#define DxF0xE4_xC0_StrapLaneNegotiation_WIDTH                  3
#define DxF0xE4_xC0_StrapLaneNegotiation_MASK                   0x70000
#define DxF0xE4_xC0_Reserved_31_19_OFFSET                       19
#define DxF0xE4_xC0_Reserved_31_19_WIDTH                        13
#define DxF0xE4_xC0_Reserved_31_19_MASK                         0xfff80000

/// DxF0xE4_xC0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        StrapFTSyTSxCount:2 ; ///<
    UINT32                                       StrapLongyTSxCount:2 ; ///<
    UINT32                                        StrapMedyTSxCount:2 ; ///<
    UINT32                                      StrapShortyTSxCount:2 ; ///<
    UINT32                                        StrapSkipInterval:3 ; ///<
    UINT32                                       StrapBypassRcvrDet:1 ; ///<
    UINT32                                       StrapComplianceDis:1 ; ///<
    UINT32                                     StrapForceCompliance:1 ; ///<
    UINT32                                      StrapReverseLcLanes:1 ; ///<
    UINT32                           StrapAutoRcSpeedNegotiationDis:1 ; ///<TT #OBS200776.
    UINT32                                     StrapLaneNegotiation:3 ; ///<
    UINT32                                           Reserved_31_19:13; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xC0_STRUCT;

// **** DxF0xE4_xC1 Register Definition ****
// Address
#define DxF0xE4_xC1_ADDRESS                                     0xc1

// Type
#define DxF0xE4_xC1_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xC1_StrapExitLatency_OFFSET                     0
#define DxF0xE4_xC1_StrapExitLatency_WIDTH                      4
#define DxF0xE4_xC1_StrapExitLatency_MASK                       0xf
#define DxF0xE4_xC1_StrapReverseLanes_OFFSET                    4
#define DxF0xE4_xC1_StrapReverseLanes_WIDTH                     1
#define DxF0xE4_xC1_StrapReverseLanes_MASK                      0x10
#define DxF0xE4_xC1_Reserved_31_5_OFFSET                        5
#define DxF0xE4_xC1_Reserved_31_5_WIDTH                         27
#define DxF0xE4_xC1_Reserved_31_5_MASK                          0xffffffe0

/// DxF0xE4_xC1
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         StrapExitLatency:4 ; ///<
    UINT32                                        StrapReverseLanes:1 ; ///<
    UINT32                                            Reserved_31_5:27; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xC1_STRUCT;

// **** SMUx0B_x8600 Register Definition ****
// Address
#define SMUx0B_x8600_ADDRESS                                    0x8600

// Type
#define SMUx0B_x8600_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8600_Txn1MBusAddr_7_0__OFFSET                   0
#define SMUx0B_x8600_Txn1MBusAddr_7_0__WIDTH                    8
#define SMUx0B_x8600_Txn1MBusAddr_7_0__MASK                     0xff
#define SMUx0B_x8600_MemAddr_7_0__OFFSET                        8
#define SMUx0B_x8600_MemAddr_7_0__WIDTH                         8
#define SMUx0B_x8600_MemAddr_7_0__MASK                          0xff00
#define SMUx0B_x8600_MemAddr_15_8__OFFSET                       16
#define SMUx0B_x8600_MemAddr_15_8__WIDTH                        8
#define SMUx0B_x8600_MemAddr_15_8__MASK                         0xff0000
#define SMUx0B_x8600_TransactionCount_OFFSET                    24
#define SMUx0B_x8600_TransactionCount_WIDTH                     8
#define SMUx0B_x8600_TransactionCount_MASK                      0xff000000

/// SMUx0B_x8600
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        Txn1MBusAddr_7_0_:8 ; ///<
    UINT32                                             MemAddr_7_0_:8 ; ///<
    UINT32                                            MemAddr_15_8_:8 ; ///<
    UINT32                                         TransactionCount:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8600_STRUCT;

// **** SMUx0B_x8604 Register Definition ****
// Address
#define SMUx0B_x8604_ADDRESS                                    0x8604

// Type
#define SMUx0B_x8604_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8604_Txn1TransferLength_7_0__OFFSET             0
#define SMUx0B_x8604_Txn1TransferLength_7_0__WIDTH              8
#define SMUx0B_x8604_Txn1TransferLength_7_0__MASK               0xff
#define SMUx0B_x8604_Txn1MBusAddr_31_24__OFFSET                 8
#define SMUx0B_x8604_Txn1MBusAddr_31_24__WIDTH                  8
#define SMUx0B_x8604_Txn1MBusAddr_31_24__MASK                   0xff00
#define SMUx0B_x8604_Txn1MBusAddr_23_16__OFFSET                 16
#define SMUx0B_x8604_Txn1MBusAddr_23_16__WIDTH                  8
#define SMUx0B_x8604_Txn1MBusAddr_23_16__MASK                   0xff0000
#define SMUx0B_x8604_Txn1MBusAddr_15_8__OFFSET                  24
#define SMUx0B_x8604_Txn1MBusAddr_15_8__WIDTH                   8
#define SMUx0B_x8604_Txn1MBusAddr_15_8__MASK                    0xff000000

/// SMUx0B_x8604
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                  Txn1TransferLength_7_0_:8 ; ///<
    UINT32                                      Txn1MBusAddr_31_24_:8 ; ///<
    UINT32                                      Txn1MBusAddr_23_16_:8 ; ///<
    UINT32                                       Txn1MBusAddr_15_8_:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8604_STRUCT;

// **** SMUx0B_x8608 Register Definition ****
// Address
#define SMUx0B_x8608_ADDRESS                                    0x8608

// Type
#define SMUx0B_x8608_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8608_Txn2Mbusaddr158_OFFSET                     0
#define SMUx0B_x8608_Txn2Mbusaddr158_WIDTH                      8
#define SMUx0B_x8608_Txn2Mbusaddr158_MASK                       0xff
#define SMUx0B_x8608_Txn2Mbusaddr70_OFFSET                      8
#define SMUx0B_x8608_Txn2Mbusaddr70_WIDTH                       8
#define SMUx0B_x8608_Txn2Mbusaddr70_MASK                        0xff00
#define SMUx0B_x8608_Txn1Mode_OFFSET                            16
#define SMUx0B_x8608_Txn1Mode_WIDTH                             2
#define SMUx0B_x8608_Txn1Mode_MASK                              0x30000
#define SMUx0B_x8608_Txn1Static_OFFSET                          18
#define SMUx0B_x8608_Txn1Static_WIDTH                           1
#define SMUx0B_x8608_Txn1Static_MASK                            0x40000
#define SMUx0B_x8608_Txn1Overlap_OFFSET                         19
#define SMUx0B_x8608_Txn1Overlap_WIDTH                          1
#define SMUx0B_x8608_Txn1Overlap_MASK                           0x80000
#define SMUx0B_x8608_Txn1Spare_OFFSET                           20
#define SMUx0B_x8608_Txn1Spare_WIDTH                            4
#define SMUx0B_x8608_Txn1Spare_MASK                             0xf00000
#define SMUx0B_x8608_Txn1TransferLength_13_8__OFFSET            24
#define SMUx0B_x8608_Txn1TransferLength_13_8__WIDTH             6
#define SMUx0B_x8608_Txn1TransferLength_13_8__MASK              0x3f000000
#define SMUx0B_x8608_Txn1Tsize_OFFSET                           30
#define SMUx0B_x8608_Txn1Tsize_WIDTH                            2
#define SMUx0B_x8608_Txn1Tsize_MASK                             0xc0000000

/// SMUx0B_x8608
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          Txn2Mbusaddr158:8 ; ///<
    UINT32                                           Txn2Mbusaddr70:8 ; ///<
    UINT32                                                 Txn1Mode:2 ; ///<
    UINT32                                               Txn1Static:1 ; ///<
    UINT32                                              Txn1Overlap:1 ; ///<
    UINT32                                                Txn1Spare:4 ; ///<
    UINT32                                 Txn1TransferLength_13_8_:6 ; ///<
    UINT32                                                Txn1Tsize:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8608_STRUCT;

// **** SMUx0B_x860C Register Definition ****
// Address
#define SMUx0B_x860C_ADDRESS                                    0x860c

// Type
#define SMUx0B_x860C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x860C_Txn2TransferLength138_OFFSET               0
#define SMUx0B_x860C_Txn2TransferLength138_WIDTH                6
#define SMUx0B_x860C_Txn2TransferLength138_MASK                 0x3f
#define SMUx0B_x860C_Txn2Tsize_OFFSET                           6
#define SMUx0B_x860C_Txn2Tsize_WIDTH                            2
#define SMUx0B_x860C_Txn2Tsize_MASK                             0xc0
#define SMUx0B_x860C_Txn2TransferLength70_OFFSET                8
#define SMUx0B_x860C_Txn2TransferLength70_WIDTH                 8
#define SMUx0B_x860C_Txn2TransferLength70_MASK                  0xff00
#define SMUx0B_x860C_Txn2MBusAddr3124_OFFSET                    16
#define SMUx0B_x860C_Txn2MBusAddr3124_WIDTH                     8
#define SMUx0B_x860C_Txn2MBusAddr3124_MASK                      0xff0000
#define SMUx0B_x860C_Txn2MBusAddr2316_OFFSET                    24
#define SMUx0B_x860C_Txn2MBusAddr2316_WIDTH                     8
#define SMUx0B_x860C_Txn2MBusAddr2316_MASK                      0xff000000

/// SMUx0B_x860C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                    Txn2TransferLength138:6 ; ///<
    UINT32                                                Txn2Tsize:2 ; ///<
    UINT32                                     Txn2TransferLength70:8 ; ///<
    UINT32                                         Txn2MBusAddr3124:8 ; ///<
    UINT32                                         Txn2MBusAddr2316:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x860C_STRUCT;

// **** SMUx0B_x8610 Register Definition ****
// Address
#define SMUx0B_x8610_ADDRESS                                    0x8610

// Type
#define SMUx0B_x8610_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8610_Txn3MBusAddr2316_OFFSET                    0
#define SMUx0B_x8610_Txn3MBusAddr2316_WIDTH                     8
#define SMUx0B_x8610_Txn3MBusAddr2316_MASK                      0xff
#define SMUx0B_x8610_Txn3MBusAddr158_OFFSET                     8
#define SMUx0B_x8610_Txn3MBusAddr158_WIDTH                      8
#define SMUx0B_x8610_Txn3MBusAddr158_MASK                       0xff00
#define SMUx0B_x8610_Txn3MBusAddr70_OFFSET                      16
#define SMUx0B_x8610_Txn3MBusAddr70_WIDTH                       8
#define SMUx0B_x8610_Txn3MBusAddr70_MASK                        0xff0000
#define SMUx0B_x8610_Txn2Mode_OFFSET                            24
#define SMUx0B_x8610_Txn2Mode_WIDTH                             2
#define SMUx0B_x8610_Txn2Mode_MASK                              0x3000000
#define SMUx0B_x8610_Txn2Static_OFFSET                          26
#define SMUx0B_x8610_Txn2Static_WIDTH                           1
#define SMUx0B_x8610_Txn2Static_MASK                            0x4000000
#define SMUx0B_x8610_Txn2Overlap_OFFSET                         27
#define SMUx0B_x8610_Txn2Overlap_WIDTH                          1
#define SMUx0B_x8610_Txn2Overlap_MASK                           0x8000000
#define SMUx0B_x8610_Txn2Spare_OFFSET                           28
#define SMUx0B_x8610_Txn2Spare_WIDTH                            4
#define SMUx0B_x8610_Txn2Spare_MASK                             0xf0000000

/// SMUx0B_x8610
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         Txn3MBusAddr2316:8 ; ///<
    UINT32                                          Txn3MBusAddr158:8 ; ///<
    UINT32                                           Txn3MBusAddr70:8 ; ///<
    UINT32                                                 Txn2Mode:2 ; ///<
    UINT32                                               Txn2Static:1 ; ///<
    UINT32                                              Txn2Overlap:1 ; ///<
    UINT32                                                Txn2Spare:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8610_STRUCT;

// **** SMUx0B_x8614 Register Definition ****
// Address
#define SMUx0B_x8614_ADDRESS                                    0x8614

// Type
#define SMUx0B_x8614_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8614_Txn3Mode_OFFSET                            0
#define SMUx0B_x8614_Txn3Mode_WIDTH                             2
#define SMUx0B_x8614_Txn3Mode_MASK                              0x3
#define SMUx0B_x8614_Txn3Static_OFFSET                          2
#define SMUx0B_x8614_Txn3Static_WIDTH                           1
#define SMUx0B_x8614_Txn3Static_MASK                            0x4
#define SMUx0B_x8614_Txn3Overlap_OFFSET                         3
#define SMUx0B_x8614_Txn3Overlap_WIDTH                          1
#define SMUx0B_x8614_Txn3Overlap_MASK                           0x8
#define SMUx0B_x8614_Txn3Spare_OFFSET                           4
#define SMUx0B_x8614_Txn3Spare_WIDTH                            4
#define SMUx0B_x8614_Txn3Spare_MASK                             0xf0
#define SMUx0B_x8614_Txn3TransferLength138_OFFSET               8
#define SMUx0B_x8614_Txn3TransferLength138_WIDTH                6
#define SMUx0B_x8614_Txn3TransferLength138_MASK                 0x3f00
#define SMUx0B_x8614_Txn3Tsize_OFFSET                           14
#define SMUx0B_x8614_Txn3Tsize_WIDTH                            2
#define SMUx0B_x8614_Txn3Tsize_MASK                             0xc000
#define SMUx0B_x8614_Txn3TransferLength70_OFFSET                16
#define SMUx0B_x8614_Txn3TransferLength70_WIDTH                 8
#define SMUx0B_x8614_Txn3TransferLength70_MASK                  0xff0000
#define SMUx0B_x8614_Txn3MBusAddr3124_OFFSET                    24
#define SMUx0B_x8614_Txn3MBusAddr3124_WIDTH                     8
#define SMUx0B_x8614_Txn3MBusAddr3124_MASK                      0xff000000

/// SMUx0B_x8614
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 Txn3Mode:2 ; ///<
    UINT32                                               Txn3Static:1 ; ///<
    UINT32                                              Txn3Overlap:1 ; ///<
    UINT32                                                Txn3Spare:4 ; ///<
    UINT32                                    Txn3TransferLength138:6 ; ///<
    UINT32                                                Txn3Tsize:2 ; ///<
    UINT32                                     Txn3TransferLength70:8 ; ///<
    UINT32                                         Txn3MBusAddr3124:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8614_STRUCT;

// **** SMUx0B_x8618 Register Definition ****
// Address
#define SMUx0B_x8618_ADDRESS                                    0x8618

// Type
#define SMUx0B_x8618_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8618_Txn4MBusAddr3124_OFFSET                    0
#define SMUx0B_x8618_Txn4MBusAddr3124_WIDTH                     8
#define SMUx0B_x8618_Txn4MBusAddr3124_MASK                      0xff
#define SMUx0B_x8618_Txn4MBusAddr2316_OFFSET                    8
#define SMUx0B_x8618_Txn4MBusAddr2316_WIDTH                     8
#define SMUx0B_x8618_Txn4MBusAddr2316_MASK                      0xff00
#define SMUx0B_x8618_Txn4MBusAddr158_OFFSET                     16
#define SMUx0B_x8618_Txn4MBusAddr158_WIDTH                      8
#define SMUx0B_x8618_Txn4MBusAddr158_MASK                       0xff0000
#define SMUx0B_x8618_Txn4MBusAddr70_OFFSET                      24
#define SMUx0B_x8618_Txn4MBusAddr70_WIDTH                       8
#define SMUx0B_x8618_Txn4MBusAddr70_MASK                        0xff000000

/// SMUx0B_x8618
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         Txn4MBusAddr3124:8 ; ///<
    UINT32                                         Txn4MBusAddr2316:8 ; ///<
    UINT32                                          Txn4MBusAddr158:8 ; ///<
    UINT32                                           Txn4MBusAddr70:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8618_STRUCT;

// **** SMUx0B_x861C Register Definition ****
// Address
#define SMUx0B_x861C_ADDRESS                                    0x861c

// Type
#define SMUx0B_x861C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x861C_Txn5Mbusaddr70_OFFSET                      0
#define SMUx0B_x861C_Txn5Mbusaddr70_WIDTH                       8
#define SMUx0B_x861C_Txn5Mbusaddr70_MASK                        0xff
#define SMUx0B_x861C_Txn4Mode_OFFSET                            8
#define SMUx0B_x861C_Txn4Mode_WIDTH                             2
#define SMUx0B_x861C_Txn4Mode_MASK                              0x300
#define SMUx0B_x861C_Txn4Static_OFFSET                          10
#define SMUx0B_x861C_Txn4Static_WIDTH                           1
#define SMUx0B_x861C_Txn4Static_MASK                            0x400
#define SMUx0B_x861C_Txn4Overlap_OFFSET                         11
#define SMUx0B_x861C_Txn4Overlap_WIDTH                          1
#define SMUx0B_x861C_Txn4Overlap_MASK                           0x800
#define SMUx0B_x861C_Txn4Spare_OFFSET                           12
#define SMUx0B_x861C_Txn4Spare_WIDTH                            4
#define SMUx0B_x861C_Txn4Spare_MASK                             0xf000
#define SMUx0B_x861C_Txn4TransferLength138_OFFSET               16
#define SMUx0B_x861C_Txn4TransferLength138_WIDTH                6
#define SMUx0B_x861C_Txn4TransferLength138_MASK                 0x3f0000
#define SMUx0B_x861C_Txn4Tsize_OFFSET                           22
#define SMUx0B_x861C_Txn4Tsize_WIDTH                            2
#define SMUx0B_x861C_Txn4Tsize_MASK                             0xc00000
#define SMUx0B_x861C_Txn4TransferLength70_OFFSET                24
#define SMUx0B_x861C_Txn4TransferLength70_WIDTH                 8
#define SMUx0B_x861C_Txn4TransferLength70_MASK                  0xff000000

/// SMUx0B_x861C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           Txn5Mbusaddr70:8 ; ///<
    UINT32                                                 Txn4Mode:2 ; ///<
    UINT32                                               Txn4Static:1 ; ///<
    UINT32                                              Txn4Overlap:1 ; ///<
    UINT32                                                Txn4Spare:4 ; ///<
    UINT32                                    Txn4TransferLength138:6 ; ///<
    UINT32                                                Txn4Tsize:2 ; ///<
    UINT32                                     Txn4TransferLength70:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x861C_STRUCT;

// **** SMUx0B_x8620 Register Definition ****
// Address
#define SMUx0B_x8620_ADDRESS                                    0x8620

// Type
#define SMUx0B_x8620_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8620_Txn5TransferLength70_OFFSET                0
#define SMUx0B_x8620_Txn5TransferLength70_WIDTH                 8
#define SMUx0B_x8620_Txn5TransferLength70_MASK                  0xff
#define SMUx0B_x8620_Txn5MBusAddr3124_OFFSET                    8
#define SMUx0B_x8620_Txn5MBusAddr3124_WIDTH                     8
#define SMUx0B_x8620_Txn5MBusAddr3124_MASK                      0xff00
#define SMUx0B_x8620_Txn5MBusAddr2316_OFFSET                    16
#define SMUx0B_x8620_Txn5MBusAddr2316_WIDTH                     8
#define SMUx0B_x8620_Txn5MBusAddr2316_MASK                      0xff0000
#define SMUx0B_x8620_Txn5MBusAddr158_OFFSET                     24
#define SMUx0B_x8620_Txn5MBusAddr158_WIDTH                      8
#define SMUx0B_x8620_Txn5MBusAddr158_MASK                       0xff000000

/// SMUx0B_x8620
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                     Txn5TransferLength70:8 ; ///<
    UINT32                                         Txn5MBusAddr3124:8 ; ///<
    UINT32                                         Txn5MBusAddr2316:8 ; ///<
    UINT32                                          Txn5MBusAddr158:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8620_STRUCT;

// **** SMUx0B_x8624 Register Definition ****
// Address
#define SMUx0B_x8624_ADDRESS                                    0x8624

// Type
#define SMUx0B_x8624_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8624_Txn6MBusAddr158_OFFSET                     0
#define SMUx0B_x8624_Txn6MBusAddr158_WIDTH                      8
#define SMUx0B_x8624_Txn6MBusAddr158_MASK                       0xff
#define SMUx0B_x8624_Txn6MBusAddr70_OFFSET                      8
#define SMUx0B_x8624_Txn6MBusAddr70_WIDTH                       8
#define SMUx0B_x8624_Txn6MBusAddr70_MASK                        0xff00
#define SMUx0B_x8624_Txn5Mode_OFFSET                            16
#define SMUx0B_x8624_Txn5Mode_WIDTH                             2
#define SMUx0B_x8624_Txn5Mode_MASK                              0x30000
#define SMUx0B_x8624_Txn5Static_OFFSET                          18
#define SMUx0B_x8624_Txn5Static_WIDTH                           1
#define SMUx0B_x8624_Txn5Static_MASK                            0x40000
#define SMUx0B_x8624_Txn5Overlap_OFFSET                         19
#define SMUx0B_x8624_Txn5Overlap_WIDTH                          1
#define SMUx0B_x8624_Txn5Overlap_MASK                           0x80000
#define SMUx0B_x8624_Txn5Spare_OFFSET                           20
#define SMUx0B_x8624_Txn5Spare_WIDTH                            4
#define SMUx0B_x8624_Txn5Spare_MASK                             0xf00000
#define SMUx0B_x8624_Txn5TransferLength138_OFFSET               24
#define SMUx0B_x8624_Txn5TransferLength138_WIDTH                6
#define SMUx0B_x8624_Txn5TransferLength138_MASK                 0x3f000000
#define SMUx0B_x8624_Txn5Tsize_OFFSET                           30
#define SMUx0B_x8624_Txn5Tsize_WIDTH                            2
#define SMUx0B_x8624_Txn5Tsize_MASK                             0xc0000000

/// SMUx0B_x8624
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          Txn6MBusAddr158:8 ; ///<
    UINT32                                           Txn6MBusAddr70:8 ; ///<
    UINT32                                                 Txn5Mode:2 ; ///<
    UINT32                                               Txn5Static:1 ; ///<
    UINT32                                              Txn5Overlap:1 ; ///<
    UINT32                                                Txn5Spare:4 ; ///<
    UINT32                                    Txn5TransferLength138:6 ; ///<
    UINT32                                                Txn5Tsize:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8624_STRUCT;

// **** SMUx0B_x8628 Register Definition ****
// Address
#define SMUx0B_x8628_ADDRESS                                    0x8628

// Type
#define SMUx0B_x8628_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8628_Txn6TransferLength138_OFFSET               0
#define SMUx0B_x8628_Txn6TransferLength138_WIDTH                6
#define SMUx0B_x8628_Txn6TransferLength138_MASK                 0x3f
#define SMUx0B_x8628_Txn6Tsize_OFFSET                           6
#define SMUx0B_x8628_Txn6Tsize_WIDTH                            2
#define SMUx0B_x8628_Txn6Tsize_MASK                             0xc0
#define SMUx0B_x8628_Txn6TransferLength70_OFFSET                8
#define SMUx0B_x8628_Txn6TransferLength70_WIDTH                 8
#define SMUx0B_x8628_Txn6TransferLength70_MASK                  0xff00
#define SMUx0B_x8628_Txn6MBusAddr3124_OFFSET                    16
#define SMUx0B_x8628_Txn6MBusAddr3124_WIDTH                     8
#define SMUx0B_x8628_Txn6MBusAddr3124_MASK                      0xff0000
#define SMUx0B_x8628_Txn6MBusAddr2316_OFFSET                    24
#define SMUx0B_x8628_Txn6MBusAddr2316_WIDTH                     8
#define SMUx0B_x8628_Txn6MBusAddr2316_MASK                      0xff000000

/// SMUx0B_x8628
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                    Txn6TransferLength138:6 ; ///<
    UINT32                                                Txn6Tsize:2 ; ///<
    UINT32                                     Txn6TransferLength70:8 ; ///<
    UINT32                                         Txn6MBusAddr3124:8 ; ///<
    UINT32                                         Txn6MBusAddr2316:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8628_STRUCT;

// **** SMUx0B_x862C Register Definition ****
// Address
#define SMUx0B_x862C_ADDRESS                                    0x862c

// Type
#define SMUx0B_x862C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x862C_Txn7MBusAddr2316_OFFSET                    0
#define SMUx0B_x862C_Txn7MBusAddr2316_WIDTH                     8
#define SMUx0B_x862C_Txn7MBusAddr2316_MASK                      0xff
#define SMUx0B_x862C_Txn7MBusAddr158_OFFSET                     8
#define SMUx0B_x862C_Txn7MBusAddr158_WIDTH                      8
#define SMUx0B_x862C_Txn7MBusAddr158_MASK                       0xff00
#define SMUx0B_x862C_Txn7MBusAddr70_OFFSET                      16
#define SMUx0B_x862C_Txn7MBusAddr70_WIDTH                       8
#define SMUx0B_x862C_Txn7MBusAddr70_MASK                        0xff0000
#define SMUx0B_x862C_Txn6Mode_OFFSET                            24
#define SMUx0B_x862C_Txn6Mode_WIDTH                             2
#define SMUx0B_x862C_Txn6Mode_MASK                              0x3000000
#define SMUx0B_x862C_Txn6Static_OFFSET                          26
#define SMUx0B_x862C_Txn6Static_WIDTH                           1
#define SMUx0B_x862C_Txn6Static_MASK                            0x4000000
#define SMUx0B_x862C_Txn6Overlap_OFFSET                         27
#define SMUx0B_x862C_Txn6Overlap_WIDTH                          1
#define SMUx0B_x862C_Txn6Overlap_MASK                           0x8000000
#define SMUx0B_x862C_Txn6Spare_OFFSET                           28
#define SMUx0B_x862C_Txn6Spare_WIDTH                            4
#define SMUx0B_x862C_Txn6Spare_MASK                             0xf0000000

/// SMUx0B_x862C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         Txn7MBusAddr2316:8 ; ///<
    UINT32                                          Txn7MBusAddr158:8 ; ///<
    UINT32                                           Txn7MBusAddr70:8 ; ///<
    UINT32                                                 Txn6Mode:2 ; ///<
    UINT32                                               Txn6Static:1 ; ///<
    UINT32                                              Txn6Overlap:1 ; ///<
    UINT32                                                Txn6Spare:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x862C_STRUCT;

// **** SMUx0B_x8630 Register Definition ****
// Address
#define SMUx0B_x8630_ADDRESS                                    0x8630

// Type
#define SMUx0B_x8630_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8630_Txn7Mode_OFFSET                            0
#define SMUx0B_x8630_Txn7Mode_WIDTH                             2
#define SMUx0B_x8630_Txn7Mode_MASK                              0x3
#define SMUx0B_x8630_Txn7Static_OFFSET                          2
#define SMUx0B_x8630_Txn7Static_WIDTH                           1
#define SMUx0B_x8630_Txn7Static_MASK                            0x4
#define SMUx0B_x8630_Txn7Overlap_OFFSET                         3
#define SMUx0B_x8630_Txn7Overlap_WIDTH                          1
#define SMUx0B_x8630_Txn7Overlap_MASK                           0x8
#define SMUx0B_x8630_Txn7Spare_OFFSET                           4
#define SMUx0B_x8630_Txn7Spare_WIDTH                            4
#define SMUx0B_x8630_Txn7Spare_MASK                             0xf0
#define SMUx0B_x8630_Txn7TransferLength138_OFFSET               8
#define SMUx0B_x8630_Txn7TransferLength138_WIDTH                6
#define SMUx0B_x8630_Txn7TransferLength138_MASK                 0x3f00
#define SMUx0B_x8630_Txn7Tsize_OFFSET                           14
#define SMUx0B_x8630_Txn7Tsize_WIDTH                            2
#define SMUx0B_x8630_Txn7Tsize_MASK                             0xc000
#define SMUx0B_x8630_Txn7TransferLength70_OFFSET                16
#define SMUx0B_x8630_Txn7TransferLength70_WIDTH                 8
#define SMUx0B_x8630_Txn7TransferLength70_MASK                  0xff0000
#define SMUx0B_x8630_Txn7MBusAddr3124_OFFSET                    24
#define SMUx0B_x8630_Txn7MBusAddr3124_WIDTH                     8
#define SMUx0B_x8630_Txn7MBusAddr3124_MASK                      0xff000000

/// SMUx0B_x8630
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 Txn7Mode:2 ; ///<
    UINT32                                               Txn7Static:1 ; ///<
    UINT32                                              Txn7Overlap:1 ; ///<
    UINT32                                                Txn7Spare:4 ; ///<
    UINT32                                    Txn7TransferLength138:6 ; ///<
    UINT32                                                Txn7Tsize:2 ; ///<
    UINT32                                     Txn7TransferLength70:8 ; ///<
    UINT32                                         Txn7MBusAddr3124:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8630_STRUCT;

// **** SMUx0B_x8634 Register Definition ****
// Address
#define SMUx0B_x8634_ADDRESS                                    0x8634

// Type
#define SMUx0B_x8634_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8634_Txn8MBusAddr3124_OFFSET                    0
#define SMUx0B_x8634_Txn8MBusAddr3124_WIDTH                     8
#define SMUx0B_x8634_Txn8MBusAddr3124_MASK                      0xff
#define SMUx0B_x8634_Txn8MBusAddr2316_OFFSET                    8
#define SMUx0B_x8634_Txn8MBusAddr2316_WIDTH                     8
#define SMUx0B_x8634_Txn8MBusAddr2316_MASK                      0xff00
#define SMUx0B_x8634_Txn8MBusAddr158_OFFSET                     16
#define SMUx0B_x8634_Txn8MBusAddr158_WIDTH                      8
#define SMUx0B_x8634_Txn8MBusAddr158_MASK                       0xff0000
#define SMUx0B_x8634_Txn8MBusAddr70_OFFSET                      24
#define SMUx0B_x8634_Txn8MBusAddr70_WIDTH                       8
#define SMUx0B_x8634_Txn8MBusAddr70_MASK                        0xff000000

/// SMUx0B_x8634
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         Txn8MBusAddr3124:8 ; ///<
    UINT32                                         Txn8MBusAddr2316:8 ; ///<
    UINT32                                          Txn8MBusAddr158:8 ; ///<
    UINT32                                           Txn8MBusAddr70:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8634_STRUCT;

// **** SMUx0B_x8638 Register Definition ****
// Address
#define SMUx0B_x8638_ADDRESS                                    0x8638

// Type
#define SMUx0B_x8638_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8638_Txn9MBusAddr70_OFFSET                      0
#define SMUx0B_x8638_Txn9MBusAddr70_WIDTH                       8
#define SMUx0B_x8638_Txn9MBusAddr70_MASK                        0xff
#define SMUx0B_x8638_Txn8Mode_OFFSET                            8
#define SMUx0B_x8638_Txn8Mode_WIDTH                             2
#define SMUx0B_x8638_Txn8Mode_MASK                              0x300
#define SMUx0B_x8638_Txn8Static_OFFSET                          10
#define SMUx0B_x8638_Txn8Static_WIDTH                           1
#define SMUx0B_x8638_Txn8Static_MASK                            0x400
#define SMUx0B_x8638_Txn8Overlap_OFFSET                         11
#define SMUx0B_x8638_Txn8Overlap_WIDTH                          1
#define SMUx0B_x8638_Txn8Overlap_MASK                           0x800
#define SMUx0B_x8638_Txn8Spare_OFFSET                           12
#define SMUx0B_x8638_Txn8Spare_WIDTH                            4
#define SMUx0B_x8638_Txn8Spare_MASK                             0xf000
#define SMUx0B_x8638_Txn8TransferLength138_OFFSET               16
#define SMUx0B_x8638_Txn8TransferLength138_WIDTH                6
#define SMUx0B_x8638_Txn8TransferLength138_MASK                 0x3f0000
#define SMUx0B_x8638_Txn8Tsize_OFFSET                           22
#define SMUx0B_x8638_Txn8Tsize_WIDTH                            2
#define SMUx0B_x8638_Txn8Tsize_MASK                             0xc00000
#define SMUx0B_x8638_Txn8TransferLength70_OFFSET                24
#define SMUx0B_x8638_Txn8TransferLength70_WIDTH                 8
#define SMUx0B_x8638_Txn8TransferLength70_MASK                  0xff000000

/// SMUx0B_x8638
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           Txn9MBusAddr70:8 ; ///<
    UINT32                                                 Txn8Mode:2 ; ///<
    UINT32                                               Txn8Static:1 ; ///<
    UINT32                                              Txn8Overlap:1 ; ///<
    UINT32                                                Txn8Spare:4 ; ///<
    UINT32                                    Txn8TransferLength138:6 ; ///<
    UINT32                                                Txn8Tsize:2 ; ///<
    UINT32                                     Txn8TransferLength70:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8638_STRUCT;

// **** SMUx0B_x863C Register Definition ****
// Address
#define SMUx0B_x863C_ADDRESS                                    0x863c

// Type
#define SMUx0B_x863C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x863C_Txn9TransferLength70_OFFSET                0
#define SMUx0B_x863C_Txn9TransferLength70_WIDTH                 8
#define SMUx0B_x863C_Txn9TransferLength70_MASK                  0xff
#define SMUx0B_x863C_Txn9MBusAddr3124_OFFSET                    8
#define SMUx0B_x863C_Txn9MBusAddr3124_WIDTH                     8
#define SMUx0B_x863C_Txn9MBusAddr3124_MASK                      0xff00
#define SMUx0B_x863C_Txn9MBuAaddr2316_OFFSET                    16
#define SMUx0B_x863C_Txn9MBuAaddr2316_WIDTH                     8
#define SMUx0B_x863C_Txn9MBuAaddr2316_MASK                      0xff0000
#define SMUx0B_x863C_Txn9MBusAddr158_OFFSET                     24
#define SMUx0B_x863C_Txn9MBusAddr158_WIDTH                      8
#define SMUx0B_x863C_Txn9MBusAddr158_MASK                       0xff000000

/// SMUx0B_x863C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                     Txn9TransferLength70:8 ; ///<
    UINT32                                         Txn9MBusAddr3124:8 ; ///<
    UINT32                                         Txn9MBuAaddr2316:8 ; ///<
    UINT32                                          Txn9MBusAddr158:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x863C_STRUCT;

// **** SMUx0B_x8640 Register Definition ****
// Address
#define SMUx0B_x8640_ADDRESS                                    0x8640

// Type
#define SMUx0B_x8640_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8640_Txn10MBusAddr158_OFFSET                    0
#define SMUx0B_x8640_Txn10MBusAddr158_WIDTH                     8
#define SMUx0B_x8640_Txn10MBusAddr158_MASK                      0xff
#define SMUx0B_x8640_Txn10MBusAddr70_OFFSET                     8
#define SMUx0B_x8640_Txn10MBusAddr70_WIDTH                      8
#define SMUx0B_x8640_Txn10MBusAddr70_MASK                       0xff00
#define SMUx0B_x8640_Txn9Mode_OFFSET                            16
#define SMUx0B_x8640_Txn9Mode_WIDTH                             2
#define SMUx0B_x8640_Txn9Mode_MASK                              0x30000
#define SMUx0B_x8640_Txn9Static_OFFSET                          18
#define SMUx0B_x8640_Txn9Static_WIDTH                           1
#define SMUx0B_x8640_Txn9Static_MASK                            0x40000
#define SMUx0B_x8640_Txn9Overlap_OFFSET                         19
#define SMUx0B_x8640_Txn9Overlap_WIDTH                          1
#define SMUx0B_x8640_Txn9Overlap_MASK                           0x80000
#define SMUx0B_x8640_Txn9Spare_OFFSET                           20
#define SMUx0B_x8640_Txn9Spare_WIDTH                            4
#define SMUx0B_x8640_Txn9Spare_MASK                             0xf00000
#define SMUx0B_x8640_Txn9TransferLength138_OFFSET               24
#define SMUx0B_x8640_Txn9TransferLength138_WIDTH                6
#define SMUx0B_x8640_Txn9TransferLength138_MASK                 0x3f000000
#define SMUx0B_x8640_Txn9Tsize_OFFSET                           30
#define SMUx0B_x8640_Txn9Tsize_WIDTH                            2
#define SMUx0B_x8640_Txn9Tsize_MASK                             0xc0000000

/// SMUx0B_x8640
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         Txn10MBusAddr158:8 ; ///<
    UINT32                                          Txn10MBusAddr70:8 ; ///<
    UINT32                                                 Txn9Mode:2 ; ///<
    UINT32                                               Txn9Static:1 ; ///<
    UINT32                                              Txn9Overlap:1 ; ///<
    UINT32                                                Txn9Spare:4 ; ///<
    UINT32                                    Txn9TransferLength138:6 ; ///<
    UINT32                                                Txn9Tsize:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8640_STRUCT;

// **** SMUx0B_x8654 Register Definition ****
// Address
#define SMUx0B_x8654_ADDRESS                                    0x8654

// Type
#define SMUx0B_x8654_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8654_Data_OFFSET                                0
#define SMUx0B_x8654_Data_WIDTH                                 32
#define SMUx0B_x8654_Data_MASK                                  0xffffffff

/// SMUx0B_x8654
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8654_STRUCT;

// **** SMUx0B_x8658 Register Definition ****
// Address
#define SMUx0B_x8658_ADDRESS                                    0x8658

// Type
#define SMUx0B_x8658_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8658_Data_OFFSET                                0
#define SMUx0B_x8658_Data_WIDTH                                 32
#define SMUx0B_x8658_Data_MASK                                  0xffffffff

/// SMUx0B_x8658
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8658_STRUCT;

// **** SMUx0B_x865C Register Definition ****
// Address
#define SMUx0B_x865C_ADDRESS                                    0x865c

// Type
#define SMUx0B_x865C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x865C_Data_OFFSET                                0
#define SMUx0B_x865C_Data_WIDTH                                 32
#define SMUx0B_x865C_Data_MASK                                  0xffffffff

/// SMUx0B_x865C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x865C_STRUCT;

// **** SMUx0B_x8660 Register Definition ****
// Address
#define SMUx0B_x8660_ADDRESS                                    0x8660

// Type
#define SMUx0B_x8660_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8660_Data_OFFSET                                0
#define SMUx0B_x8660_Data_WIDTH                                 32
#define SMUx0B_x8660_Data_MASK                                  0xffffffff

/// SMUx0B_x8660
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8660_STRUCT;

// **** SMUx0B_x8664 Register Definition ****
// Address
#define SMUx0B_x8664_ADDRESS                                    0x8664

// Type
#define SMUx0B_x8664_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8664_Data_OFFSET                                0
#define SMUx0B_x8664_Data_WIDTH                                 32
#define SMUx0B_x8664_Data_MASK                                  0xffffffff

/// SMUx0B_x8664
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8664_STRUCT;

// **** SMUx0B_x8668 Register Definition ****
// Address
#define SMUx0B_x8668_ADDRESS                                    0x8668

// Type
#define SMUx0B_x8668_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8668_Data_OFFSET                                0
#define SMUx0B_x8668_Data_WIDTH                                 32
#define SMUx0B_x8668_Data_MASK                                  0xffffffff

/// SMUx0B_x8668
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8668_STRUCT;

// **** SMUx0B_x866C Register Definition ****
// Address
#define SMUx0B_x866C_ADDRESS                                    0x866c

// Type
#define SMUx0B_x866C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x866C_Data_OFFSET                                0
#define SMUx0B_x866C_Data_WIDTH                                 32
#define SMUx0B_x866C_Data_MASK                                  0xffffffff

/// SMUx0B_x866C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x866C_STRUCT;

// **** SMUx0B_x8670 Register Definition ****
// Address
#define SMUx0B_x8670_ADDRESS                                    0x8670

// Type
#define SMUx0B_x8670_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8670_Data_OFFSET                                0
#define SMUx0B_x8670_Data_WIDTH                                 32
#define SMUx0B_x8670_Data_MASK                                  0xffffffff

/// SMUx0B_x8670
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8670_STRUCT;

// **** SMUx0B_x8674 Register Definition ****
// Address
#define SMUx0B_x8674_ADDRESS                                    0x8674

// Type
#define SMUx0B_x8674_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8674_Data_OFFSET                                0
#define SMUx0B_x8674_Data_WIDTH                                 32
#define SMUx0B_x8674_Data_MASK                                  0xffffffff

/// SMUx0B_x8674
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8674_STRUCT;

// **** SMUx0B_x8678 Register Definition ****
// Address
#define SMUx0B_x8678_ADDRESS                                    0x8678

// Type
#define SMUx0B_x8678_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8678_Data_OFFSET                                0
#define SMUx0B_x8678_Data_WIDTH                                 32
#define SMUx0B_x8678_Data_MASK                                  0xffffffff

/// SMUx0B_x8678
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8678_STRUCT;

// **** SMUx0B_x867C Register Definition ****
// Address
#define SMUx0B_x867C_ADDRESS                                    0x867c

// Type
#define SMUx0B_x867C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x867C_Data_OFFSET                                0
#define SMUx0B_x867C_Data_WIDTH                                 32
#define SMUx0B_x867C_Data_MASK                                  0xffffffff

/// SMUx0B_x867C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x867C_STRUCT;

// **** SMUx0B_x8680 Register Definition ****
// Address
#define SMUx0B_x8680_ADDRESS                                    0x8680

// Type
#define SMUx0B_x8680_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8680_Data_OFFSET                                0
#define SMUx0B_x8680_Data_WIDTH                                 32
#define SMUx0B_x8680_Data_MASK                                  0xffffffff

/// SMUx0B_x8680
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8680_STRUCT;

// **** SMUx0B_x8684 Register Definition ****
// Address
#define SMUx0B_x8684_ADDRESS                                    0x8684

// Type
#define SMUx0B_x8684_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8684_Data_OFFSET                                0
#define SMUx0B_x8684_Data_WIDTH                                 32
#define SMUx0B_x8684_Data_MASK                                  0xffffffff

/// SMUx0B_x8684
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8684_STRUCT;

// **** SMUx0B_x8688 Register Definition ****
// Address
#define SMUx0B_x8688_ADDRESS                                    0x8688

// Type
#define SMUx0B_x8688_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8688_Data_OFFSET                                0
#define SMUx0B_x8688_Data_WIDTH                                 32
#define SMUx0B_x8688_Data_MASK                                  0xffffffff

/// SMUx0B_x8688
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8688_STRUCT;

// **** SMUx0B_x868C Register Definition ****
// Address
#define SMUx0B_x868C_ADDRESS                                    0x868c

// Type
#define SMUx0B_x868C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x868C_Data_OFFSET                                0
#define SMUx0B_x868C_Data_WIDTH                                 32
#define SMUx0B_x868C_Data_MASK                                  0xffffffff

/// SMUx0B_x868C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x868C_STRUCT;

// **** SMUx0B_x8690 Register Definition ****
// Address
#define SMUx0B_x8690_ADDRESS                                    0x8690

// Type
#define SMUx0B_x8690_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8690_Data_OFFSET                                0
#define SMUx0B_x8690_Data_WIDTH                                 32
#define SMUx0B_x8690_Data_MASK                                  0xffffffff

/// SMUx0B_x8690
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8690_STRUCT;

// **** SMUx0B_x8694 Register Definition ****
// Address
#define SMUx0B_x8694_ADDRESS                                    0x8694

// Type
#define SMUx0B_x8694_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8694_Data_OFFSET                                0
#define SMUx0B_x8694_Data_WIDTH                                 32
#define SMUx0B_x8694_Data_MASK                                  0xffffffff

/// SMUx0B_x8694
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8694_STRUCT;

// **** SMUx0B_x8698 Register Definition ****
// Address
#define SMUx0B_x8698_ADDRESS                                    0x8698

// Type
#define SMUx0B_x8698_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8698_Data_OFFSET                                0
#define SMUx0B_x8698_Data_WIDTH                                 32
#define SMUx0B_x8698_Data_MASK                                  0xffffffff

/// SMUx0B_x8698
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8698_STRUCT;

// **** SMUx0B_x869C Register Definition ****
// Address
#define SMUx0B_x869C_ADDRESS                                    0x869c

// Type
#define SMUx0B_x869C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x869C_Data_OFFSET                                0
#define SMUx0B_x869C_Data_WIDTH                                 32
#define SMUx0B_x869C_Data_MASK                                  0xffffffff

/// SMUx0B_x869C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x869C_STRUCT;

// **** SMUx0B_x86A0 Register Definition ****
// Address
#define SMUx0B_x86A0_ADDRESS                                    0x86a0

// Type
#define SMUx0B_x86A0_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x86A0_Data_OFFSET                                0
#define SMUx0B_x86A0_Data_WIDTH                                 32
#define SMUx0B_x86A0_Data_MASK                                  0xffffffff

/// SMUx0B_x86A0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x86A0_STRUCT;

// **** SMUx03 Register Definition ****
// Address
#define SMUx03_ADDRESS                                          0x3

// Type
#define SMUx03_TYPE                                             TYPE_SMU
// Field Data
#define SMUx03_IntReq_OFFSET                                    0
#define SMUx03_IntReq_WIDTH                                     1
#define SMUx03_IntReq_MASK                                      0x1
#define SMUx03_IntAck_OFFSET                                    1
#define SMUx03_IntAck_WIDTH                                     1
#define SMUx03_IntAck_MASK                                      0x2
#define SMUx03_IntDone_OFFSET                                   2
#define SMUx03_IntDone_WIDTH                                    1
#define SMUx03_IntDone_MASK                                     0x4
#define SMUx03_ServiceIndex_OFFSET                              3
#define SMUx03_ServiceIndex_WIDTH                               8
#define SMUx03_ServiceIndex_MASK                                0x7f8
#define SMUx03_Reserved_31_11_OFFSET                            11
#define SMUx03_Reserved_31_11_WIDTH                             21
#define SMUx03_Reserved_31_11_MASK                              0xfffff800

/// SMUx03
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   IntReq:1 ; ///<When software sets this field to 1, an interrupt is triggered to the microcontroller. No additional software interrupts can be triggered until SMUx03[IntDone]==1. Software must clear this field to 0 before setting it to 1. See 2.13.1.4 [Software Interrupts].
    UINT32                                                   IntAck:1 ; ///<Specifies whether the interrupt has been acknowledged by the microcontroller. This field is cleared by hardware when software requests an interrupt by writing to SMUx03[IntReq]. See 2.13.1.4 [Software Interrupts].
    UINT32                                                  IntDone:1 ; ///<Specifies whether the interrupt requested by writing SMUx03[IntReq] has completed. This field is cleared by hardware when software requests an interrupt by writing to SMUx03[IntReq]. See 2.13.1.4 [Software Interrupts].
    UINT32                                             ServiceIndex:8 ; ///<Specifies the service index used by microcontroller firmware when interrupted by software. See 2.13.1.4 [Software Interrupts].
    UINT32                                           Reserved_31_11:21; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx03_STRUCT;

// **** SMUx05 Register Definition ****
// Address
#define SMUx05_ADDRESS                                          0x5

// Type
#define SMUx05_TYPE                                             TYPE_SMU
// Field Data
#define SMUx05_McuRam_OFFSET                                    0
#define SMUx05_McuRam_WIDTH                                     32
#define SMUx05_McuRam_MASK                                      0xffffffff

/// SMUx05
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   McuRam:32; ///<This field is used to access SMU RAM. Reading or writing this field causes SMUx0B[MemAddr] to increment by 4.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx05_STRUCT;

// **** SMUx0B Register Definition ****
// Address
#define SMUx0B_ADDRESS                                          0xb

// Type
#define SMUx0B_TYPE                                             TYPE_SMU
// Field Data
#define SMUx0B_MemAddr_OFFSET                                   0
#define SMUx0B_MemAddr_WIDTH                                    16
#define SMUx0B_MemAddr_MASK                                     0xffff

/// SMUx0B
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  MemAddr:16; ///<Specifies the SMU RAM, IRAM, or ROM address accessed.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_STRUCT;

// **** MSRC001_0010 Register Definition ****
// Address
#define MSRC001_0010_ADDRESS                                    0xc0010010

// Type
#define MSRC001_0010_TYPE                                       TYPE_MSR
// Field Data
#define MSRC001_0010_Reserved_16_0_OFFSET                       0
#define MSRC001_0010_Reserved_16_0_WIDTH                        17
#define MSRC001_0010_Reserved_16_0_MASK                         0x1ffff
#define MSRC001_0010_SysUcLockEn_OFFSET                         17
#define MSRC001_0010_SysUcLockEn_WIDTH                          1
#define MSRC001_0010_SysUcLockEn_MASK                           0x20000
#define MSRC001_0010_MtrrFixDramEn_OFFSET                       18
#define MSRC001_0010_MtrrFixDramEn_WIDTH                        1
#define MSRC001_0010_MtrrFixDramEn_MASK                         0x40000
#define MSRC001_0010_MtrrFixDramModEn_OFFSET                    19
#define MSRC001_0010_MtrrFixDramModEn_WIDTH                     1
#define MSRC001_0010_MtrrFixDramModEn_MASK                      0x80000
#define MSRC001_0010_MtrrVarDramEn_OFFSET                       20
#define MSRC001_0010_MtrrVarDramEn_WIDTH                        1
#define MSRC001_0010_MtrrVarDramEn_MASK                         0x100000
#define MSRC001_0010_MtrrTom2En_OFFSET                          21
#define MSRC001_0010_MtrrTom2En_WIDTH                           1
#define MSRC001_0010_MtrrTom2En_MASK                            0x200000
#define MSRC001_0010_Tom2ForceMemTypeWB_OFFSET                  22
#define MSRC001_0010_Tom2ForceMemTypeWB_WIDTH                   1
#define MSRC001_0010_Tom2ForceMemTypeWB_MASK                    0x400000
#define MSRC001_0010_Reserved_63_23_OFFSET                      23
#define MSRC001_0010_Reserved_63_23_WIDTH                       41
#define MSRC001_0010_Reserved_63_23_MASK                        0xffffffff

/// MSRC001_0010
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT64                                            Reserved_16_0:17; ///< [16]: GR defined as ChxToDirtyDis, [10]: GR defined as SetDirtyEnO, [9]: GR defined as SetDirtyEnS, [8]: GR defined as SetDirtyEnE, [7:5]: GR defined as SysVicLimit, [4:0]: GRdefined as SysAckLimit.
    UINT64                                              SysUcLockEn:1 ; ///< This is normally enabled in multi-core systems and disabled in single core systems.
    UINT64                                            MtrrFixDramEn:1 ; ///<
    UINT64                                         MtrrFixDramModEn:1 ; ///< This bit should be set to 1 during BIOS initialization of the fixed MTRRs, then cleared to 0 for operation.
    UINT64                                            MtrrVarDramEn:1 ; ///<
    UINT64                                               MtrrTom2En:1 ; ///<
    UINT64                                       Tom2ForceMemTypeWB:1 ; ///< For this bit to have any effect, MSR0000_02FF[MtrrDefTypeEn] must be 1. MTRRs and PAT can be used to override this memory type.
    UINT64                                           Reserved_63_23:41; ///<
  } Field;                                                              ///< Register bit fields
  UINT64 Value;                                                         ///< Register value
} MSRC001_0010_STRUCT;

// **** MSRC001_001A Register Definition ****
// Address
#define MSRC001_001A_ADDRESS                                    0xc001001a

// Type
#define MSRC001_001A_TYPE                                       TYPE_MSR
// Field Data
#define MSRC001_001A_RAZ_22_0_OFFSET                            0
#define MSRC001_001A_RAZ_22_0_WIDTH                             23
#define MSRC001_001A_RAZ_22_0_MASK                              0x7fffff
#define MSRC001_001A_TOM_35_23__OFFSET                          23
#define MSRC001_001A_TOM_35_23__WIDTH                           13
#define MSRC001_001A_TOM_35_23__MASK                            0xffffffff
#define MSRC001_001A_RAZ_63_36_OFFSET                           36
#define MSRC001_001A_RAZ_63_36_WIDTH                            28
#define MSRC001_001A_RAZ_63_36_MASK                             0xffffffff

/// MSRC001_001A
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT64                                                 RAZ_22_0:23; ///<
    UINT64                                               TOM_35_23_:13; ///<Specifies the address that divides between MMIO and DRAM. This value is normally placed below 4G. From TOM to 4G is MMIO; below TOM is DRAM. See 2.4.4 [System Address Map].
    UINT64                                                RAZ_63_36:28; ///<
  } Field;                                                              ///< Register bit fields
  UINT64 Value;                                                         ///< Register value
} MSRC001_001A_STRUCT;

// **** MSRC001_001D Register Definition ****
// Address
#define MSRC001_001D_ADDRESS                                    0xc001001d

// Type
#define MSRC001_001D_TYPE                                       TYPE_MSR
// Field Data
#define MSRC001_001D_RAZ_22_0_OFFSET                            0
#define MSRC001_001D_RAZ_22_0_WIDTH                             23
#define MSRC001_001D_RAZ_22_0_MASK                              0x7fffff
#define MSRC001_001D_TOM2_35_23__OFFSET                         23
#define MSRC001_001D_TOM2_35_23__WIDTH                          13
#define MSRC001_001D_TOM2_35_23__MASK                           0xffffffff
#define MSRC001_001D_RAZ_63_36_OFFSET                           36
#define MSRC001_001D_RAZ_63_36_WIDTH                            28
#define MSRC001_001D_RAZ_63_36_MASK                             0xffffffff

/// MSRC001_001D
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT64                                                 RAZ_22_0:23; ///<
    UINT64                                              TOM2_35_23_:13; ///<Specifies the address divides between MMIO and DRAM. This value is normally placed above 4G. From 4G to TOM2 - 1 is DRAM; TOM2 and above is MMIO. See 2.4.4 [System Address Map]. This register is enabled by MSRC001_0010 [System Configuration (SYS_CFG)][MtrrTom2En].
    UINT64                                                RAZ_63_36:28; ///<
  } Field;                                                              ///< Register bit fields
  UINT64 Value;                                                         ///< Register value
} MSRC001_001D_STRUCT;












// Non-public register references


// **** SMUx01 Register Definition ****
// Address
#define SMUx01_ADDRESS                                          0x1

// Type
#define SMUx01_TYPE                                             TYPE_SMU
// Field Data
#define SMUx01_RamSwitch_OFFSET                                 0
#define SMUx01_RamSwitch_WIDTH                                  1
#define SMUx01_RamSwitch_MASK                                   0x1
#define SMUx01_Reset_OFFSET                                     1
#define SMUx01_Reset_WIDTH                                      1
#define SMUx01_Reset_MASK                                       0x2
#define SMUx01_Reserved_14_2_OFFSET                             2
#define SMUx01_Reserved_14_2_WIDTH                              13
#define SMUx01_Reserved_14_2_MASK                               0x7ffc
#define SMUx01_WatchdogDis_OFFSET                               15
#define SMUx01_WatchdogDis_WIDTH                                1
#define SMUx01_WatchdogDis_MASK                                 0x8000
#define SMUx01_RomSwitch_OFFSET                                 16
#define SMUx01_RomSwitch_WIDTH                                  1
#define SMUx01_RomSwitch_MASK                                   0x10000
#define SMUx01_IRamSwitch_OFFSET                                17
#define SMUx01_IRamSwitch_WIDTH                                 1
#define SMUx01_IRamSwitch_MASK                                  0x20000
#define SMUx01_VectorOverride_OFFSET                            18
#define SMUx01_VectorOverride_WIDTH                             1
#define SMUx01_VectorOverride_MASK                              0x40000
#define SMUx01_Reserved_31_19_OFFSET                            19
#define SMUx01_Reserved_31_19_WIDTH                             13
#define SMUx01_Reserved_31_19_MASK                              0xfff80000

/// SMUx01
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                RamSwitch:1 ; ///<Specifies whether access to SMU firmware RAM is enabled. See 2.13.1.2 [Software Access to SMU ROM / RAM] and 2.13.1.3 [Updating Firmware].
    UINT32                                                    Reset:1 ; ///<This field is used to place the SMU microcontroller into the reset state.
    UINT32                                            Reserved_14_2:13; ///<
    UINT32                                              WatchdogDis:1 ; ///<
    UINT32                                                RomSwitch:1 ; ///<Specifies whether access to SMU ROM is enabled.
    UINT32                                               IRamSwitch:1 ; ///<Specifies whether access to SMU IRAM is enabled.
    UINT32                                           VectorOverride:1 ; ///<Specifies the address range used for hardware interrupts received by the microcontroller.
    UINT32                                           Reserved_31_19:13; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx01_STRUCT;

// **** SMUx0B_x8408 Register Definition ****
// Address
#define SMUx0B_x8408_ADDRESS                                    0x8408

// Type
#define SMUx0B_x8408_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8408_PsoControlId0_OFFSET                       0
#define SMUx0B_x8408_PsoControlId0_WIDTH                        4
#define SMUx0B_x8408_PsoControlId0_MASK                         0xf
#define SMUx0B_x8408_PsoControlId1_OFFSET                       4
#define SMUx0B_x8408_PsoControlId1_WIDTH                        4
#define SMUx0B_x8408_PsoControlId1_MASK                         0xf0
#define SMUx0B_x8408_PsoControlId2_OFFSET                       8
#define SMUx0B_x8408_PsoControlId2_WIDTH                        4
#define SMUx0B_x8408_PsoControlId2_MASK                         0xf00
#define SMUx0B_x8408_PsoControlId3_OFFSET                       12
#define SMUx0B_x8408_PsoControlId3_WIDTH                        4
#define SMUx0B_x8408_PsoControlId3_MASK                         0xf000
#define SMUx0B_x8408_PsoControlId4_OFFSET                       16
#define SMUx0B_x8408_PsoControlId4_WIDTH                        4
#define SMUx0B_x8408_PsoControlId4_MASK                         0xf0000
#define SMUx0B_x8408_PsoControlId5_OFFSET                       20
#define SMUx0B_x8408_PsoControlId5_WIDTH                        4
#define SMUx0B_x8408_PsoControlId5_MASK                         0xf00000
#define SMUx0B_x8408_PsoControlId6_OFFSET                       24
#define SMUx0B_x8408_PsoControlId6_WIDTH                        4
#define SMUx0B_x8408_PsoControlId6_MASK                         0xf000000
#define SMUx0B_x8408_PsoControlId7_OFFSET                       28
#define SMUx0B_x8408_PsoControlId7_WIDTH                        4
#define SMUx0B_x8408_PsoControlId7_MASK                         0xf0000000

/// SMUx0B_x8408
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            PsoControlId0:4 ; ///<
    UINT32                                            PsoControlId1:4 ; ///<
    UINT32                                            PsoControlId2:4 ; ///<
    UINT32                                            PsoControlId3:4 ; ///<
    UINT32                                            PsoControlId4:4 ; ///<
    UINT32                                            PsoControlId5:4 ; ///<
    UINT32                                            PsoControlId6:4 ; ///<
    UINT32                                            PsoControlId7:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8408_STRUCT;

// **** SMUx0B_x8410 Register Definition ****
// Address
#define SMUx0B_x8410_ADDRESS                                    0x8410

// Type
#define SMUx0B_x8410_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8410_PwrGatingEn_OFFSET                         0
#define SMUx0B_x8410_PwrGatingEn_WIDTH                          1
#define SMUx0B_x8410_PwrGatingEn_MASK                           0x1
#define SMUx0B_x8410_Reserved_2_1_OFFSET                        1
#define SMUx0B_x8410_Reserved_2_1_WIDTH                         2
#define SMUx0B_x8410_Reserved_2_1_MASK                          0x6
#define SMUx0B_x8410_PsoControlValidNum_OFFSET                  3
#define SMUx0B_x8410_PsoControlValidNum_WIDTH                   5
#define SMUx0B_x8410_PsoControlValidNum_MASK                    0xf8
#define SMUx0B_x8410_SavePsoDelay_OFFSET                        8
#define SMUx0B_x8410_SavePsoDelay_WIDTH                         4
#define SMUx0B_x8410_SavePsoDelay_MASK                          0xf00
#define SMUx0B_x8410_NRestoreIsoDelay_OFFSET                    12
#define SMUx0B_x8410_NRestoreIsoDelay_WIDTH                     4
#define SMUx0B_x8410_NRestoreIsoDelay_MASK                      0xf000
#define SMUx0B_x8410_RstPulseWidth_OFFSET                       16
#define SMUx0B_x8410_RstPulseWidth_WIDTH                        8
#define SMUx0B_x8410_RstPulseWidth_MASK                         0xff0000
#define SMUx0B_x8410_IsoDelay_OFFSET                            24
#define SMUx0B_x8410_IsoDelay_WIDTH                             4
#define SMUx0B_x8410_IsoDelay_MASK                              0xf000000
#define SMUx0B_x8410_PwrGaterSel_OFFSET                         28
#define SMUx0B_x8410_PwrGaterSel_WIDTH                          4
#define SMUx0B_x8410_PwrGaterSel_MASK                           0xf0000000

/// SMUx0B_x8410
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              PwrGatingEn:1 ; ///<
    UINT32                                             Reserved_2_1:2 ; ///<Programmed to 0 in section 2.5.6.7.2.1.
    UINT32                                       PsoControlValidNum:5 ; ///<Number of valid header/tiles.
    UINT32                                             SavePsoDelay:4 ; ///<Number of REFCLKs to wait after save de-assertion before PSO is applied.
    UINT32                                         NRestoreIsoDelay:4 ; ///<Numer of REFCLKs to wait between NRESTORE de-assertion and ISO de-assertion.
    UINT32                                            RstPulseWidth:8 ; ///<
    UINT32                                                 IsoDelay:4 ; ///<
    UINT32                                              PwrGaterSel:4 ; ///<Power gater to be configured.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8410_STRUCT;

// **** SMUx0B_x8434 Register Definition ****
// Address
#define SMUx0B_x8434_ADDRESS                                    0x8434

// Type
#define SMUx0B_x8434_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8434_LclkDpmEn_OFFSET                           0
#define SMUx0B_x8434_LclkDpmEn_WIDTH                            1
#define SMUx0B_x8434_LclkDpmEn_MASK                             0x1
#define SMUx0B_x8434_LclkDpmType_OFFSET                         1
#define SMUx0B_x8434_LclkDpmType_WIDTH                          1
#define SMUx0B_x8434_LclkDpmType_MASK                           0x2
#define SMUx0B_x8434_Reserved_3_2_OFFSET                        2
#define SMUx0B_x8434_Reserved_3_2_WIDTH                         2
#define SMUx0B_x8434_Reserved_3_2_MASK                          0xc
#define SMUx0B_x8434_LclkTimerPrescalar_OFFSET                  4
#define SMUx0B_x8434_LclkTimerPrescalar_WIDTH                   4
#define SMUx0B_x8434_LclkTimerPrescalar_MASK                    0xf0
#define SMUx0B_x8434_Reserved_15_8_OFFSET                       8
#define SMUx0B_x8434_Reserved_15_8_WIDTH                        8
#define SMUx0B_x8434_Reserved_15_8_MASK                         0xff00
#define SMUx0B_x8434_LclkTimerPeriod_OFFSET                     16
#define SMUx0B_x8434_LclkTimerPeriod_WIDTH                      16
#define SMUx0B_x8434_LclkTimerPeriod_MASK                       0xffff0000

/// SMUx0B_x8434
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                LclkDpmEn:1 ; ///<Specifies whether dynamic LCLK DPM is enabled. In addition to programming this bit, software must interrupt the SMU.
    UINT32                                              LclkDpmType:1 ; ///<Specifies the type of LCLK DPM used.
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                       LclkTimerPrescalar:4 ; ///<See SMUx0B_x8434[LclkTimerPeriod]. Writing this field causes SMUx0B_x8414[CacTimerPrescalar] to change to the value written.
    UINT32                                            Reserved_15_8:8 ; ///<
    UINT32                                          LclkTimerPeriod:16; ///<Specifies the time period used for LCLK DPM in REFCLKs when LCLK DPM is first enabled. Period = (4^LclkTimerPrescalar) * LclkTimerPeriod.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8434_STRUCT;

// **** SMUx0B_x8440 Register Definition ****
// Address
#define SMUx0B_x8440_ADDRESS                                    0x8440

// Type
#define SMUx0B_x8440_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8440_FstatePeriod_5_OFFSET                      0
#define SMUx0B_x8440_FstatePeriod_5_WIDTH                       16
#define SMUx0B_x8440_FstatePeriod_5_MASK                        0xffff
#define SMUx0B_x8440_FstatePeriod_4_OFFSET                      16
#define SMUx0B_x8440_FstatePeriod_4_WIDTH                       16
#define SMUx0B_x8440_FstatePeriod_4_MASK                        0xffff0000

/// SMUx0B_x8440
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           FstatePeriod_5:16; ///<Specifies the period at which LCLK DPM samples the activity monitor and PCIe bandwidth in REFCLKs. Period = (4^SMUx0B_x8434[LclkTimerPrescalar]) * FstatePeriod.
    UINT32                                           FstatePeriod_4:16; ///<See SMUx0B_x84[48:38:step4][15:0].
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8440_STRUCT;

// **** SMUx0B_x8470 Register Definition ****
// Address
#define SMUx0B_x8470_ADDRESS                                    0x8470

// Type
#define SMUx0B_x8470_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8470_Raising_OFFSET                             0
#define SMUx0B_x8470_Raising_WIDTH                              16
#define SMUx0B_x8470_Raising_MASK                               0xffff
#define SMUx0B_x8470_Lowering_OFFSET                            16
#define SMUx0B_x8470_Lowering_WIDTH                             16
#define SMUx0B_x8470_Lowering_MASK                              0xffff0000

/// SMUx0B_x8470
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Raising:16; ///<Specifies the activity threshold that the activity monitor must be over to cause LCLK DPM to transition to a higher performance state.
    UINT32                                                 Lowering:16; ///<Specifies the activity threshold that the activity monitor must be under to cause LCLK DPM to transition to a lower performance state.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8470_STRUCT;

// **** SMUx0B_x848C Register Definition ****
// Address
#define SMUx0B_x848C_ADDRESS                                    0x848c

// Type
#define SMUx0B_x848C_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x848C_FstateDiv_7_OFFSET                         0
#define SMUx0B_x848C_FstateDiv_7_WIDTH                          7
#define SMUx0B_x848C_FstateDiv_7_MASK                           0x7f
#define SMUx0B_x848C_Reserved_7_7_OFFSET                        7
#define SMUx0B_x848C_Reserved_7_7_WIDTH                         1
#define SMUx0B_x848C_Reserved_7_7_MASK                          0x80
#define SMUx0B_x848C_FstateDiv_6_OFFSET                         8
#define SMUx0B_x848C_FstateDiv_6_WIDTH                          7
#define SMUx0B_x848C_FstateDiv_6_MASK                           0x7f00
#define SMUx0B_x848C_Reserved_15_15_OFFSET                      15
#define SMUx0B_x848C_Reserved_15_15_WIDTH                       1
#define SMUx0B_x848C_Reserved_15_15_MASK                        0x8000
#define SMUx0B_x848C_FstateDiv_5_OFFSET                         16
#define SMUx0B_x848C_FstateDiv_5_WIDTH                          7
#define SMUx0B_x848C_FstateDiv_5_MASK                           0x7f0000
#define SMUx0B_x848C_Reserved_23_23_OFFSET                      23
#define SMUx0B_x848C_Reserved_23_23_WIDTH                       1
#define SMUx0B_x848C_Reserved_23_23_MASK                        0x800000
#define SMUx0B_x848C_FstateDiv_4_OFFSET                         24
#define SMUx0B_x848C_FstateDiv_4_WIDTH                          7
#define SMUx0B_x848C_FstateDiv_4_MASK                           0x7f000000
#define SMUx0B_x848C_Reserved_31_31_OFFSET                      31
#define SMUx0B_x848C_Reserved_31_31_WIDTH                       1
#define SMUx0B_x848C_Reserved_31_31_MASK                        0x80000000

/// SMUx0B_x848C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              FstateDiv_7:7 ; ///<Specifies the LCLK divisor used when in this LCLK DPM state. See GMMx6[88:84][SclkDpmDiv].
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                              FstateDiv_6:7 ; ///<See: SMUx0B_x84[8C:88:step4][6:0].
    UINT32                                           Reserved_15_15:1 ; ///<
    UINT32                                              FstateDiv_5:7 ; ///<See: SMUx0B_x84[8C:88:step4][6:0].
    UINT32                                           Reserved_23_23:1 ; ///<
    UINT32                                              FstateDiv_4:7 ; ///<See: SMUx0B_x84[8C:88:step4][6:0].
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x848C_STRUCT;

// **** SMUx0B_x8490 Register Definition ****
// Address
#define SMUx0B_x8490_ADDRESS                                    0x8490

// Type
#define SMUx0B_x8490_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8490_LclkState0Valid_OFFSET                     0
#define SMUx0B_x8490_LclkState0Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState0Valid_MASK                       0x1
#define SMUx0B_x8490_LclkState1Valid_OFFSET                     1
#define SMUx0B_x8490_LclkState1Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState1Valid_MASK                       0x2
#define SMUx0B_x8490_LclkState2Valid_OFFSET                     2
#define SMUx0B_x8490_LclkState2Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState2Valid_MASK                       0x4
#define SMUx0B_x8490_LclkState3Valid_OFFSET                     3
#define SMUx0B_x8490_LclkState3Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState3Valid_MASK                       0x8
#define SMUx0B_x8490_LclkState4Valid_OFFSET                     4
#define SMUx0B_x8490_LclkState4Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState4Valid_MASK                       0x10
#define SMUx0B_x8490_LclkState5Valid_OFFSET                     5
#define SMUx0B_x8490_LclkState5Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState5Valid_MASK                       0x20
#define SMUx0B_x8490_LclkState6Valid_OFFSET                     6
#define SMUx0B_x8490_LclkState6Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState6Valid_MASK                       0x40
#define SMUx0B_x8490_LclkState7Valid_OFFSET                     7
#define SMUx0B_x8490_LclkState7Valid_WIDTH                      1
#define SMUx0B_x8490_LclkState7Valid_MASK                       0x80
#define SMUx0B_x8490_LclkDivTtExit_OFFSET                       8
#define SMUx0B_x8490_LclkDivTtExit_WIDTH                        8
#define SMUx0B_x8490_LclkDivTtExit_MASK                         0xff00
#define SMUx0B_x8490_MinDivAllowed_OFFSET                       16
#define SMUx0B_x8490_MinDivAllowed_WIDTH                        8
#define SMUx0B_x8490_MinDivAllowed_MASK                         0xff0000
#define SMUx0B_x8490_Reserved_31_24_OFFSET                      24
#define SMUx0B_x8490_Reserved_31_24_WIDTH                       8
#define SMUx0B_x8490_Reserved_31_24_MASK                        0xff000000

/// SMUx0B_x8490
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          LclkState0Valid:1 ; ///<Specifies whether the LCLK DPM state is valid.
    UINT32                                          LclkState1Valid:1 ; ///<See: SMUx0B_x8490[LclkState0Valid].
    UINT32                                          LclkState2Valid:1 ; ///<See: SMUx0B_x8490[LclkState0Valid].
    UINT32                                          LclkState3Valid:1 ; ///<See: SMUx0B_x8490[LclkState0Valid].
    UINT32                                          LclkState4Valid:1 ; ///<See: SMUx0B_x8490[LclkState0Valid].
    UINT32                                          LclkState5Valid:1 ; ///<See: SMUx0B_x8490[LclkState0Valid].
    UINT32                                          LclkState6Valid:1 ; ///<See: SMUx0B_x8490[LclkState0Valid].
    UINT32                                          LclkState7Valid:1 ; ///<See: SMUx0B_x8490[LclkState0Valid].
    UINT32                                            LclkDivTtExit:8 ; ///<
    UINT32                                            MinDivAllowed:8 ; ///<Specifies the minimum divisor supported by LCLK DPM using PCIe bandwidth and GFX DMA activity. See GMMx6[88:84][SclkDpmDiv].
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8490_STRUCT;

// **** SMUx0B_x84A0 Register Definition ****
// Address
#define SMUx0B_x84A0_ADDRESS                                    0x84a0

// Type
#define SMUx0B_x84A0_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x84A0_MothPsoPwrup_OFFSET                        0
#define SMUx0B_x84A0_MothPsoPwrup_WIDTH                         16
#define SMUx0B_x84A0_MothPsoPwrup_MASK                          0xffff
#define SMUx0B_x84A0_MothPsoPwrdn_OFFSET                        16
#define SMUx0B_x84A0_MothPsoPwrdn_WIDTH                         16
#define SMUx0B_x84A0_MothPsoPwrdn_MASK                          0xffff0000

/// SMUx0B_x84A0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             MothPsoPwrup:16; ///<Number of REFCLKs to wait after de-asserting mother PSO control on power-up.
    UINT32                                             MothPsoPwrdn:16; ///<Number of REFCLKs to wait after asserting mother PSO control on power-down.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x84A0_STRUCT;

// **** SMUx0B_x8504 Register Definition ****
// Address
#define SMUx0B_x8504_ADDRESS                                    0x8504

// Type
#define SMUx0B_x8504_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8504_SaveRestoreWidth_OFFSET                    0
#define SMUx0B_x8504_SaveRestoreWidth_WIDTH                     8
#define SMUx0B_x8504_SaveRestoreWidth_MASK                      0xff
#define SMUx0B_x8504_PsoRestoreTimer_OFFSET                     8
#define SMUx0B_x8504_PsoRestoreTimer_WIDTH                      8
#define SMUx0B_x8504_PsoRestoreTimer_MASK                       0xff00
#define SMUx0B_x8504_Reserved_31_16_OFFSET                      16
#define SMUx0B_x8504_Reserved_31_16_WIDTH                       16
#define SMUx0B_x8504_Reserved_31_16_MASK                        0xffff0000

/// SMUx0B_x8504
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         SaveRestoreWidth:8 ; ///<Number of REFCLKs to keep save/restore pulse active.
    UINT32                                          PsoRestoreTimer:8 ; ///<Delay in REFCLKs between PSO de-assertion and falling edge of RESTORE signal.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8504_STRUCT;

// **** SMUx0B_x8650 Register Definition ****
// Address
#define SMUx0B_x8650_ADDRESS                                    0x8650

// Type
#define SMUx0B_x8650_TYPE                                       TYPE_SMUx0B
// Field Data
#define SMUx0B_x8650_Data_OFFSET                                0
#define SMUx0B_x8650_Data_WIDTH                                 32
#define SMUx0B_x8650_Data_MASK                                  0xffffffff

/// SMUx0B_x8650
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8650_STRUCT;

// **** SMUx1B Register Definition ****
// Address
#define SMUx1B_ADDRESS                                          0x1b

// Type
#define SMUx1B_TYPE                                             TYPE_SMU
// Field Data
#define SMUx1B_LclkDpSlpDiv_OFFSET                              0
#define SMUx1B_LclkDpSlpDiv_WIDTH                               3
#define SMUx1B_LclkDpSlpDiv_MASK                                0x7
#define SMUx1B_RampDis_OFFSET                                   3
#define SMUx1B_RampDis_WIDTH                                    1
#define SMUx1B_RampDis_MASK                                     0x8
#define SMUx1B_Reserved_7_4_OFFSET                              4
#define SMUx1B_Reserved_7_4_WIDTH                               4
#define SMUx1B_Reserved_7_4_MASK                                0xf0
#define SMUx1B_LclkDpSlpMask_OFFSET                             8
#define SMUx1B_LclkDpSlpMask_WIDTH                              8
#define SMUx1B_LclkDpSlpMask_MASK                               0xff00

/// SMUx1B
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             LclkDpSlpDiv:3 ; ///<Specifies the divisor applied to LCLK in deep sleep. SMUx1D[LclkDpSlpEn] must be programmed to 0 before changing the value in this field or undefined behavior results.
    UINT32                                                  RampDis:1 ; ///<Specifies the method used to ramp down LCLK. For example, if transitioning from /1 to /8, first transition to /2, wait one LCLK cycle, transition to /4, wait on LCLK cycle, then transition to /8.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                            LclkDpSlpMask:8 ; ///<Specifies which subcomponents of the GNB must be idle to enter LCLK deep sleep. Each bit corresponds to a different subcomponent or state. 1=Subcomponent must be idle or state must be true to enter LCLK deep sleep. 0=Ignore subcomponent or state.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx1B_STRUCT;

// **** SMUx1D Register Definition ****
// Address
#define SMUx1D_ADDRESS                                          0x1d

// Type
#define SMUx1D_TYPE                                             TYPE_SMU
// Field Data
#define SMUx1D_LclkDpSlpHyst_OFFSET                             0
#define SMUx1D_LclkDpSlpHyst_WIDTH                              12
#define SMUx1D_LclkDpSlpHyst_MASK                               0xfff
#define SMUx1D_LclkDpSlpEn_OFFSET                               12
#define SMUx1D_LclkDpSlpEn_WIDTH                                1
#define SMUx1D_LclkDpSlpEn_MASK                                 0x1000
#define SMUx1D_Reserved_15_13_OFFSET                            13
#define SMUx1D_Reserved_15_13_WIDTH                             3
#define SMUx1D_Reserved_15_13_MASK                              0xe000

/// SMUx1D
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            LclkDpSlpHyst:12; ///<Specifies the hysteresis time for LCLK deep sleep. Time is specified as a number of LCLK cycles.
    UINT32                                              LclkDpSlpEn:1 ; ///<Specifies whether LCLK deep sleep is enabled.
    UINT32                                           Reserved_15_13:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx1D_STRUCT;

// **** SMUx33 Register Definition ****
// Address
#define SMUx33_ADDRESS                                          0x33

// Type
#define SMUx33_TYPE                                             TYPE_SMU
// Field Data
#define SMUx33_LclkActMonPrd_OFFSET                             0
#define SMUx33_LclkActMonPrd_WIDTH                              16
#define SMUx33_LclkActMonPrd_MASK                               0xffff
#define SMUx33_LclkActMonUnt_OFFSET                             16
#define SMUx33_LclkActMonUnt_WIDTH                              4
#define SMUx33_LclkActMonUnt_MASK                               0xf0000
#define SMUx33_TrendMode_OFFSET                                 20
#define SMUx33_TrendMode_WIDTH                                  1
#define SMUx33_TrendMode_MASK                                   0x100000
#define SMUx33_ForceTrend_OFFSET                                21
#define SMUx33_ForceTrend_WIDTH                                 1
#define SMUx33_ForceTrend_MASK                                  0x200000
#define SMUx33_ActMonRst_OFFSET                                 22
#define SMUx33_ActMonRst_WIDTH                                  1
#define SMUx33_ActMonRst_MASK                                   0x400000
#define SMUx33_BusyCntSel_OFFSET                                23
#define SMUx33_BusyCntSel_WIDTH                                 2
#define SMUx33_BusyCntSel_MASK                                  0x1800000
#define SMUx33_AccessCntl_OFFSET                                25
#define SMUx33_AccessCntl_WIDTH                                 1
#define SMUx33_AccessCntl_MASK                                  0x2000000
#define SMUx33_Reserved_31_26_OFFSET                            26
#define SMUx33_Reserved_31_26_WIDTH                             6
#define SMUx33_Reserved_31_26_MASK                              0xfc000000

/// SMUx33
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            LclkActMonPrd:16; ///<Specifies the sampling period for the LCLK DPM activity monitor in REFCLKs. Sampling period = (4^LclkActMonUnt) * LclkActMonPrd.
    UINT32                                            LclkActMonUnt:4 ; ///<See SMUx33[LclkActMonPrd].
    UINT32                                                TrendMode:1 ; ///<Specifies the trend that is forced. See SMUx33[ForceTrend]. In RTL this field is ForceTrend but the connections are swapped.
    UINT32                                               ForceTrend:1 ; ///< In RTL this field is TrendMode but the connections are swapped.
    UINT32                                                ActMonRst:1 ; ///<Writing 1 to this field clears each stage of the LCLK DPM activity monitor FIR filter to 0. The activity monitor is held in reset while this bit is 1. Software must clear this bit to 0 to allow the activity monitor to function.
    UINT32                                               BusyCntSel:2 ; ///<Specifies subcomponents or activity monitored by the LCLK activity monitor.
    UINT32                                               AccessCntl:1 ; ///<Specifies which set of registers controls the LCLK activity monitor.
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx33_STRUCT;

// **** SMUx35 Register Definition ****
// Address
#define SMUx35_ADDRESS                                          0x35

// Type
#define SMUx35_TYPE                                             TYPE_SMU
// Field Data
#define SMUx35_DownTrendCoef_OFFSET                             0
#define SMUx35_DownTrendCoef_WIDTH                              10
#define SMUx35_DownTrendCoef_MASK                               0x3ff
#define SMUx35_UpTrendCoef_OFFSET                               10
#define SMUx35_UpTrendCoef_WIDTH                                10
#define SMUx35_UpTrendCoef_MASK                                 0xffc00
#define SMUx35_Reserved_31_20_OFFSET                            20
#define SMUx35_Reserved_31_20_WIDTH                             12
#define SMUx35_Reserved_31_20_MASK                              0xfff00000

/// SMUx35
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DownTrendCoef:10; ///<Specifies the coefficient used by the appropriate activity monitor FIR filter stage when the trend is downward.
    UINT32                                              UpTrendCoef:10; ///<Specifies the coefficient used by the appropriate activity monitor FIR filter stage when the trend is upward.
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx35_STRUCT;

// **** SMUx37 Register Definition ****
// Address
#define SMUx37_ADDRESS                                          0x37

// Type
#define SMUx37_TYPE                                             TYPE_SMU
// Field Data
#define SMUx37_DownTrendCoef_OFFSET                             0
#define SMUx37_DownTrendCoef_WIDTH                              10
#define SMUx37_DownTrendCoef_MASK                               0x3ff
#define SMUx37_UpTrendCoef_OFFSET                               10
#define SMUx37_UpTrendCoef_WIDTH                                10
#define SMUx37_UpTrendCoef_MASK                                 0xffc00
#define SMUx37_Reserved_31_20_OFFSET                            20
#define SMUx37_Reserved_31_20_WIDTH                             12
#define SMUx37_Reserved_31_20_MASK                              0xfff00000

/// SMUx37
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DownTrendCoef:10; ///<Specifies the coefficient used by the appropriate activity monitor FIR filter stage when the trend is downward.
    UINT32                                              UpTrendCoef:10; ///<Specifies the coefficient used by the appropriate activity monitor FIR filter stage when the trend is upward.
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx37_STRUCT;

// **** SMUx51 Register Definition ****
// Address
#define SMUx51_ADDRESS                                          0x51

// Type
#define SMUx51_TYPE                                             TYPE_SMU
// Field Data
#define SMUx51_DownTrendCoef_OFFSET                             0
#define SMUx51_DownTrendCoef_WIDTH                              10
#define SMUx51_DownTrendCoef_MASK                               0x3ff
#define SMUx51_UpTrendCoef_OFFSET                               10
#define SMUx51_UpTrendCoef_WIDTH                                10
#define SMUx51_UpTrendCoef_MASK                                 0xffc00
#define SMUx51_Reserved_31_20_OFFSET                            20
#define SMUx51_Reserved_31_20_WIDTH                             12
#define SMUx51_Reserved_31_20_MASK                              0xfff00000

/// SMUx51
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DownTrendCoef:10; ///<Specifies the coefficient used by the appropriate activity monitor FIR filter stage when the trend is downward.
    UINT32                                              UpTrendCoef:10; ///<Specifies the coefficient used by the appropriate activity monitor FIR filter stage when the trend is upward.
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx51_STRUCT;

// **** SMUx6F Register Definition ****
// Address
#define SMUx6F_ADDRESS                                          0x6f

// Type
#define SMUx6F_TYPE                                             TYPE_SMU
// Field Data
#define SMUx6F_OnDelay_OFFSET                                   0
#define SMUx6F_OnDelay_WIDTH                                    4
#define SMUx6F_OnDelay_MASK                                     0xf
#define SMUx6F_OffDelay_OFFSET                                  4
#define SMUx6F_OffDelay_WIDTH                                   8
#define SMUx6F_OffDelay_MASK                                    0xff0
#define SMUx6F_Reserved_20_12_OFFSET                            12
#define SMUx6F_Reserved_20_12_WIDTH                             9
#define SMUx6F_Reserved_20_12_MASK                              0x1ff000
#define SMUx6F_RampDis0_OFFSET                                  21
#define SMUx6F_RampDis0_WIDTH                                   1
#define SMUx6F_RampDis0_MASK                                    0x200000
#define SMUx6F_RampDisReg_OFFSET                                22
#define SMUx6F_RampDisReg_WIDTH                                 1
#define SMUx6F_RampDisReg_MASK                                  0x400000
#define SMUx6F_Reserved_31_23_OFFSET                            23
#define SMUx6F_Reserved_31_23_WIDTH                             9
#define SMUx6F_Reserved_31_23_MASK                              0xff800000

/// SMUx6F
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<Specifies the number of LCLK cycles after a transaction is received before LCLK within the SMU is ungated.
    UINT32                                                 OffDelay:8 ; ///<Specifies the number of SCLKs after logic goes idle before SCLK is gated off.
    UINT32                                           Reserved_20_12:9 ; ///<
    UINT32                                                 RampDis0:1 ; ///<Specifies whether ramping of dyn_oclk0 is enabled.
    UINT32                                               RampDisReg:1 ; ///<Specifies whether ramping of the register clock is enabled.
    UINT32                                           Reserved_31_23:9 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx6F_STRUCT;

// **** SMUx71 Register Definition ****
// Address
#define SMUx71_ADDRESS                                          0x71

// Type
#define SMUx71_TYPE                                             TYPE_SMU
// Field Data
#define SMUx71_OnDelay_OFFSET                                   0
#define SMUx71_OnDelay_WIDTH                                    4
#define SMUx71_OnDelay_MASK                                     0xf
#define SMUx71_OffDelay_OFFSET                                  4
#define SMUx71_OffDelay_WIDTH                                   8
#define SMUx71_OffDelay_MASK                                    0xff0
#define SMUx71_Reserved_19_12_OFFSET                            12
#define SMUx71_Reserved_19_12_WIDTH                             8
#define SMUx71_Reserved_19_12_MASK                              0xff000
#define SMUx71_RampDis1_OFFSET                                  20
#define SMUx71_RampDis1_WIDTH                                   1
#define SMUx71_RampDis1_MASK                                    0x100000
#define SMUx71_RampDis0_OFFSET                                  21
#define SMUx71_RampDis0_WIDTH                                   1
#define SMUx71_RampDis0_MASK                                    0x200000
#define SMUx71_RampDisReg_OFFSET                                22
#define SMUx71_RampDisReg_WIDTH                                 1
#define SMUx71_RampDisReg_MASK                                  0x400000
#define SMUx71_Reserved_31_23_OFFSET                            23
#define SMUx71_Reserved_31_23_WIDTH                             9
#define SMUx71_Reserved_31_23_MASK                              0xff800000

/// SMUx71
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<Specifies the number of LCLK cycles after a transaction is received before LCLK within the SMU is ungated.
    UINT32                                                 OffDelay:8 ; ///<Specifies the number of SCLKs after logic goes idle before SCLK is gated off.
    UINT32                                           Reserved_19_12:8 ; ///<
    UINT32                                                 RampDis1:1 ; ///<Specifies whether ramping of dyn_oclk1 is enabled.
    UINT32                                                 RampDis0:1 ; ///<Specifies whether ramping of dyn_oclk0 is enabled.
    UINT32                                               RampDisReg:1 ; ///<Specifies whether ramping of the register clock is enabled.
    UINT32                                           Reserved_31_23:9 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx71_STRUCT;

// **** SMUx73 Register Definition ****
// Address
#define SMUx73_ADDRESS                                          0x73

// Type
#define SMUx73_TYPE                                             TYPE_SMU
// Field Data
#define SMUx73_DisLclkGating_OFFSET                             0
#define SMUx73_DisLclkGating_WIDTH                              1
#define SMUx73_DisLclkGating_MASK                               0x1
#define SMUx73_DisSclkGating_OFFSET                             1
#define SMUx73_DisSclkGating_WIDTH                              1
#define SMUx73_DisSclkGating_MASK                               0x2
#define SMUx73_Reserved_15_2_OFFSET                             2
#define SMUx73_Reserved_15_2_WIDTH                              14
#define SMUx73_Reserved_15_2_MASK                               0xfffc

/// SMUx73
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DisLclkGating:1 ; ///<Specifies whether LCLK gating is enabled.
    UINT32                                            DisSclkGating:1 ; ///<Specifies whether SCLK gating is enabled.
    UINT32                                            Reserved_15_2:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx73_STRUCT;

// **** D0F0x64_x20 Register Definition ****
// Address
#define D0F0x64_x20_ADDRESS                                     0x20

// Type
#define D0F0x64_x20_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x20_ProgDevMapEn_OFFSET                         0
#define D0F0x64_x20_ProgDevMapEn_WIDTH                          1
#define D0F0x64_x20_ProgDevMapEn_MASK                           0x1
#define D0F0x64_x20_IocPcieDevRemapDis_OFFSET                   1
#define D0F0x64_x20_IocPcieDevRemapDis_WIDTH                    1
#define D0F0x64_x20_IocPcieDevRemapDis_MASK                     0x2
#define D0F0x64_x20_Reserved_3_2_OFFSET                         2
#define D0F0x64_x20_Reserved_3_2_WIDTH                          2
#define D0F0x64_x20_Reserved_3_2_MASK                           0xc
#define D0F0x64_x20_GppPort2Devmap_OFFSET                       4
#define D0F0x64_x20_GppPort2Devmap_WIDTH                        4
#define D0F0x64_x20_GppPort2Devmap_MASK                         0xf0
#define D0F0x64_x20_GppPort3Devmap_OFFSET                       8
#define D0F0x64_x20_GppPort3Devmap_WIDTH                        4
#define D0F0x64_x20_GppPort3Devmap_MASK                         0xf00
#define D0F0x64_x20_GppPort4Devmap_OFFSET                       12
#define D0F0x64_x20_GppPort4Devmap_WIDTH                        4
#define D0F0x64_x20_GppPort4Devmap_MASK                         0xf000
#define D0F0x64_x20_GppPort5Devmap_OFFSET                       16
#define D0F0x64_x20_GppPort5Devmap_WIDTH                        4
#define D0F0x64_x20_GppPort5Devmap_MASK                         0xf0000
#define D0F0x64_x20_Reserved_23_20_OFFSET                       20
#define D0F0x64_x20_Reserved_23_20_WIDTH                        4
#define D0F0x64_x20_Reserved_23_20_MASK                         0xf00000
#define D0F0x64_x20_Reserved_27_24_OFFSET                       24
#define D0F0x64_x20_Reserved_27_24_WIDTH                        4
#define D0F0x64_x20_Reserved_27_24_MASK                         0xf000000
#define D0F0x64_x20_Reserved_31_28_OFFSET                       28
#define D0F0x64_x20_Reserved_31_28_WIDTH                        4
#define D0F0x64_x20_Reserved_31_28_MASK                         0xf0000000

/// D0F0x64_x20
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             ProgDevMapEn:1 ; ///<
    UINT32                                       IocPcieDevRemapDis:1 ; ///<
    UINT32                                             Reserved_3_2:2 ; ///<
    UINT32                                           GppPort2Devmap:4 ; ///<1=Map PCIe devices 4 through 7 to port B of the GPPFCH core.
    UINT32                                           GppPort3Devmap:4 ; ///< See GppPort2Devmap.
    UINT32                                           GppPort4Devmap:4 ; ///< See GppPort2Devmap.
    UINT32                                           GppPort5Devmap:4 ; ///< See GppPort2Devmap.
    UINT32                                           Reserved_23_20:4 ; ///<GppPort6Devmap.
    UINT32                                           Reserved_27_24:4 ; ///<GppPort7Devmap.
    UINT32                                           Reserved_31_28:4 ; ///<GppPort9Devmap.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x20_STRUCT;

// **** D0F0x64_x22 Register Definition ****
// Address
#define D0F0x64_x22_ADDRESS                                     0x22

// Type
#define D0F0x64_x22_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x22_OnDelay_OFFSET                              0
#define D0F0x64_x22_OnDelay_WIDTH                               4
#define D0F0x64_x22_OnDelay_MASK                                0xf
#define D0F0x64_x22_OffHysteresis_OFFSET                        4
#define D0F0x64_x22_OffHysteresis_WIDTH                         8
#define D0F0x64_x22_OffHysteresis_MASK                          0xff0
#define D0F0x64_x22_DivId_OFFSET                                12
#define D0F0x64_x22_DivId_WIDTH                                 3
#define D0F0x64_x22_DivId_MASK                                  0x7000
#define D0F0x64_x22_Reserved_16_15_OFFSET                       15
#define D0F0x64_x22_Reserved_16_15_WIDTH                        2
#define D0F0x64_x22_Reserved_16_15_MASK                         0x18000
#define D0F0x64_x22_RampDisClk4_OFFSET                          17
#define D0F0x64_x22_RampDisClk4_WIDTH                           1
#define D0F0x64_x22_RampDisClk4_MASK                            0x20000
#define D0F0x64_x22_RampDisClk3_OFFSET                          18
#define D0F0x64_x22_RampDisClk3_WIDTH                           1
#define D0F0x64_x22_RampDisClk3_MASK                            0x40000
#define D0F0x64_x22_RampDisClk2_OFFSET                          19
#define D0F0x64_x22_RampDisClk2_WIDTH                           1
#define D0F0x64_x22_RampDisClk2_MASK                            0x80000
#define D0F0x64_x22_RampDisClk1_OFFSET                          20
#define D0F0x64_x22_RampDisClk1_WIDTH                           1
#define D0F0x64_x22_RampDisClk1_MASK                            0x100000
#define D0F0x64_x22_RampDisClk0_OFFSET                          21
#define D0F0x64_x22_RampDisClk0_WIDTH                           1
#define D0F0x64_x22_RampDisClk0_MASK                            0x200000
#define D0F0x64_x22_Reserved_23_22_OFFSET                       22
#define D0F0x64_x22_Reserved_23_22_WIDTH                        2
#define D0F0x64_x22_Reserved_23_22_MASK                         0xc00000
#define D0F0x64_x22_Reserved_25_24_OFFSET                       24
#define D0F0x64_x22_Reserved_25_24_WIDTH                        2
#define D0F0x64_x22_Reserved_25_24_MASK                         0x3000000
#define D0F0x64_x22_SoftOverrideClk4_OFFSET                     26
#define D0F0x64_x22_SoftOverrideClk4_WIDTH                      1
#define D0F0x64_x22_SoftOverrideClk4_MASK                       0x4000000
#define D0F0x64_x22_SoftOverrideClk3_OFFSET                     27
#define D0F0x64_x22_SoftOverrideClk3_WIDTH                      1
#define D0F0x64_x22_SoftOverrideClk3_MASK                       0x8000000
#define D0F0x64_x22_SoftOverrideClk2_OFFSET                     28
#define D0F0x64_x22_SoftOverrideClk2_WIDTH                      1
#define D0F0x64_x22_SoftOverrideClk2_MASK                       0x10000000
#define D0F0x64_x22_SoftOverrideClk1_OFFSET                     29
#define D0F0x64_x22_SoftOverrideClk1_WIDTH                      1
#define D0F0x64_x22_SoftOverrideClk1_MASK                       0x20000000
#define D0F0x64_x22_SoftOverrideClk0_OFFSET                     30
#define D0F0x64_x22_SoftOverrideClk0_WIDTH                      1
#define D0F0x64_x22_SoftOverrideClk0_MASK                       0x40000000
#define D0F0x64_x22_Reserved_31_31_OFFSET                       31
#define D0F0x64_x22_Reserved_31_31_WIDTH                        1
#define D0F0x64_x22_Reserved_31_31_MASK                         0x80000000

/// D0F0x64_x22
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<
    UINT32                                            OffHysteresis:8 ; ///<Specifies the number of LCLK cycles that the hardware waits after the logic goes idle before gating the clocks specified by SoftOverrideClk[4:0].
    UINT32                                                    DivId:3 ; ///<
    UINT32                                           Reserved_16_15:2 ; ///<
    UINT32                                              RampDisClk4:1 ; ///<
    UINT32                                              RampDisClk3:1 ; ///<
    UINT32                                              RampDisClk2:1 ; ///<
    UINT32                                              RampDisClk1:1 ; ///<
    UINT32                                              RampDisClk0:1 ; ///<
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                           Reserved_25_24:2 ; ///<
    UINT32                                         SoftOverrideClk4:1 ; ///<
    UINT32                                         SoftOverrideClk3:1 ; ///<
    UINT32                                         SoftOverrideClk2:1 ; ///<
    UINT32                                         SoftOverrideClk1:1 ; ///<
    UINT32                                         SoftOverrideClk0:1 ; ///<
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x22_STRUCT;

// **** D0F0x64_x23 Register Definition ****
// Address
#define D0F0x64_x23_ADDRESS                                     0x23

// Type
#define D0F0x64_x23_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x23_OnDelay_OFFSET                              0
#define D0F0x64_x23_OnDelay_WIDTH                               4
#define D0F0x64_x23_OnDelay_MASK                                0xf
#define D0F0x64_x23_OffHysteresis_OFFSET                        4
#define D0F0x64_x23_OffHysteresis_WIDTH                         8
#define D0F0x64_x23_OffHysteresis_MASK                          0xff0
#define D0F0x64_x23_DivId_OFFSET                                12
#define D0F0x64_x23_DivId_WIDTH                                 3
#define D0F0x64_x23_DivId_MASK                                  0x7000
#define D0F0x64_x23_Reserved_16_15_OFFSET                       15
#define D0F0x64_x23_Reserved_16_15_WIDTH                        2
#define D0F0x64_x23_Reserved_16_15_MASK                         0x18000
#define D0F0x64_x23_RampDisClk4_OFFSET                          17
#define D0F0x64_x23_RampDisClk4_WIDTH                           1
#define D0F0x64_x23_RampDisClk4_MASK                            0x20000
#define D0F0x64_x23_RampDisClk3_OFFSET                          18
#define D0F0x64_x23_RampDisClk3_WIDTH                           1
#define D0F0x64_x23_RampDisClk3_MASK                            0x40000
#define D0F0x64_x23_RampDisClk2_OFFSET                          19
#define D0F0x64_x23_RampDisClk2_WIDTH                           1
#define D0F0x64_x23_RampDisClk2_MASK                            0x80000
#define D0F0x64_x23_RampDisClk1_OFFSET                          20
#define D0F0x64_x23_RampDisClk1_WIDTH                           1
#define D0F0x64_x23_RampDisClk1_MASK                            0x100000
#define D0F0x64_x23_RampDisClk0_OFFSET                          21
#define D0F0x64_x23_RampDisClk0_WIDTH                           1
#define D0F0x64_x23_RampDisClk0_MASK                            0x200000
#define D0F0x64_x23_Reserved_23_22_OFFSET                       22
#define D0F0x64_x23_Reserved_23_22_WIDTH                        2
#define D0F0x64_x23_Reserved_23_22_MASK                         0xc00000
#define D0F0x64_x23_Reserved_26_24_OFFSET                       24
#define D0F0x64_x23_Reserved_26_24_WIDTH                        3
#define D0F0x64_x23_Reserved_26_24_MASK                         0x7000000
#define D0F0x64_x23_SoftOverrideClk3_OFFSET                     27
#define D0F0x64_x23_SoftOverrideClk3_WIDTH                      1
#define D0F0x64_x23_SoftOverrideClk3_MASK                       0x8000000
#define D0F0x64_x23_SoftOverrideClk2_OFFSET                     28
#define D0F0x64_x23_SoftOverrideClk2_WIDTH                      1
#define D0F0x64_x23_SoftOverrideClk2_MASK                       0x10000000
#define D0F0x64_x23_SoftOverrideClk1_OFFSET                     29
#define D0F0x64_x23_SoftOverrideClk1_WIDTH                      1
#define D0F0x64_x23_SoftOverrideClk1_MASK                       0x20000000
#define D0F0x64_x23_SoftOverrideClk0_OFFSET                     30
#define D0F0x64_x23_SoftOverrideClk0_WIDTH                      1
#define D0F0x64_x23_SoftOverrideClk0_MASK                       0x40000000
#define D0F0x64_x23_Reserved_31_31_OFFSET                       31
#define D0F0x64_x23_Reserved_31_31_WIDTH                        1
#define D0F0x64_x23_Reserved_31_31_MASK                         0x80000000

/// D0F0x64_x23
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<
    UINT32                                            OffHysteresis:8 ; ///<Specifies the number of LCLK cycles that the hardware waits after the logic goes idle before gating the clocks specifies by SoftOverrideClk[4:0].
    UINT32                                                    DivId:3 ; ///<
    UINT32                                           Reserved_16_15:2 ; ///<
    UINT32                                              RampDisClk4:1 ; ///<
    UINT32                                              RampDisClk3:1 ; ///<
    UINT32                                              RampDisClk2:1 ; ///<
    UINT32                                              RampDisClk1:1 ; ///<
    UINT32                                              RampDisClk0:1 ; ///<
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                           Reserved_26_24:3 ; ///<
    UINT32                                         SoftOverrideClk3:1 ; ///<
    UINT32                                         SoftOverrideClk2:1 ; ///<
    UINT32                                         SoftOverrideClk1:1 ; ///<
    UINT32                                         SoftOverrideClk0:1 ; ///<
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x23_STRUCT;

// **** D0F0x64_x24 Register Definition ****
// Address
#define D0F0x64_x24_ADDRESS                                     0x24

// Type
#define D0F0x64_x24_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x24_OnDelay_OFFSET                              0
#define D0F0x64_x24_OnDelay_WIDTH                               4
#define D0F0x64_x24_OnDelay_MASK                                0xf
#define D0F0x64_x24_OffHysteresis_OFFSET                        4
#define D0F0x64_x24_OffHysteresis_WIDTH                         8
#define D0F0x64_x24_OffHysteresis_MASK                          0xff0
#define D0F0x64_x24_DivId_OFFSET                                12
#define D0F0x64_x24_DivId_WIDTH                                 3
#define D0F0x64_x24_DivId_MASK                                  0x7000
#define D0F0x64_x24_Reserved_19_15_OFFSET                       15
#define D0F0x64_x24_Reserved_19_15_WIDTH                        5
#define D0F0x64_x24_Reserved_19_15_MASK                         0xf8000
#define D0F0x64_x24_RampDisClk1_OFFSET                          20
#define D0F0x64_x24_RampDisClk1_WIDTH                           1
#define D0F0x64_x24_RampDisClk1_MASK                            0x100000
#define D0F0x64_x24_RampDisClk0_OFFSET                          21
#define D0F0x64_x24_RampDisClk0_WIDTH                           1
#define D0F0x64_x24_RampDisClk0_MASK                            0x200000
#define D0F0x64_x24_Reserved_26_22_OFFSET                       22
#define D0F0x64_x24_Reserved_26_22_WIDTH                        5
#define D0F0x64_x24_Reserved_26_22_MASK                         0x7c00000
#define D0F0x64_x24_Reserved_28_27_OFFSET                       27
#define D0F0x64_x24_Reserved_28_27_WIDTH                        2
#define D0F0x64_x24_Reserved_28_27_MASK                         0x18000000
#define D0F0x64_x24_SoftOverrideClk1_OFFSET                     29
#define D0F0x64_x24_SoftOverrideClk1_WIDTH                      1
#define D0F0x64_x24_SoftOverrideClk1_MASK                       0x20000000
#define D0F0x64_x24_SoftOverrideClk0_OFFSET                     30
#define D0F0x64_x24_SoftOverrideClk0_WIDTH                      1
#define D0F0x64_x24_SoftOverrideClk0_MASK                       0x40000000
#define D0F0x64_x24_Reserved_31_31_OFFSET                       31
#define D0F0x64_x24_Reserved_31_31_WIDTH                        1
#define D0F0x64_x24_Reserved_31_31_MASK                         0x80000000

/// D0F0x64_x24
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<
    UINT32                                            OffHysteresis:8 ; ///<Specifies the number of SCLK cycles that the hardware waits after the logic goes idle before gating the clocks specified by SoftOverrideClk[1:0].
    UINT32                                                    DivId:3 ; ///<
    UINT32                                           Reserved_19_15:5 ; ///<
    UINT32                                              RampDisClk1:1 ; ///<
    UINT32                                              RampDisClk0:1 ; ///<
    UINT32                                           Reserved_26_22:5 ; ///<
    UINT32                                           Reserved_28_27:2 ; ///<
    UINT32                                         SoftOverrideClk1:1 ; ///<
    UINT32                                         SoftOverrideClk0:1 ; ///<
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x24_STRUCT;

// **** D0F0x64_x4E Register Definition ****
// Address
#define D0F0x64_x4E_ADDRESS                                     0x4e

// Type
#define D0F0x64_x4E_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x4E_SmuReadData_OFFSET                          0
#define D0F0x64_x4E_SmuReadData_WIDTH                           32
#define D0F0x64_x4E_SmuReadData_MASK                            0xffffffff

/// D0F0x64_x4E
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              SmuReadData:32; ///<Returns the data read from the SMU.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x4E_STRUCT;

// **** D0F0x64_x55 Register Definition ****
// Address
#define D0F0x64_x55_ADDRESS                                     0x55

// Type
#define D0F0x64_x55_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x55_Reserved_2_0_OFFSET                         0
#define D0F0x64_x55_Reserved_2_0_WIDTH                          3
#define D0F0x64_x55_Reserved_2_0_MASK                           0x7
#define D0F0x64_x55_P2pDis_OFFSET                               3
#define D0F0x64_x55_P2pDis_WIDTH                                1
#define D0F0x64_x55_P2pDis_MASK                                 0x8
#define D0F0x64_x55_Reserved_15_4_OFFSET                        4
#define D0F0x64_x55_Reserved_15_4_WIDTH                         12
#define D0F0x64_x55_Reserved_15_4_MASK                          0xfff0
#define D0F0x64_x55_ExtDevPlug_OFFSET                           16
#define D0F0x64_x55_ExtDevPlug_WIDTH                            1
#define D0F0x64_x55_ExtDevPlug_MASK                             0x10000
#define D0F0x64_x55_ExtDevCrsEn_OFFSET                          17
#define D0F0x64_x55_ExtDevCrsEn_WIDTH                           1
#define D0F0x64_x55_ExtDevCrsEn_MASK                            0x20000
#define D0F0x64_x55_CrsEn_OFFSET                                18
#define D0F0x64_x55_CrsEn_WIDTH                                 1
#define D0F0x64_x55_CrsEn_MASK                                  0x40000
#define D0F0x64_x55_IntSelMode_OFFSET                           19
#define D0F0x64_x55_IntSelMode_WIDTH                            1
#define D0F0x64_x55_IntSelMode_MASK                             0x80000
#define D0F0x64_x55_SetPowEn_OFFSET                             20
#define D0F0x64_x55_SetPowEn_WIDTH                              1
#define D0F0x64_x55_SetPowEn_MASK                               0x100000
#define D0F0x64_x55_Reserved_31_21_OFFSET                       21
#define D0F0x64_x55_Reserved_31_21_WIDTH                        11
#define D0F0x64_x55_Reserved_31_21_MASK                         0xffe00000

/// D0F0x64_x55
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_2_0:3 ; ///<
    UINT32                                                   P2pDis:1 ; ///<
    UINT32                                            Reserved_15_4:12; ///<
    UINT32                                               ExtDevPlug:1 ; ///<
    UINT32                                              ExtDevCrsEn:1 ; ///<
    UINT32                                                    CrsEn:1 ; ///<
    UINT32                                               IntSelMode:1 ; ///<
    UINT32                                                 SetPowEn:1 ; ///<
    UINT32                                           Reserved_31_21:11; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x55_STRUCT;

// **** D0F0x64_x6A Register Definition ****
// Address
#define D0F0x64_x6A_ADDRESS                                     0x6a

// Type
#define D0F0x64_x6A_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x6A_VoltageForceEn_OFFSET                       0
#define D0F0x64_x6A_VoltageForceEn_WIDTH                        1
#define D0F0x64_x6A_VoltageForceEn_MASK                         0x1
#define D0F0x64_x6A_VoltageChangeEn_OFFSET                      1
#define D0F0x64_x6A_VoltageChangeEn_WIDTH                       1
#define D0F0x64_x6A_VoltageChangeEn_MASK                        0x2
#define D0F0x64_x6A_VoltageChangeReq_OFFSET                     2
#define D0F0x64_x6A_VoltageChangeReq_WIDTH                      1
#define D0F0x64_x6A_VoltageChangeReq_MASK                       0x4
#define D0F0x64_x6A_VoltageLevel_OFFSET                         3
#define D0F0x64_x6A_VoltageLevel_WIDTH                          2
#define D0F0x64_x6A_VoltageLevel_MASK                           0x18
#define D0F0x64_x6A_Reserved_31_5_OFFSET                        5
#define D0F0x64_x6A_Reserved_31_5_WIDTH                         27
#define D0F0x64_x6A_Reserved_31_5_MASK                          0xffffffe0

/// D0F0x64_x6A
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           VoltageForceEn:1 ; ///<If D0F0x64_x6A[VoltageChangeEn]==1, this field specifies whether changes to D0F0x64_x6A[VoltageChangeReq] cause forced voltage changes.
    UINT32                                          VoltageChangeEn:1 ; ///<Specifies whether changes to D0F0x64_x6A[VoltageChangeReq] causes voltage change requests.
    UINT32                                         VoltageChangeReq:1 ; ///<Software toggles this field to make VDDNB voltage requests.
    UINT32                                             VoltageLevel:2 ; ///<Specifies the VID requested when software toggles D0F0x64_x6A[VoltageChangeReq]. This field indexes into D18F3x15C as follows:
    UINT32                                            Reserved_31_5:27; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x6A_STRUCT;

// **** D0F0x64_x6B Register Definition ****
// Address
#define D0F0x64_x6B_ADDRESS                                     0x6b

// Type
#define D0F0x64_x6B_TYPE                                        TYPE_D0F0x64
// Field Data
#define D0F0x64_x6B_VoltageChangeAck_OFFSET                     0
#define D0F0x64_x6B_VoltageChangeAck_WIDTH                      1
#define D0F0x64_x6B_VoltageChangeAck_MASK                       0x1
#define D0F0x64_x6B_CurrentVoltageLevel_OFFSET                  1
#define D0F0x64_x6B_CurrentVoltageLevel_WIDTH                   2
#define D0F0x64_x6B_CurrentVoltageLevel_MASK                    0x6
#define D0F0x64_x6B_Reserved_31_3_OFFSET                        3
#define D0F0x64_x6B_Reserved_31_3_WIDTH                         29
#define D0F0x64_x6B_Reserved_31_3_MASK                          0xfffffff8

/// D0F0x64_x6B
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                         VoltageChangeAck:1 ; ///<Specifies whether the voltage change requested by D0F0x64_x6A[VoltageChangeReq] is complete.
    UINT32                                      CurrentVoltageLevel:2 ; ///<Specifies the current voltage level requested by D0F0x64_x6A. See D0F0x64_x6A[VoltageLevel]. To determine the current voltage level, software must poll on this field until two consecutive reads return the same value.
    UINT32                                            Reserved_31_3:29; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x64_x6B_STRUCT;

// **** D0F0x98_x49 Register Definition ****
// Address
#define D0F0x98_x49_ADDRESS                                     0x49

// Type
#define D0F0x98_x49_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x49_OnDelay_OFFSET                              0
#define D0F0x98_x49_OnDelay_WIDTH                               4
#define D0F0x98_x49_OnDelay_MASK                                0xf
#define D0F0x98_x49_OffHysteresis_OFFSET                        4
#define D0F0x98_x49_OffHysteresis_WIDTH                         8
#define D0F0x98_x49_OffHysteresis_MASK                          0xff0
#define D0F0x98_x49_DivId_OFFSET                                12
#define D0F0x98_x49_DivId_WIDTH                                 3
#define D0F0x98_x49_DivId_MASK                                  0x7000
#define D0F0x98_x49_RampDisableClk6_OFFSET                      15
#define D0F0x98_x49_RampDisableClk6_WIDTH                       1
#define D0F0x98_x49_RampDisableClk6_MASK                        0x8000
#define D0F0x98_x49_RampDisableClk5_OFFSET                      16
#define D0F0x98_x49_RampDisableClk5_WIDTH                       1
#define D0F0x98_x49_RampDisableClk5_MASK                        0x10000
#define D0F0x98_x49_RampDisableClk4_OFFSET                      17
#define D0F0x98_x49_RampDisableClk4_WIDTH                       1
#define D0F0x98_x49_RampDisableClk4_MASK                        0x20000
#define D0F0x98_x49_RampDisableClk3_OFFSET                      18
#define D0F0x98_x49_RampDisableClk3_WIDTH                       1
#define D0F0x98_x49_RampDisableClk3_MASK                        0x40000
#define D0F0x98_x49_RampDisableClk2_OFFSET                      19
#define D0F0x98_x49_RampDisableClk2_WIDTH                       1
#define D0F0x98_x49_RampDisableClk2_MASK                        0x80000
#define D0F0x98_x49_RampDisableClk1_OFFSET                      20
#define D0F0x98_x49_RampDisableClk1_WIDTH                       1
#define D0F0x98_x49_RampDisableClk1_MASK                        0x100000
#define D0F0x98_x49_RampDisableClk0_OFFSET                      21
#define D0F0x98_x49_RampDisableClk0_WIDTH                       1
#define D0F0x98_x49_RampDisableClk0_MASK                        0x200000
#define D0F0x98_x49_Reserved_23_22_OFFSET                       22
#define D0F0x98_x49_Reserved_23_22_WIDTH                        2
#define D0F0x98_x49_Reserved_23_22_MASK                         0xc00000
#define D0F0x98_x49_SoftOverrideClk6_OFFSET                     24
#define D0F0x98_x49_SoftOverrideClk6_WIDTH                      1
#define D0F0x98_x49_SoftOverrideClk6_MASK                       0x1000000
#define D0F0x98_x49_SoftOverrideClk5_OFFSET                     25
#define D0F0x98_x49_SoftOverrideClk5_WIDTH                      1
#define D0F0x98_x49_SoftOverrideClk5_MASK                       0x2000000
#define D0F0x98_x49_SoftOverrideClk4_OFFSET                     26
#define D0F0x98_x49_SoftOverrideClk4_WIDTH                      1
#define D0F0x98_x49_SoftOverrideClk4_MASK                       0x4000000
#define D0F0x98_x49_SoftOverrideClk3_OFFSET                     27
#define D0F0x98_x49_SoftOverrideClk3_WIDTH                      1
#define D0F0x98_x49_SoftOverrideClk3_MASK                       0x8000000
#define D0F0x98_x49_SoftOverrideClk2_OFFSET                     28
#define D0F0x98_x49_SoftOverrideClk2_WIDTH                      1
#define D0F0x98_x49_SoftOverrideClk2_MASK                       0x10000000
#define D0F0x98_x49_SoftOverrideClk1_OFFSET                     29
#define D0F0x98_x49_SoftOverrideClk1_WIDTH                      1
#define D0F0x98_x49_SoftOverrideClk1_MASK                       0x20000000
#define D0F0x98_x49_SoftOverrideClk0_OFFSET                     30
#define D0F0x98_x49_SoftOverrideClk0_WIDTH                      1
#define D0F0x98_x49_SoftOverrideClk0_MASK                       0x40000000
#define D0F0x98_x49_Reserved_31_31_OFFSET                       31
#define D0F0x98_x49_Reserved_31_31_WIDTH                        1
#define D0F0x98_x49_Reserved_31_31_MASK                         0x80000000

/// D0F0x98_x49
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<Specifies the delay for turning on local clock gating.
    UINT32                                            OffHysteresis:8 ; ///<Specifies the number of LCLK cycles that the hardware waits after the logic goes idle before gating off the clocks specified by SoftOverrideClk[6:0].
    UINT32                                                    DivId:3 ; ///<Specifies the divider applied when the clock is turned off.
    UINT32                                          RampDisableClk6:1 ; ///<
    UINT32                                          RampDisableClk5:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk4:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk3:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk2:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk1:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk0:1 ; ///<See: RampDisableClk6.
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                         SoftOverrideClk6:1 ; ///<
    UINT32                                         SoftOverrideClk5:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk4:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk3:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk2:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk1:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk0:1 ; ///<See: SoftOverrideClk6.
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x49_STRUCT;

// **** D0F0x98_x4A Register Definition ****
// Address
#define D0F0x98_x4A_ADDRESS                                     0x4a

// Type
#define D0F0x98_x4A_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x4A_OnDelay_OFFSET                              0
#define D0F0x98_x4A_OnDelay_WIDTH                               4
#define D0F0x98_x4A_OnDelay_MASK                                0xf
#define D0F0x98_x4A_OffHysteresis_OFFSET                        4
#define D0F0x98_x4A_OffHysteresis_WIDTH                         8
#define D0F0x98_x4A_OffHysteresis_MASK                          0xff0
#define D0F0x98_x4A_DivId_OFFSET                                12
#define D0F0x98_x4A_DivId_WIDTH                                 3
#define D0F0x98_x4A_DivId_MASK                                  0x7000
#define D0F0x98_x4A_RampDisableClk6_OFFSET                      15
#define D0F0x98_x4A_RampDisableClk6_WIDTH                       1
#define D0F0x98_x4A_RampDisableClk6_MASK                        0x8000
#define D0F0x98_x4A_RampDisableClk5_OFFSET                      16
#define D0F0x98_x4A_RampDisableClk5_WIDTH                       1
#define D0F0x98_x4A_RampDisableClk5_MASK                        0x10000
#define D0F0x98_x4A_RampDisableClk4_OFFSET                      17
#define D0F0x98_x4A_RampDisableClk4_WIDTH                       1
#define D0F0x98_x4A_RampDisableClk4_MASK                        0x20000
#define D0F0x98_x4A_RampDisableClk3_OFFSET                      18
#define D0F0x98_x4A_RampDisableClk3_WIDTH                       1
#define D0F0x98_x4A_RampDisableClk3_MASK                        0x40000
#define D0F0x98_x4A_RampDisableClk2_OFFSET                      19
#define D0F0x98_x4A_RampDisableClk2_WIDTH                       1
#define D0F0x98_x4A_RampDisableClk2_MASK                        0x80000
#define D0F0x98_x4A_RampDisableClk1_OFFSET                      20
#define D0F0x98_x4A_RampDisableClk1_WIDTH                       1
#define D0F0x98_x4A_RampDisableClk1_MASK                        0x100000
#define D0F0x98_x4A_RampDisableClk0_OFFSET                      21
#define D0F0x98_x4A_RampDisableClk0_WIDTH                       1
#define D0F0x98_x4A_RampDisableClk0_MASK                        0x200000
#define D0F0x98_x4A_Reserved_23_22_OFFSET                       22
#define D0F0x98_x4A_Reserved_23_22_WIDTH                        2
#define D0F0x98_x4A_Reserved_23_22_MASK                         0xc00000
#define D0F0x98_x4A_SoftOverrideClk6_OFFSET                     24
#define D0F0x98_x4A_SoftOverrideClk6_WIDTH                      1
#define D0F0x98_x4A_SoftOverrideClk6_MASK                       0x1000000
#define D0F0x98_x4A_SoftOverrideClk5_OFFSET                     25
#define D0F0x98_x4A_SoftOverrideClk5_WIDTH                      1
#define D0F0x98_x4A_SoftOverrideClk5_MASK                       0x2000000
#define D0F0x98_x4A_SoftOverrideClk4_OFFSET                     26
#define D0F0x98_x4A_SoftOverrideClk4_WIDTH                      1
#define D0F0x98_x4A_SoftOverrideClk4_MASK                       0x4000000
#define D0F0x98_x4A_SoftOverrideClk3_OFFSET                     27
#define D0F0x98_x4A_SoftOverrideClk3_WIDTH                      1
#define D0F0x98_x4A_SoftOverrideClk3_MASK                       0x8000000
#define D0F0x98_x4A_SoftOverrideClk2_OFFSET                     28
#define D0F0x98_x4A_SoftOverrideClk2_WIDTH                      1
#define D0F0x98_x4A_SoftOverrideClk2_MASK                       0x10000000
#define D0F0x98_x4A_SoftOverrideClk1_OFFSET                     29
#define D0F0x98_x4A_SoftOverrideClk1_WIDTH                      1
#define D0F0x98_x4A_SoftOverrideClk1_MASK                       0x20000000
#define D0F0x98_x4A_SoftOverrideClk0_OFFSET                     30
#define D0F0x98_x4A_SoftOverrideClk0_WIDTH                      1
#define D0F0x98_x4A_SoftOverrideClk0_MASK                       0x40000000
#define D0F0x98_x4A_Reserved_31_31_OFFSET                       31
#define D0F0x98_x4A_Reserved_31_31_WIDTH                        1
#define D0F0x98_x4A_Reserved_31_31_MASK                         0x80000000

/// D0F0x98_x4A
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<Specifies the delay for turning on local clock gating.
    UINT32                                            OffHysteresis:8 ; ///<Specifies the number of LCLK cycles that the hardware waits after the logic goes idle before gating off the clocks specified by SoftOverrideClk[6:0].
    UINT32                                                    DivId:3 ; ///<Specifies the divider applied when the clock is turned off.
    UINT32                                          RampDisableClk6:1 ; ///<
    UINT32                                          RampDisableClk5:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk4:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk3:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk2:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk1:1 ; ///<See: RampDisableClk6.
    UINT32                                          RampDisableClk0:1 ; ///<See: RampDisableClk6.
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                         SoftOverrideClk6:1 ; ///<
    UINT32                                         SoftOverrideClk5:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk4:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk3:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk2:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk1:1 ; ///<See: SoftOverrideClk6.
    UINT32                                         SoftOverrideClk0:1 ; ///<See: SoftOverrideClk6.
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x4A_STRUCT;

// **** D0F0x98_x4B Register Definition ****
// Address
#define D0F0x98_x4B_ADDRESS                                     0x4b

// Type
#define D0F0x98_x4B_TYPE                                        TYPE_D0F0x98
// Field Data
#define D0F0x98_x4B_OnDelay_OFFSET                              0
#define D0F0x98_x4B_OnDelay_WIDTH                               4
#define D0F0x98_x4B_OnDelay_MASK                                0xf
#define D0F0x98_x4B_OffHysteresis_OFFSET                        4
#define D0F0x98_x4B_OffHysteresis_WIDTH                         8
#define D0F0x98_x4B_OffHysteresis_MASK                          0xff0
#define D0F0x98_x4B_DivId_OFFSET                                12
#define D0F0x98_x4B_DivId_WIDTH                                 3
#define D0F0x98_x4B_DivId_MASK                                  0x7000
#define D0F0x98_x4B_Reserved_20_15_OFFSET                       15
#define D0F0x98_x4B_Reserved_20_15_WIDTH                        6
#define D0F0x98_x4B_Reserved_20_15_MASK                         0x1f8000
#define D0F0x98_x4B_RampDisableClk_OFFSET                       21
#define D0F0x98_x4B_RampDisableClk_WIDTH                        1
#define D0F0x98_x4B_RampDisableClk_MASK                         0x200000
#define D0F0x98_x4B_Reserved_29_22_OFFSET                       22
#define D0F0x98_x4B_Reserved_29_22_WIDTH                        8
#define D0F0x98_x4B_Reserved_29_22_MASK                         0x3fc00000
#define D0F0x98_x4B_SoftOverrideClk_OFFSET                      30
#define D0F0x98_x4B_SoftOverrideClk_WIDTH                       1
#define D0F0x98_x4B_SoftOverrideClk_MASK                        0x40000000
#define D0F0x98_x4B_Reserved_31_31_OFFSET                       31
#define D0F0x98_x4B_Reserved_31_31_WIDTH                        1
#define D0F0x98_x4B_Reserved_31_31_MASK                         0x80000000

/// D0F0x98_x4B
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<Specifies the delay for turning on local clock gating.
    UINT32                                            OffHysteresis:8 ; ///<Specifies the number of SCLK cycles that the hardware waits after the logic goes idle before gating off the clocks specified by SoftOverrideClk.
    UINT32                                                    DivId:3 ; ///<Specifies the divider applied when the clock is turned off.Specifies the divider applied when the clock is turned off. See: D0F0x98_x4[A:9][DivId].
    UINT32                                           Reserved_20_15:6 ; ///<
    UINT32                                           RampDisableClk:1 ; ///<
    UINT32                                           Reserved_29_22:8 ; ///<
    UINT32                                          SoftOverrideClk:1 ; ///<
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0x98_x4B_STRUCT;

// **** D0F0xE4_x0108_8071 Register Definition ****
// Address
#define D0F0xE4_x0108_8071_ADDRESS                              0x1088071

// Type
#define D0F0xE4_x0108_8071_TYPE                                 TYPE_D0F0xE4
// Field Data
#define D0F0xE4_x0108_8071_RxAdjust_OFFSET                      0
#define D0F0xE4_x0108_8071_RxAdjust_WIDTH                       3
#define D0F0xE4_x0108_8071_RxAdjust_MASK                        0x7
#define D0F0xE4_x0108_8071_RxBiasHigh_OFFSET                    3
#define D0F0xE4_x0108_8071_RxBiasHigh_WIDTH                     1
#define D0F0xE4_x0108_8071_RxBiasHigh_MASK                      0x8
#define D0F0xE4_x0108_8071_ContAfterRxDect_OFFSET               4
#define D0F0xE4_x0108_8071_ContAfterRxDect_WIDTH                1
#define D0F0xE4_x0108_8071_ContAfterRxDect_MASK                 0x10
#define D0F0xE4_x0108_8071_Reserved_5_5_OFFSET                  5
#define D0F0xE4_x0108_8071_Reserved_5_5_WIDTH                   1
#define D0F0xE4_x0108_8071_Reserved_5_5_MASK                    0x20
#define D0F0xE4_x0108_8071_Suspend_OFFSET                       6
#define D0F0xE4_x0108_8071_Suspend_WIDTH                        1
#define D0F0xE4_x0108_8071_Suspend_MASK                         0x40
#define D0F0xE4_x0108_8071_ForceRst_OFFSET                      7
#define D0F0xE4_x0108_8071_ForceRst_WIDTH                       1
#define D0F0xE4_x0108_8071_ForceRst_MASK                        0x80
#define D0F0xE4_x0108_8071_LowerRxAdjThresh_OFFSET              8
#define D0F0xE4_x0108_8071_LowerRxAdjThresh_WIDTH               4
#define D0F0xE4_x0108_8071_LowerRxAdjThresh_MASK                0xf00
#define D0F0xE4_x0108_8071_LowerRxAdj_OFFSET                    12
#define D0F0xE4_x0108_8071_LowerRxAdj_WIDTH                     1
#define D0F0xE4_x0108_8071_LowerRxAdj_MASK                      0x1000
#define D0F0xE4_x0108_8071_UpperRxAdjThresh_OFFSET              13
#define D0F0xE4_x0108_8071_UpperRxAdjThresh_WIDTH               4
#define D0F0xE4_x0108_8071_UpperRxAdjThresh_MASK                0x1e000
#define D0F0xE4_x0108_8071_UpperRxAdj_OFFSET                    17
#define D0F0xE4_x0108_8071_UpperRxAdj_WIDTH                     1
#define D0F0xE4_x0108_8071_UpperRxAdj_MASK                      0x20000
#define D0F0xE4_x0108_8071_RxImpLocked_OFFSET                   18
#define D0F0xE4_x0108_8071_RxImpLocked_WIDTH                    1
#define D0F0xE4_x0108_8071_RxImpLocked_MASK                     0x40000
#define D0F0xE4_x0108_8071_RxImpReadBackSel_OFFSET              19
#define D0F0xE4_x0108_8071_RxImpReadBackSel_WIDTH               1
#define D0F0xE4_x0108_8071_RxImpReadBackSel_MASK                0x80000
#define D0F0xE4_x0108_8071_RxImpReadBack_OFFSET                 20
#define D0F0xE4_x0108_8071_RxImpReadBack_WIDTH                  4
#define D0F0xE4_x0108_8071_RxImpReadBack_MASK                   0xf00000
#define D0F0xE4_x0108_8071_RxImpValue_OFFSET                    24
#define D0F0xE4_x0108_8071_RxImpValue_WIDTH                     4
#define D0F0xE4_x0108_8071_RxImpValue_MASK                      0xf000000
#define D0F0xE4_x0108_8071_RxCmpAmbig_OFFSET                    28
#define D0F0xE4_x0108_8071_RxCmpAmbig_WIDTH                     1
#define D0F0xE4_x0108_8071_RxCmpAmbig_MASK                      0x10000000
#define D0F0xE4_x0108_8071_CalDone_OFFSET                       29
#define D0F0xE4_x0108_8071_CalDone_WIDTH                        1
#define D0F0xE4_x0108_8071_CalDone_MASK                         0x20000000
#define D0F0xE4_x0108_8071_Reserved_30_30_OFFSET                30
#define D0F0xE4_x0108_8071_Reserved_30_30_WIDTH                 1
#define D0F0xE4_x0108_8071_Reserved_30_30_MASK                  0x40000000
#define D0F0xE4_x0108_8071_RxImpOverride_OFFSET                 31
#define D0F0xE4_x0108_8071_RxImpOverride_WIDTH                  1
#define D0F0xE4_x0108_8071_RxImpOverride_MASK                   0x80000000

/// D0F0xE4_x0108_8071
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 RxAdjust:3 ; ///<The signed value of RxAdjust is added to the receiver (NMOS) impedance value before it is sent to the phy. IF (D0F0xE4_x0108_8071[ContAfterRxDect]==0) THEN The value programmed into RxAdjust is only applied between reset and link training. ENDIF. See 2.12.3.2.2 [Link Configuration and Core Initialization].
    UINT32                                               RxBiasHigh:1 ; ///<Affects impedance value when TESTOUT makes a 1 to 0 or a 1 to 0 transition.e. the value which keeps TESTOUT high).
    UINT32                                          ContAfterRxDect:1 ; ///<
    UINT32                                             Reserved_5_5:1 ; ///<
    UINT32                                                  Suspend:1 ; ///< See also: ForceRst.
    UINT32                                                 ForceRst:1 ; ///< Before changing any impedance controller register values, either ForceRst or Suspend must be programmed to 1.
    UINT32                                         LowerRxAdjThresh:4 ; ///<See: LowerRxAdj.
    UINT32                                               LowerRxAdj:1 ; ///<When the impedance value falls below the threshold specified by LowerRxAdjThresh, the receiver (NMOS) impedance value is adjusted as follows before being sent to the phy: 1=Increment. Note: This adjustment is in addition to RxAdjust.
    UINT32                                         UpperRxAdjThresh:4 ; ///<See: UpperRxAdj.
    UINT32                                               UpperRxAdj:1 ; ///<When the impedance value exceeds the threshold specified by UpperRxAdjThresh, the receiver (NMOS) impedance value is adjusted as follows before being sent to the phy: 1=Increment. Note: This adjustment is in addition to RxAdjust.
    UINT32                                              RxImpLocked:1 ; ///<
    UINT32                                         RxImpReadBackSel:1 ; ///<Selects the impedance value that appears in RxImpReadBack.
    UINT32                                            RxImpReadBack:4 ; ///<The present value of the receiver (NMOS) impedance value. See also: RxImpReadBackSel.
    UINT32                                               RxImpValue:4 ; ///<When RxImpOverride=1, this value is forwarded to the phy for its receiver (NMOS) impedance setting.
    UINT32                                               RxCmpAmbig:1 ; ///<
    UINT32                                                  CalDone:1 ; ///<
    UINT32                                           Reserved_30_30:1 ; ///<
    UINT32                                            RxImpOverride:1 ; ///<When RxImpOverride=1, this value is forwarded to the phy for its receiver (NMOS) impedance setting.See: RxImpValue.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_x0108_8071_STRUCT;

// **** D0F0xE4_x0108_8072 Register Definition ****
// Address
#define D0F0xE4_x0108_8072_ADDRESS                              0x1088072

// Type
#define D0F0xE4_x0108_8072_TYPE                                 TYPE_D0F0xE4
// Field Data
#define D0F0xE4_x0108_8072_TxAdjust_OFFSET                      0
#define D0F0xE4_x0108_8072_TxAdjust_WIDTH                       3
#define D0F0xE4_x0108_8072_TxAdjust_MASK                        0x7
#define D0F0xE4_x0108_8072_TxBiasHigh_OFFSET                    3
#define D0F0xE4_x0108_8072_TxBiasHigh_WIDTH                     1
#define D0F0xE4_x0108_8072_TxBiasHigh_MASK                      0x8
#define D0F0xE4_x0108_8072_Reserved_7_4_OFFSET                  4
#define D0F0xE4_x0108_8072_Reserved_7_4_WIDTH                   4
#define D0F0xE4_x0108_8072_Reserved_7_4_MASK                    0xf0
#define D0F0xE4_x0108_8072_LowerTxAdjThresh_OFFSET              8
#define D0F0xE4_x0108_8072_LowerTxAdjThresh_WIDTH               4
#define D0F0xE4_x0108_8072_LowerTxAdjThresh_MASK                0xf00
#define D0F0xE4_x0108_8072_LowerTxAdj_OFFSET                    12
#define D0F0xE4_x0108_8072_LowerTxAdj_WIDTH                     1
#define D0F0xE4_x0108_8072_LowerTxAdj_MASK                      0x1000
#define D0F0xE4_x0108_8072_UpperTxAdjThresh_OFFSET              13
#define D0F0xE4_x0108_8072_UpperTxAdjThresh_WIDTH               4
#define D0F0xE4_x0108_8072_UpperTxAdjThresh_MASK                0x1e000
#define D0F0xE4_x0108_8072_UpperTxAdj_OFFSET                    17
#define D0F0xE4_x0108_8072_UpperTxAdj_WIDTH                     1
#define D0F0xE4_x0108_8072_UpperTxAdj_MASK                      0x20000
#define D0F0xE4_x0108_8072_TxImpLocked_OFFSET                   18
#define D0F0xE4_x0108_8072_TxImpLocked_WIDTH                    1
#define D0F0xE4_x0108_8072_TxImpLocked_MASK                     0x40000
#define D0F0xE4_x0108_8072_TxImpReadBackSel_OFFSET              19
#define D0F0xE4_x0108_8072_TxImpReadBackSel_WIDTH               1
#define D0F0xE4_x0108_8072_TxImpReadBackSel_MASK                0x80000
#define D0F0xE4_x0108_8072_TxImpReadBack_OFFSET                 20
#define D0F0xE4_x0108_8072_TxImpReadBack_WIDTH                  4
#define D0F0xE4_x0108_8072_TxImpReadBack_MASK                   0xf00000
#define D0F0xE4_x0108_8072_TxImpValue_OFFSET                    24
#define D0F0xE4_x0108_8072_TxImpValue_WIDTH                     4
#define D0F0xE4_x0108_8072_TxImpValue_MASK                      0xf000000
#define D0F0xE4_x0108_8072_TxCmpAmbig_OFFSET                    28
#define D0F0xE4_x0108_8072_TxCmpAmbig_WIDTH                     1
#define D0F0xE4_x0108_8072_TxCmpAmbig_MASK                      0x10000000
#define D0F0xE4_x0108_8072_Reserved_30_29_OFFSET                29
#define D0F0xE4_x0108_8072_Reserved_30_29_WIDTH                 2
#define D0F0xE4_x0108_8072_Reserved_30_29_MASK                  0x60000000
#define D0F0xE4_x0108_8072_TxImpOverride_OFFSET                 31
#define D0F0xE4_x0108_8072_TxImpOverride_WIDTH                  1
#define D0F0xE4_x0108_8072_TxImpOverride_MASK                   0x80000000

/// D0F0xE4_x0108_8072
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 TxAdjust:3 ; ///<The signed value of TxAdjust is added to the transmitter (PMOS) impedance value before it is sent to the phy. IF (D0F0xE4_x0108_8071[ContAfterRxDect]==0) THEN The value programmed into TxAdjust is only applied between reset and link training. ENDIF. See 2.12.3.2.2 [Link Configuration and Core Initialization].
    UINT32                                               TxBiasHigh:1 ; ///<Affects impedance value when DUMMYOUT makes a 1 to 0 or a 1 to 0 transition.e. the value which keeps DUMMYOUT high).
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                         LowerTxAdjThresh:4 ; ///<See: LowerTxAdj.
    UINT32                                               LowerTxAdj:1 ; ///<When the impedance value falls below the threshold specified by LowerTxAdjThresh, the transmitter (NMOS) impedance value is adjusted as follows before being sent to the phy: 1=Increment. Note: This adjustment is in addition to TxAdjust.
    UINT32                                         UpperTxAdjThresh:4 ; ///<See: UpperTxAdj.
    UINT32                                               UpperTxAdj:1 ; ///<When the impedance value exceeds the threshold specified by UpperRxAdjThresh, the transmitter (PMOS) impedance value is adjusted as follows before being sent to the phy: 1=Increment. Note: This adjustment is in addition to TxAdjust.
    UINT32                                              TxImpLocked:1 ; ///<
    UINT32                                         TxImpReadBackSel:1 ; ///<Selects the impedance value that appears in TxImpReadBack.
    UINT32                                            TxImpReadBack:4 ; ///<The present value of the transmitter (PMOS) impedance value. See also: TxImpReadBackSel.
    UINT32                                               TxImpValue:4 ; ///<When TxImpOverride=1, this value is forwarded to the phy for its transmitter (PMOS) impedance setting.
    UINT32                                               TxCmpAmbig:1 ; ///<
    UINT32                                           Reserved_30_29:2 ; ///<
    UINT32                                            TxImpOverride:1 ; ///<When TxImpOverride=1, this value is forwarded to the phy for its transmitter (PMOS) impedance setting.See: TxImpValue.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_x0108_8072_STRUCT;

// **** D0F0xE4_CORE_0002 Register Definition ****
// Address
#define D0F0xE4_CORE_0002_ADDRESS                               0x2

// Type
#define D0F0xE4_CORE_0002_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_0002_HwDebug_0__OFFSET                     0
#define D0F0xE4_CORE_0002_HwDebug_0__WIDTH                      1
#define D0F0xE4_CORE_0002_HwDebug_0__MASK                       0x1
#define D0F0xE4_CORE_0002_HwDebug_14_1__OFFSET                  1
#define D0F0xE4_CORE_0002_HwDebug_14_1__WIDTH                   14
#define D0F0xE4_CORE_0002_HwDebug_14_1__MASK                    0x7ffe
#define D0F0xE4_CORE_0002_HwDebug_15__OFFSET                    15
#define D0F0xE4_CORE_0002_HwDebug_15__WIDTH                     1
#define D0F0xE4_CORE_0002_HwDebug_15__MASK                      0x8000
#define D0F0xE4_CORE_0002_Reserved_31_16_OFFSET                 16
#define D0F0xE4_CORE_0002_Reserved_31_16_WIDTH                  16
#define D0F0xE4_CORE_0002_Reserved_31_16_MASK                   0xffff0000

/// D0F0xE4_CORE_0002
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               HwDebug_0_:1 ; ///<
    UINT32                                            HwDebug_14_1_:14; ///<
    UINT32                                              HwDebug_15_:1 ; ///<
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_0002_STRUCT;

// **** D0F0xE4_CORE_0011 Register Definition ****
// Address
#define D0F0xE4_CORE_0011_ADDRESS                               0x11

// Type
#define D0F0xE4_CORE_0011_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_CORE_0011_DynClkLatency_OFFSET                  0
#define D0F0xE4_CORE_0011_DynClkLatency_WIDTH                   4
#define D0F0xE4_CORE_0011_DynClkLatency_MASK                    0xf
#define D0F0xE4_CORE_0011_Reserved_15_4_OFFSET                  4
#define D0F0xE4_CORE_0011_Reserved_15_4_WIDTH                   12
#define D0F0xE4_CORE_0011_Reserved_15_4_MASK                    0xfff0
#define D0F0xE4_CORE_0011_CiMaxPayloadSizeMode_OFFSET           16
#define D0F0xE4_CORE_0011_CiMaxPayloadSizeMode_WIDTH            1
#define D0F0xE4_CORE_0011_CiMaxPayloadSizeMode_MASK             0x10000
#define D0F0xE4_CORE_0011_CiPrivMaxPayloadSize_OFFSET           17
#define D0F0xE4_CORE_0011_CiPrivMaxPayloadSize_WIDTH            3
#define D0F0xE4_CORE_0011_CiPrivMaxPayloadSize_MASK             0xe0000
#define D0F0xE4_CORE_0011_CiMaxReadRequestSizeMode_OFFSET       20
#define D0F0xE4_CORE_0011_CiMaxReadRequestSizeMode_WIDTH        1
#define D0F0xE4_CORE_0011_CiMaxReadRequestSizeMode_MASK         0x100000
#define D0F0xE4_CORE_0011_CiPrivMaxReadRequestSize_OFFSET       21
#define D0F0xE4_CORE_0011_CiPrivMaxReadRequestSize_WIDTH        3
#define D0F0xE4_CORE_0011_CiPrivMaxReadRequestSize_MASK         0xe00000
#define D0F0xE4_CORE_0011_CiMaxReadSafeMode_OFFSET              24
#define D0F0xE4_CORE_0011_CiMaxReadSafeMode_WIDTH               1
#define D0F0xE4_CORE_0011_CiMaxReadSafeMode_MASK                0x1000000
#define D0F0xE4_CORE_0011_CiExtendedTagEnOverride_OFFSET        25
#define D0F0xE4_CORE_0011_CiExtendedTagEnOverride_WIDTH         1
#define D0F0xE4_CORE_0011_CiExtendedTagEnOverride_MASK          0x2000000
#define D0F0xE4_CORE_0011_Reserved_31_26_OFFSET                 26
#define D0F0xE4_CORE_0011_Reserved_31_26_WIDTH                  6
#define D0F0xE4_CORE_0011_Reserved_31_26_MASK                   0xfc000000

/// D0F0xE4_CORE_0011
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            DynClkLatency:4 ; ///<Specifies the number of PCIe transmit clock (TXCLK1x) cycles that the hardware waits after the logic goes idle before the clocks are gated off. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                            Reserved_15_4:12; ///<
    UINT32                                     CiMaxPayloadSizeMode:1 ; ///<
    UINT32                                     CiPrivMaxPayloadSize:3 ; ///<Specifies the maximum payload size when CiMaxPayloadSizeMode=1.
    UINT32                                 CiMaxReadRequestSizeMode:1 ; ///<
    UINT32                                 CiPrivMaxReadRequestSize:3 ; ///<Specifies the maximum read request size when CiMaxReadRequestSizeMode=1.
    UINT32                                        CiMaxReadSafeMode:1 ; ///<
    UINT32                                  CiExtendedTagEnOverride:1 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_CORE_0011_STRUCT;

// **** D0F0xE4_PHY_4004 Register Definition ****
// Address
#define D0F0xE4_PHY_4004_ADDRESS                                0x4004

// Type
#define D0F0xE4_PHY_4004_TYPE                                   TYPE_D0F0xE4
// Field Data
#define D0F0xE4_PHY_4004_PllBiasGenPdnbOvrdEn_OFFSET            0
#define D0F0xE4_PHY_4004_PllBiasGenPdnbOvrdEn_WIDTH             1
#define D0F0xE4_PHY_4004_PllBiasGenPdnbOvrdEn_MASK              0x1
#define D0F0xE4_PHY_4004_PllBiasGenPdnbOvrdVal_OFFSET           1
#define D0F0xE4_PHY_4004_PllBiasGenPdnbOvrdVal_WIDTH            1
#define D0F0xE4_PHY_4004_PllBiasGenPdnbOvrdVal_MASK             0x2
#define D0F0xE4_PHY_4004_Reserved_31_2_OFFSET                   2
#define D0F0xE4_PHY_4004_Reserved_31_2_WIDTH                    30
#define D0F0xE4_PHY_4004_Reserved_31_2_MASK                     0xfffffffc

/// D0F0xE4_PHY_4004
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                     PllBiasGenPdnbOvrdEn:1 ; ///<
    UINT32                                    PllBiasGenPdnbOvrdVal:1 ; ///<BOZO: More detail needed.
    UINT32                                            Reserved_31_2:30; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_PHY_4004_STRUCT;

// **** D0F0xE4_PIF_0010 Register Definition ****
// Address
#define D0F0xE4_PIF_0010_ADDRESS                                0x10

// Type
#define D0F0xE4_PIF_0010_TYPE                                   TYPE_D0F0xE4
// Field Data
#define D0F0xE4_PIF_0010_SerialCfgEnable_OFFSET                 0
#define D0F0xE4_PIF_0010_SerialCfgEnable_WIDTH                  1
#define D0F0xE4_PIF_0010_SerialCfgEnable_MASK                   0x1
#define D0F0xE4_PIF_0010_DaFifoReset0_OFFSET                    1
#define D0F0xE4_PIF_0010_DaFifoReset0_WIDTH                     1
#define D0F0xE4_PIF_0010_DaFifoReset0_MASK                      0x2
#define D0F0xE4_PIF_0010_PhyCrEnMode_OFFSET                     2
#define D0F0xE4_PIF_0010_PhyCrEnMode_WIDTH                      1
#define D0F0xE4_PIF_0010_PhyCrEnMode_MASK                       0x4
#define D0F0xE4_PIF_0010_PhyCmdCrEnMode_OFFSET                  3
#define D0F0xE4_PIF_0010_PhyCmdCrEnMode_WIDTH                   1
#define D0F0xE4_PIF_0010_PhyCmdCrEnMode_MASK                    0x8
#define D0F0xE4_PIF_0010_EiDetCycleMode_OFFSET                  4
#define D0F0xE4_PIF_0010_EiDetCycleMode_WIDTH                   1
#define D0F0xE4_PIF_0010_EiDetCycleMode_MASK                    0x10
#define D0F0xE4_PIF_0010_DaFifoReset1_OFFSET                    5
#define D0F0xE4_PIF_0010_DaFifoReset1_WIDTH                     1
#define D0F0xE4_PIF_0010_DaFifoReset1_MASK                      0x20
#define D0F0xE4_PIF_0010_RxDetectFifoResetMode_OFFSET           6
#define D0F0xE4_PIF_0010_RxDetectFifoResetMode_WIDTH            1
#define D0F0xE4_PIF_0010_RxDetectFifoResetMode_MASK             0x40
#define D0F0xE4_PIF_0010_RxDetectTxPwrMode_OFFSET               7
#define D0F0xE4_PIF_0010_RxDetectTxPwrMode_WIDTH                1
#define D0F0xE4_PIF_0010_RxDetectTxPwrMode_MASK                 0x80
#define D0F0xE4_PIF_0010_DivInitMode_OFFSET                     8
#define D0F0xE4_PIF_0010_DivInitMode_WIDTH                      1
#define D0F0xE4_PIF_0010_DivInitMode_MASK                       0x100
#define D0F0xE4_PIF_0010_TxBufPtReset0_OFFSET                   9
#define D0F0xE4_PIF_0010_TxBufPtReset0_WIDTH                    1
#define D0F0xE4_PIF_0010_TxBufPtReset0_MASK                     0x200
#define D0F0xE4_PIF_0010_TxBufPtReset1_OFFSET                   10
#define D0F0xE4_PIF_0010_TxBufPtReset1_WIDTH                    1
#define D0F0xE4_PIF_0010_TxBufPtReset1_MASK                     0x400
#define D0F0xE4_PIF_0010_Reserved_15_11_OFFSET                  11
#define D0F0xE4_PIF_0010_Reserved_15_11_WIDTH                   5
#define D0F0xE4_PIF_0010_Reserved_15_11_MASK                    0xf800
#define D0F0xE4_PIF_0010_TxGndTime_OFFSET                       16
#define D0F0xE4_PIF_0010_TxGndTime_WIDTH                        1
#define D0F0xE4_PIF_0010_TxGndTime_MASK                         0x10000
#define D0F0xE4_PIF_0010_Ls2ExitTime_OFFSET                     17
#define D0F0xE4_PIF_0010_Ls2ExitTime_WIDTH                      3
#define D0F0xE4_PIF_0010_Ls2ExitTime_MASK                       0xe0000
#define D0F0xE4_PIF_0010_EiCycleOffTime_OFFSET                  20
#define D0F0xE4_PIF_0010_EiCycleOffTime_WIDTH                   3
#define D0F0xE4_PIF_0010_EiCycleOffTime_MASK                    0x700000
#define D0F0xE4_PIF_0010_ExitLosInitDis_OFFSET                  23
#define D0F0xE4_PIF_0010_ExitLosInitDis_WIDTH                   1
#define D0F0xE4_PIF_0010_ExitLosInitDis_MASK                    0x800000
#define D0F0xE4_PIF_0010_RxenGater_OFFSET                       24
#define D0F0xE4_PIF_0010_RxenGater_WIDTH                        4
#define D0F0xE4_PIF_0010_RxenGater_MASK                         0xf000000
#define D0F0xE4_PIF_0010_Reserved_31_28_OFFSET                  28
#define D0F0xE4_PIF_0010_Reserved_31_28_WIDTH                   4
#define D0F0xE4_PIF_0010_Reserved_31_28_MASK                    0xf0000000

/// D0F0xE4_PIF_0010
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          SerialCfgEnable:1 ; ///< The configuration bus must be enabled during normal operation.
    UINT32                                             DaFifoReset0:1 ; ///<
    UINT32                                              PhyCrEnMode:1 ; ///< The phy uses the electrical idle detection circuit to determine when to enable and disable the receiver.
    UINT32                                           PhyCmdCrEnMode:1 ; ///<
    UINT32                                           EiDetCycleMode:1 ; ///<
    UINT32                                             DaFifoReset1:1 ; ///<
    UINT32                                    RxDetectFifoResetMode:1 ; ///<UBTS #111486.
    UINT32                                        RxDetectTxPwrMode:1 ; ///<
    UINT32                                              DivInitMode:1 ; ///<
    UINT32                                            TxBufPtReset0:1 ; ///<
    UINT32                                            TxBufPtReset1:1 ; ///<
    UINT32                                           Reserved_15_11:5 ; ///<
    UINT32                                                TxGndTime:1 ; ///<
    UINT32                                              Ls2ExitTime:3 ; ///<
    UINT32                                           EiCycleOffTime:3 ; ///<
    UINT32                                           ExitLosInitDis:1 ; ///<
    UINT32                                                RxenGater:4 ; ///<
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_PIF_0010_STRUCT;

// **** D0F0xE4_PIF_0012 Register Definition ****
// Address
#define D0F0xE4_PIF_0012_ADDRESS                                0x12

// Type
#define D0F0xE4_PIF_0012_TYPE                                   TYPE_D0F0xE4
// Field Data
#define D0F0xE4_PIF_0012_TxPowerStateInTxs2_OFFSET              0
#define D0F0xE4_PIF_0012_TxPowerStateInTxs2_WIDTH               3
#define D0F0xE4_PIF_0012_TxPowerStateInTxs2_MASK                0x7
#define D0F0xE4_PIF_0012_ForceRxEnInL0s_OFFSET                  3
#define D0F0xE4_PIF_0012_ForceRxEnInL0s_WIDTH                   1
#define D0F0xE4_PIF_0012_ForceRxEnInL0s_MASK                    0x8
#define D0F0xE4_PIF_0012_RxPowerStateInRxs2_OFFSET              4
#define D0F0xE4_PIF_0012_RxPowerStateInRxs2_WIDTH               3
#define D0F0xE4_PIF_0012_RxPowerStateInRxs2_MASK                0x70
#define D0F0xE4_PIF_0012_PllPowerStateInTxs2_OFFSET             7
#define D0F0xE4_PIF_0012_PllPowerStateInTxs2_WIDTH              3
#define D0F0xE4_PIF_0012_PllPowerStateInTxs2_MASK               0x380
#define D0F0xE4_PIF_0012_PllPowerStateInOff_OFFSET              10
#define D0F0xE4_PIF_0012_PllPowerStateInOff_WIDTH               3
#define D0F0xE4_PIF_0012_PllPowerStateInOff_MASK                0x1c00
#define D0F0xE4_PIF_0012_Reserved_15_13_OFFSET                  13
#define D0F0xE4_PIF_0012_Reserved_15_13_WIDTH                   3
#define D0F0xE4_PIF_0012_Reserved_15_13_MASK                    0xe000
#define D0F0xE4_PIF_0012_Tx2p5clkClockGatingEn_OFFSET           16
#define D0F0xE4_PIF_0012_Tx2p5clkClockGatingEn_WIDTH            1
#define D0F0xE4_PIF_0012_Tx2p5clkClockGatingEn_MASK             0x10000
#define D0F0xE4_PIF_0012_Reserved_23_17_OFFSET                  17
#define D0F0xE4_PIF_0012_Reserved_23_17_WIDTH                   7
#define D0F0xE4_PIF_0012_Reserved_23_17_MASK                    0xfe0000
#define D0F0xE4_PIF_0012_PllRampUpTime_OFFSET                   24
#define D0F0xE4_PIF_0012_PllRampUpTime_WIDTH                    3
#define D0F0xE4_PIF_0012_PllRampUpTime_MASK                     0x7000000
#define D0F0xE4_PIF_0012_Reserved_27_27_OFFSET                  27
#define D0F0xE4_PIF_0012_Reserved_27_27_WIDTH                   1
#define D0F0xE4_PIF_0012_Reserved_27_27_MASK                    0x8000000
#define D0F0xE4_PIF_0012_PllPwrOverrideEn_OFFSET                28
#define D0F0xE4_PIF_0012_PllPwrOverrideEn_WIDTH                 1
#define D0F0xE4_PIF_0012_PllPwrOverrideEn_MASK                  0x10000000
#define D0F0xE4_PIF_0012_PllPwrOverrideVal_OFFSET               29
#define D0F0xE4_PIF_0012_PllPwrOverrideVal_WIDTH                3
#define D0F0xE4_PIF_0012_PllPwrOverrideVal_MASK                 0xe0000000

/// D0F0xE4_PIF_0012
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       TxPowerStateInTxs2:3 ; ///<
    UINT32                                           ForceRxEnInL0s:1 ; ///<
    UINT32                                       RxPowerStateInRxs2:3 ; ///<See: TxPowerStateInTxs2.
    UINT32                                      PllPowerStateInTxs2:3 ; ///<See: TxPowerStateInTxs2. All links associated with the PLL must be in L1 to transition the PLL to this state.
    UINT32                                       PllPowerStateInOff:3 ; ///<See: TxPowerStateInTxs2. All links associated with the PLL must be in the off state to transition the PLL to this state.
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                    Tx2p5clkClockGatingEn:1 ; ///<5x TxClk is gated if the lane is idle 0=The 2.5x TxClk is never gated.
    UINT32                                           Reserved_23_17:7 ; ///<
    UINT32                                            PllRampUpTime:3 ; ///<
    UINT32                                           Reserved_27_27:1 ; ///<
    UINT32                                         PllPwrOverrideEn:1 ; ///<
    UINT32                                        PllPwrOverrideVal:3 ; ///<See TxPowerStateInTxs2.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_PIF_0012_STRUCT;

// **** D0F0xE4_PIF_0013 Register Definition ****
// Address
#define D0F0xE4_PIF_0013_ADDRESS                                0x13

// Type
#define D0F0xE4_PIF_0013_TYPE                                   TYPE_D0F0xE4
// Field Data
#define D0F0xE4_PIF_0013_TxPowerStateInTxs2_OFFSET              0
#define D0F0xE4_PIF_0013_TxPowerStateInTxs2_WIDTH               3
#define D0F0xE4_PIF_0013_TxPowerStateInTxs2_MASK                0x7
#define D0F0xE4_PIF_0013_ForceRxEnInL0s_OFFSET                  3
#define D0F0xE4_PIF_0013_ForceRxEnInL0s_WIDTH                   1
#define D0F0xE4_PIF_0013_ForceRxEnInL0s_MASK                    0x8
#define D0F0xE4_PIF_0013_RxPowerStateInRxs2_OFFSET              4
#define D0F0xE4_PIF_0013_RxPowerStateInRxs2_WIDTH               3
#define D0F0xE4_PIF_0013_RxPowerStateInRxs2_MASK                0x70
#define D0F0xE4_PIF_0013_PllPowerStateInTxs2_OFFSET             7
#define D0F0xE4_PIF_0013_PllPowerStateInTxs2_WIDTH              3
#define D0F0xE4_PIF_0013_PllPowerStateInTxs2_MASK               0x380
#define D0F0xE4_PIF_0013_PllPowerStateInOff_OFFSET              10
#define D0F0xE4_PIF_0013_PllPowerStateInOff_WIDTH               3
#define D0F0xE4_PIF_0013_PllPowerStateInOff_MASK                0x1c00
#define D0F0xE4_PIF_0013_Reserved_15_13_OFFSET                  13
#define D0F0xE4_PIF_0013_Reserved_15_13_WIDTH                   3
#define D0F0xE4_PIF_0013_Reserved_15_13_MASK                    0xe000
#define D0F0xE4_PIF_0013_Tx2p5clkClockGatingEn_OFFSET           16
#define D0F0xE4_PIF_0013_Tx2p5clkClockGatingEn_WIDTH            1
#define D0F0xE4_PIF_0013_Tx2p5clkClockGatingEn_MASK             0x10000
#define D0F0xE4_PIF_0013_Reserved_23_17_OFFSET                  17
#define D0F0xE4_PIF_0013_Reserved_23_17_WIDTH                   7
#define D0F0xE4_PIF_0013_Reserved_23_17_MASK                    0xfe0000
#define D0F0xE4_PIF_0013_PllRampUpTime_OFFSET                   24
#define D0F0xE4_PIF_0013_PllRampUpTime_WIDTH                    3
#define D0F0xE4_PIF_0013_PllRampUpTime_MASK                     0x7000000
#define D0F0xE4_PIF_0013_Reserved_27_27_OFFSET                  27
#define D0F0xE4_PIF_0013_Reserved_27_27_WIDTH                   1
#define D0F0xE4_PIF_0013_Reserved_27_27_MASK                    0x8000000
#define D0F0xE4_PIF_0013_PllPwrOverrideEn_OFFSET                28
#define D0F0xE4_PIF_0013_PllPwrOverrideEn_WIDTH                 1
#define D0F0xE4_PIF_0013_PllPwrOverrideEn_MASK                  0x10000000
#define D0F0xE4_PIF_0013_PllPwrOverrideVal_OFFSET               29
#define D0F0xE4_PIF_0013_PllPwrOverrideVal_WIDTH                3
#define D0F0xE4_PIF_0013_PllPwrOverrideVal_MASK                 0xe0000000

/// D0F0xE4_PIF_0013
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                       TxPowerStateInTxs2:3 ; ///<
    UINT32                                           ForceRxEnInL0s:1 ; ///<
    UINT32                                       RxPowerStateInRxs2:3 ; ///<See: TxPowerStateInTxs2.
    UINT32                                      PllPowerStateInTxs2:3 ; ///<See: TxPowerStateInTxs2. All links associated with the PLL must be in L1 to transition the PLL to this state.
    UINT32                                       PllPowerStateInOff:3 ; ///<See: TxPowerStateInTxs2. All links associated with the PLL must be in the off state to transition the PLL to this state.
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                    Tx2p5clkClockGatingEn:1 ; ///<5x TxClk is gated if the lane is idle 0=The 2.5x TxClk is never gated.
    UINT32                                           Reserved_23_17:7 ; ///<
    UINT32                                            PllRampUpTime:3 ; ///<
    UINT32                                           Reserved_27_27:1 ; ///<
    UINT32                                         PllPwrOverrideEn:1 ; ///<
    UINT32                                        PllPwrOverrideVal:3 ; ///<See TxPowerStateInTxs2.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_PIF_0013_STRUCT;

// **** D0F0xE4_PIF_0015 Register Definition ****
// Address
#define D0F0xE4_PIF_0015_ADDRESS                                0x15

// Type
#define D0F0xE4_PIF_0015_TYPE                                   TYPE_D0F0xE4
// Field Data
#define D0F0xE4_PIF_0015_TxPhyStatus00_OFFSET                   0
#define D0F0xE4_PIF_0015_TxPhyStatus00_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus00_MASK                     0x1
#define D0F0xE4_PIF_0015_TxPhyStatus01_OFFSET                   1
#define D0F0xE4_PIF_0015_TxPhyStatus01_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus01_MASK                     0x2
#define D0F0xE4_PIF_0015_TxPhyStatus02_OFFSET                   2
#define D0F0xE4_PIF_0015_TxPhyStatus02_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus02_MASK                     0x4
#define D0F0xE4_PIF_0015_TxPhyStatus03_OFFSET                   3
#define D0F0xE4_PIF_0015_TxPhyStatus03_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus03_MASK                     0x8
#define D0F0xE4_PIF_0015_TxPhyStatus04_OFFSET                   4
#define D0F0xE4_PIF_0015_TxPhyStatus04_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus04_MASK                     0x10
#define D0F0xE4_PIF_0015_TxPhyStatus05_OFFSET                   5
#define D0F0xE4_PIF_0015_TxPhyStatus05_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus05_MASK                     0x20
#define D0F0xE4_PIF_0015_TxPhyStatus06_OFFSET                   6
#define D0F0xE4_PIF_0015_TxPhyStatus06_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus06_MASK                     0x40
#define D0F0xE4_PIF_0015_TxPhyStatus07_OFFSET                   7
#define D0F0xE4_PIF_0015_TxPhyStatus07_WIDTH                    1
#define D0F0xE4_PIF_0015_TxPhyStatus07_MASK                     0x80
#define D0F0xE4_PIF_0015_Reserved_31_8_OFFSET                   8
#define D0F0xE4_PIF_0015_Reserved_31_8_WIDTH                    24
#define D0F0xE4_PIF_0015_Reserved_31_8_MASK                     0xffffff00

/// D0F0xE4_PIF_0015
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            TxPhyStatus00:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.
    UINT32                                            TxPhyStatus01:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.See: TxPhyStatus00.
    UINT32                                            TxPhyStatus02:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.See: TxPhyStatus00.
    UINT32                                            TxPhyStatus03:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.See: TxPhyStatus00.
    UINT32                                            TxPhyStatus04:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.See: TxPhyStatus00.
    UINT32                                            TxPhyStatus05:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.See: TxPhyStatus00.
    UINT32                                            TxPhyStatus06:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.See: TxPhyStatus00.
    UINT32                                            TxPhyStatus07:1 ; ///<Returns the state of the TxPhyStatus signal From the PIF to the BIF.See: TxPhyStatus00.
    UINT32                                            Reserved_31_8:24; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_PIF_0015_STRUCT;

// **** D0F0xE4_WRAP_0800 Register Definition ****
// Address
#define D0F0xE4_WRAP_0800_ADDRESS                               0x800

// Type
#define D0F0xE4_WRAP_0800_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_0800_HoldTraining_OFFSET                   0
#define D0F0xE4_WRAP_0800_HoldTraining_WIDTH                    1
#define D0F0xE4_WRAP_0800_HoldTraining_MASK                     0x1
#define D0F0xE4_WRAP_0800_Reserved_31_1_OFFSET                  1
#define D0F0xE4_WRAP_0800_Reserved_31_1_WIDTH                   31
#define D0F0xE4_WRAP_0800_Reserved_31_1_MASK                    0xfffffffe

/// D0F0xE4_WRAP_0800
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             HoldTraining:1 ; ///<
    UINT32                                            Reserved_31_1:31; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_0800_STRUCT;

// **** D0F0xE4_WRAP_0803 Register Definition ****
// Address
#define D0F0xE4_WRAP_0803_ADDRESS                               0x803

// Type
#define D0F0xE4_WRAP_0803_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_0803_Reserved_3_0_OFFSET                   0
#define D0F0xE4_WRAP_0803_Reserved_3_0_WIDTH                    4
#define D0F0xE4_WRAP_0803_Reserved_3_0_MASK                     0xf
#define D0F0xE4_WRAP_0803_StrapBifDeemphBifSel_OFFSET           4
#define D0F0xE4_WRAP_0803_StrapBifDeemphBifSel_WIDTH            1
#define D0F0xE4_WRAP_0803_StrapBifDeemphBifSel_MASK             0x10
#define D0F0xE4_WRAP_0803_StrapBifDeemphasisSel_OFFSET          5
#define D0F0xE4_WRAP_0803_StrapBifDeemphasisSel_WIDTH           1
#define D0F0xE4_WRAP_0803_StrapBifDeemphasisSel_MASK            0x20
#define D0F0xE4_WRAP_0803_Reserved_31_6_OFFSET                  6
#define D0F0xE4_WRAP_0803_Reserved_31_6_WIDTH                   26
#define D0F0xE4_WRAP_0803_Reserved_31_6_MASK                    0xffffffc0

/// D0F0xE4_WRAP_0803
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                     StrapBifDeemphBifSel:1 ; ///< Bozo: Check.
    UINT32                                    StrapBifDeemphasisSel:1 ; ///<Controls the default value of D[8:4]F0x88[SelectableDeemphasis].
    UINT32                                            Reserved_31_6:26; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_0803_STRUCT;

// **** D0F0xE4_WRAP_8012 Register Definition ****
// Address
#define D0F0xE4_WRAP_8012_ADDRESS                               0x8012

// Type
#define D0F0xE4_WRAP_8012_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8012_Pif1xIdleGateLatency_OFFSET           0
#define D0F0xE4_WRAP_8012_Pif1xIdleGateLatency_WIDTH            6
#define D0F0xE4_WRAP_8012_Pif1xIdleGateLatency_MASK             0x3f
#define D0F0xE4_WRAP_8012_Reserved_6_6_OFFSET                   6
#define D0F0xE4_WRAP_8012_Reserved_6_6_WIDTH                    1
#define D0F0xE4_WRAP_8012_Reserved_6_6_MASK                     0x40
#define D0F0xE4_WRAP_8012_Pif1xIdleGateEnable_OFFSET            7
#define D0F0xE4_WRAP_8012_Pif1xIdleGateEnable_WIDTH             1
#define D0F0xE4_WRAP_8012_Pif1xIdleGateEnable_MASK              0x80
#define D0F0xE4_WRAP_8012_Pif1xIdleResumeLatency_OFFSET         8
#define D0F0xE4_WRAP_8012_Pif1xIdleResumeLatency_WIDTH          6
#define D0F0xE4_WRAP_8012_Pif1xIdleResumeLatency_MASK           0x3f00
#define D0F0xE4_WRAP_8012_Reserved_15_14_OFFSET                 14
#define D0F0xE4_WRAP_8012_Reserved_15_14_WIDTH                  2
#define D0F0xE4_WRAP_8012_Reserved_15_14_MASK                   0xc000
#define D0F0xE4_WRAP_8012_Pif2p5xIdleGateLatency_OFFSET         16
#define D0F0xE4_WRAP_8012_Pif2p5xIdleGateLatency_WIDTH          6
#define D0F0xE4_WRAP_8012_Pif2p5xIdleGateLatency_MASK           0x3f0000
#define D0F0xE4_WRAP_8012_Reserved_22_22_OFFSET                 22
#define D0F0xE4_WRAP_8012_Reserved_22_22_WIDTH                  1
#define D0F0xE4_WRAP_8012_Reserved_22_22_MASK                   0x400000
#define D0F0xE4_WRAP_8012_Pif2p5xIdleGateEnable_OFFSET          23
#define D0F0xE4_WRAP_8012_Pif2p5xIdleGateEnable_WIDTH           1
#define D0F0xE4_WRAP_8012_Pif2p5xIdleGateEnable_MASK            0x800000
#define D0F0xE4_WRAP_8012_Pif2p5xIdleResumeLatency_OFFSET       24
#define D0F0xE4_WRAP_8012_Pif2p5xIdleResumeLatency_WIDTH        6
#define D0F0xE4_WRAP_8012_Pif2p5xIdleResumeLatency_MASK         0x3f000000
#define D0F0xE4_WRAP_8012_Reserved_31_30_OFFSET                 30
#define D0F0xE4_WRAP_8012_Reserved_31_30_WIDTH                  2
#define D0F0xE4_WRAP_8012_Reserved_31_30_MASK                   0xc0000000

/// D0F0xE4_WRAP_8012
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                     Pif1xIdleGateLatency:6 ; ///<Specifies the number of clocks to wait before turning off TXCLK1X_PIF.
    UINT32                                             Reserved_6_6:1 ; ///<
    UINT32                                      Pif1xIdleGateEnable:1 ; ///<
    UINT32                                   Pif1xIdleResumeLatency:6 ; ///<Specifies the number of clocks to wait after enabling TXCLK1X_PIF before sending the acknowledge.
    UINT32                                           Reserved_15_14:2 ; ///<
    UINT32                                   Pif2p5xIdleGateLatency:6 ; ///<Specifies the number of clocks to wait before turning off TXCLK2P5X_PIF.
    UINT32                                           Reserved_22_22:1 ; ///<
    UINT32                                    Pif2p5xIdleGateEnable:1 ; ///<
    UINT32                                 Pif2p5xIdleResumeLatency:6 ; ///<Specifies the number of clocks to wait after enabling TXCLK2P5X_PIF before sending the acknowledge.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8012_STRUCT;

// **** D0F0xE4_WRAP_8013 Register Definition ****
// Address
#define D0F0xE4_WRAP_8013_ADDRESS                               0x8013

// Field Data
#define D0F0xE4_WRAP_8013_MasterPciePllA_OFFSET                 0
#define D0F0xE4_WRAP_8013_MasterPciePllA_WIDTH                  1
#define D0F0xE4_WRAP_8013_MasterPciePllA_MASK                   0x1
#define D0F0xE4_WRAP_8013_Reserved_1_1_OFFSET                   1
#define D0F0xE4_WRAP_8013_Reserved_1_1_WIDTH                    1
#define D0F0xE4_WRAP_8013_Reserved_1_1_MASK                     0x2
#define D0F0xE4_WRAP_8013_Reserved_2_2_OFFSET                   2
#define D0F0xE4_WRAP_8013_Reserved_2_2_WIDTH                    1
#define D0F0xE4_WRAP_8013_Reserved_2_2_MASK                     0x4
#define D0F0xE4_WRAP_8013_Reserved_3_3_OFFSET                   3
#define D0F0xE4_WRAP_8013_Reserved_3_3_WIDTH                    1
#define D0F0xE4_WRAP_8013_Reserved_3_3_MASK                     0x8
#define D0F0xE4_WRAP_8013_ClkDividerResetOverrideA_OFFSET       4
#define D0F0xE4_WRAP_8013_ClkDividerResetOverrideA_WIDTH        1
#define D0F0xE4_WRAP_8013_ClkDividerResetOverrideA_MASK         0x10
#define D0F0xE4_WRAP_8013_Reserved_5_5_OFFSET                   5
#define D0F0xE4_WRAP_8013_Reserved_5_5_WIDTH                    1
#define D0F0xE4_WRAP_8013_Reserved_5_5_MASK                     0x20
#define D0F0xE4_WRAP_8013_Reserved_6_6_OFFSET                   6
#define D0F0xE4_WRAP_8013_Reserved_6_6_WIDTH                    1
#define D0F0xE4_WRAP_8013_Reserved_6_6_MASK                     0x40
#define D0F0xE4_WRAP_8013_Reserved_7_7_OFFSET                   7
#define D0F0xE4_WRAP_8013_Reserved_7_7_WIDTH                    1
#define D0F0xE4_WRAP_8013_Reserved_7_7_MASK                     0x80
#define D0F0xE4_WRAP_8013_TxclkSelCoreOverride_OFFSET           8
#define D0F0xE4_WRAP_8013_TxclkSelCoreOverride_WIDTH            1
#define D0F0xE4_WRAP_8013_TxclkSelCoreOverride_MASK             0x100
#define D0F0xE4_WRAP_8013_TxclkSelPifAOverride_OFFSET           9
#define D0F0xE4_WRAP_8013_TxclkSelPifAOverride_WIDTH            1
#define D0F0xE4_WRAP_8013_TxclkSelPifAOverride_MASK             0x200
#define D0F0xE4_WRAP_8013_Reserved_10_10_OFFSET                 10
#define D0F0xE4_WRAP_8013_Reserved_10_10_WIDTH                  1
#define D0F0xE4_WRAP_8013_Reserved_10_10_MASK                   0x400
#define D0F0xE4_WRAP_8013_Reserved_11_11_OFFSET                 11
#define D0F0xE4_WRAP_8013_Reserved_11_11_WIDTH                  1
#define D0F0xE4_WRAP_8013_Reserved_11_11_MASK                   0x800
#define D0F0xE4_WRAP_8013_Reserved_12_12_OFFSET                 12
#define D0F0xE4_WRAP_8013_Reserved_12_12_WIDTH                  1
#define D0F0xE4_WRAP_8013_Reserved_12_12_MASK                   0x1000
#define D0F0xE4_WRAP_8013_Reserved_15_13_OFFSET                 13
#define D0F0xE4_WRAP_8013_Reserved_15_13_WIDTH                  3
#define D0F0xE4_WRAP_8013_Reserved_15_13_MASK                   0xe000
#define D0F0xE4_WRAP_8013_Reserved_16_16_OFFSET                 16
#define D0F0xE4_WRAP_8013_Reserved_16_16_WIDTH                  1
#define D0F0xE4_WRAP_8013_Reserved_16_16_MASK                   0x10000
#define D0F0xE4_WRAP_8013_Reserved_19_17_OFFSET                 17
#define D0F0xE4_WRAP_8013_Reserved_19_17_WIDTH                  3
#define D0F0xE4_WRAP_8013_Reserved_19_17_MASK                   0xe0000
#define D0F0xE4_WRAP_8013_Reserved_20_20_OFFSET                 20
#define D0F0xE4_WRAP_8013_Reserved_20_20_WIDTH                  1
#define D0F0xE4_WRAP_8013_Reserved_20_20_MASK                   0x100000
#define D0F0xE4_WRAP_8013_Reserved_31_21_OFFSET                 21
#define D0F0xE4_WRAP_8013_Reserved_31_21_WIDTH                  11
#define D0F0xE4_WRAP_8013_Reserved_31_21_MASK                   0xffe00000

/// D0F0xE4_WRAP_8013
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           MasterPciePllA:1 ; ///<
    UINT32                                           MasterPciePllB:1 ; ///<
    UINT32                                           MasterPciePllC:1 ; ///<
    UINT32                                           MasterPciePllD:1 ; ///<
    UINT32                                 ClkDividerResetOverrideA:1 ; ///<
    UINT32                                             Reserved_5_5:1 ; ///<
    UINT32                                             Reserved_6_6:1 ; ///<
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                     TxclkSelCoreOverride:1 ; ///<
    UINT32                                     TxclkSelPifAOverride:1 ; ///<
    UINT32                                           Reserved_10_10:1 ; ///<
    UINT32                                           Reserved_11_11:1 ; ///<
    UINT32                                           Reserved_12_12:1 ; ///<
    UINT32                                           Reserved_15_13:3 ; ///<Specifies the source of the dig A clock when TxclkSelDigAOverride=1. The selected clock with not function correctly if the divider logic is not enabled for the clock. The divider is enabled if (ClkDividerResetOverrideX | MasterPciePllX | D0F0xE4_x013[2:1]_8040[OwnPhyX]) =1.
    UINT32                                           Reserved_16_16:1 ; ///<
    UINT32                                           Reserved_19_17:3 ; ///<Specifies the source of the dig B clock when TxclkSelDigBOverride=1. The selected clock with not function correctly if the divider logic is not enabled for the clock. The divider is enabled if (ClkDividerResetOverrideX | MasterPciePllX | D0F0xE4_x013[2:1]_8040[OwnPhyX]) =1.
    UINT32                                           Reserved_20_20:1 ; ///<
    UINT32                                           Reserved_31_21:11; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8013_STRUCT;

// **** D0F0xE4_WRAP_8014 Register Definition ****
// Address
#define D0F0xE4_WRAP_8014_ADDRESS                               0x8014

// Field Data
#define D0F0xE4_WRAP_8014_TxclkPermGateEnable_OFFSET            0
#define D0F0xE4_WRAP_8014_TxclkPermGateEnable_WIDTH             1
#define D0F0xE4_WRAP_8014_TxclkPermGateEnable_MASK              0x1
#define D0F0xE4_WRAP_8014_TxclkPrbsGateEnable_OFFSET            1
#define D0F0xE4_WRAP_8014_TxclkPrbsGateEnable_WIDTH             1
#define D0F0xE4_WRAP_8014_TxclkPrbsGateEnable_MASK              0x2
#define D0F0xE4_WRAP_8014_Reserved_2_2_OFFSET                   2
#define D0F0xE4_WRAP_8014_Reserved_2_2_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_2_2_MASK                     0x4
#define D0F0xE4_WRAP_8014_Reserved_3_3_OFFSET                   3
#define D0F0xE4_WRAP_8014_Reserved_3_3_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_3_3_MASK                     0x8
#define D0F0xE4_WRAP_8014_Reserved_4_4_OFFSET                   4
#define D0F0xE4_WRAP_8014_Reserved_4_4_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_4_4_MASK                     0x10
#define D0F0xE4_WRAP_8014_Reserved_5_5_OFFSET                   5
#define D0F0xE4_WRAP_8014_Reserved_5_5_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_5_5_MASK                     0x20
#define D0F0xE4_WRAP_8014_Reserved_6_6_OFFSET                   6
#define D0F0xE4_WRAP_8014_Reserved_6_6_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_6_6_MASK                     0x40
#define D0F0xE4_WRAP_8014_Reserved_7_7_OFFSET                   7
#define D0F0xE4_WRAP_8014_Reserved_7_7_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_7_7_MASK                     0x80
#define D0F0xE4_WRAP_8014_Reserved_8_8_OFFSET                   8
#define D0F0xE4_WRAP_8014_Reserved_8_8_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_8_8_MASK                     0x100
#define D0F0xE4_WRAP_8014_Reserved_9_9_OFFSET                   9
#define D0F0xE4_WRAP_8014_Reserved_9_9_WIDTH                    1
#define D0F0xE4_WRAP_8014_Reserved_9_9_MASK                     0x200
#define D0F0xE4_WRAP_8014_Reserved_10_10_OFFSET                 10
#define D0F0xE4_WRAP_8014_Reserved_10_10_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_10_10_MASK                   0x400
#define D0F0xE4_WRAP_8014_Reserved_11_11_OFFSET                 11
#define D0F0xE4_WRAP_8014_Reserved_11_11_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_11_11_MASK                   0x800
#define D0F0xE4_WRAP_8014_PcieGatePifA1xEnable_OFFSET           12
#define D0F0xE4_WRAP_8014_PcieGatePifA1xEnable_WIDTH            1
#define D0F0xE4_WRAP_8014_PcieGatePifA1xEnable_MASK             0x1000
#define D0F0xE4_WRAP_8014_Reserved_13_13_OFFSET                 13
#define D0F0xE4_WRAP_8014_Reserved_13_13_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_13_13_MASK                   0x2000
#define D0F0xE4_WRAP_8014_Reserved_14_14_OFFSET                 14
#define D0F0xE4_WRAP_8014_Reserved_14_14_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_14_14_MASK                   0x4000
#define D0F0xE4_WRAP_8014_Reserved_15_15_OFFSET                 15
#define D0F0xE4_WRAP_8014_Reserved_15_15_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_15_15_MASK                   0x8000
#define D0F0xE4_WRAP_8014_PcieGatePifA2p5xEnable_OFFSET         16
#define D0F0xE4_WRAP_8014_PcieGatePifA2p5xEnable_WIDTH          1
#define D0F0xE4_WRAP_8014_PcieGatePifA2p5xEnable_MASK           0x10000
#define D0F0xE4_WRAP_8014_Reserved_17_17_OFFSET                 17
#define D0F0xE4_WRAP_8014_Reserved_17_17_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_17_17_MASK                   0x20000
#define D0F0xE4_WRAP_8014_Reserved_18_18_OFFSET                 18
#define D0F0xE4_WRAP_8014_Reserved_18_18_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_18_18_MASK                   0x40000
#define D0F0xE4_WRAP_8014_Reserved_19_19_OFFSET                 19
#define D0F0xE4_WRAP_8014_Reserved_19_19_WIDTH                  1
#define D0F0xE4_WRAP_8014_Reserved_19_19_MASK                   0x80000
#define D0F0xE4_WRAP_8014_TxclkPermGateOnlyWhenPllPwrDn_OFFSET  20
#define D0F0xE4_WRAP_8014_TxclkPermGateOnlyWhenPllPwrDn_WIDTH   1
#define D0F0xE4_WRAP_8014_TxclkPermGateOnlyWhenPllPwrDn_MASK    0x100000
#define D0F0xE4_WRAP_8014_Reserved_31_21_OFFSET                 21
#define D0F0xE4_WRAP_8014_Reserved_31_21_WIDTH                  11
#define D0F0xE4_WRAP_8014_Reserved_31_21_MASK                   0xffe00000

/// D0F0xE4_WRAP_8014
typedef union {
  struct {
    UINT32                                      TxclkPermGateEnable:1 ; ///<1=Enable gating of the permanent clock branch.
    UINT32                                      TxclkPrbsGateEnable:1 ; ///<1=Enable gating of the PRBS clock branch.
    UINT32                                      DdiGatePifA1xEnable:1 ; ///<
    UINT32                                      DdiGatePifB1xEnable:1 ; ///<
    UINT32                                      DdiGatePifC1xEnable:1 ; ///<
    UINT32                                      DdiGatePifD1xEnable:1 ; ///<
    UINT32                                        DdiGateDigAEnable:1 ; ///<
    UINT32                                        DdiGateDigBEnable:1 ; ///<
    UINT32                                    DdiGatePifA2p5xEnable:1 ; ///<
    UINT32                                    DdiGatePifB2p5xEnable:1 ; ///<
    UINT32                                    DdiGatePifC2p5xEnable:1 ; ///<
    UINT32                                    DdiGatePifD2p5xEnable:1 ; ///<
    UINT32                                     PcieGatePifA1xEnable:1 ; ///<1=Enable gating of the PIF A 1x clock branches in PCIe mode.
    UINT32                                     PcieGatePifB1xEnable:1 ; ///<
    UINT32                                     PcieGatePifC1xEnable:1 ; ///<
    UINT32                                     PcieGatePifD1xEnable:1 ; ///<
    UINT32                                   PcieGatePifA2p5xEnable:1 ; ///<1=Enable gating of the PIF A 2.5x clock branches in PCIe mode.
    UINT32                                   PcieGatePifB2p5xEnable:1 ; ///<
    UINT32                                   PcieGatePifC2p5xEnable:1 ; ///<
    UINT32                                   PcieGatePifD2p5xEnable:1 ; ///<
    UINT32                            TxclkPermGateOnlyWhenPllPwrDn:1 ; ///<1=Gating of the permanent clock branch only occurs when the PLL is powered down.
    UINT32                                           Reserved_31_21:11; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8014_STRUCT;

// **** D0F0xE4_WRAP_8016 Register Definition ****
// Address
#define D0F0xE4_WRAP_8016_ADDRESS                               0x8016

// Type
#define D0F0xE4_WRAP_8016_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8016_CalibAckLatency_OFFSET                0
#define D0F0xE4_WRAP_8016_CalibAckLatency_WIDTH                 6
#define D0F0xE4_WRAP_8016_CalibAckLatency_MASK                  0x3f
#define D0F0xE4_WRAP_8016_Reserved_7_6_OFFSET                   6
#define D0F0xE4_WRAP_8016_Reserved_7_6_WIDTH                    2
#define D0F0xE4_WRAP_8016_Reserved_7_6_MASK                     0xc0
#define D0F0xE4_WRAP_8016_CalibDoneSelPifA_OFFSET               8
#define D0F0xE4_WRAP_8016_CalibDoneSelPifA_WIDTH                1
#define D0F0xE4_WRAP_8016_CalibDoneSelPifA_MASK                 0x100
#define D0F0xE4_WRAP_8016_Reserved_9_9_OFFSET                   9
#define D0F0xE4_WRAP_8016_Reserved_9_9_WIDTH                    1
#define D0F0xE4_WRAP_8016_Reserved_9_9_MASK                     0x200
#define D0F0xE4_WRAP_8016_Reserved_10_10_OFFSET                 10
#define D0F0xE4_WRAP_8016_Reserved_10_10_WIDTH                  1
#define D0F0xE4_WRAP_8016_Reserved_10_10_MASK                   0x400
#define D0F0xE4_WRAP_8016_Reserved_11_11_OFFSET                 11
#define D0F0xE4_WRAP_8016_Reserved_11_11_WIDTH                  1
#define D0F0xE4_WRAP_8016_Reserved_11_11_MASK                   0x800
#define D0F0xE4_WRAP_8016_Gen1OnlyEngage_OFFSET                 12
#define D0F0xE4_WRAP_8016_Gen1OnlyEngage_WIDTH                  1
#define D0F0xE4_WRAP_8016_Gen1OnlyEngage_MASK                   0x1000
#define D0F0xE4_WRAP_8016_Gen1OnlyEngaged_OFFSET                13
#define D0F0xE4_WRAP_8016_Gen1OnlyEngaged_WIDTH                 1
#define D0F0xE4_WRAP_8016_Gen1OnlyEngaged_MASK                  0x2000
#define D0F0xE4_WRAP_8016_Reserved_15_14_OFFSET                 14
#define D0F0xE4_WRAP_8016_Reserved_15_14_WIDTH                  2
#define D0F0xE4_WRAP_8016_Reserved_15_14_MASK                   0xc000
#define D0F0xE4_WRAP_8016_LclkDynGateLatency_OFFSET             16
#define D0F0xE4_WRAP_8016_LclkDynGateLatency_WIDTH              6
#define D0F0xE4_WRAP_8016_LclkDynGateLatency_MASK               0x3f0000
#define D0F0xE4_WRAP_8016_LclkGateFree_OFFSET                   22
#define D0F0xE4_WRAP_8016_LclkGateFree_WIDTH                    1
#define D0F0xE4_WRAP_8016_LclkGateFree_MASK                     0x400000
#define D0F0xE4_WRAP_8016_LclkDynGateEnable_OFFSET              23
#define D0F0xE4_WRAP_8016_LclkDynGateEnable_WIDTH               1
#define D0F0xE4_WRAP_8016_LclkDynGateEnable_MASK                0x800000
#define D0F0xE4_WRAP_8016_Reserved_31_24_OFFSET                 24
#define D0F0xE4_WRAP_8016_Reserved_31_24_WIDTH                  8
#define D0F0xE4_WRAP_8016_Reserved_31_24_MASK                   0xff000000

/// D0F0xE4_WRAP_8016
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          CalibAckLatency:6 ; ///<Specifies the number of clocks after calibration is complete before the acknowledge signal is asserted. UBTS #233389.
    UINT32                                             Reserved_7_6:2 ; ///<
    UINT32                                         CalibDoneSelPifA:1 ; ///<
    UINT32                                             Reserved_9_9:1 ; ///< CalibDoneSelPifB. BOZO: Was R/W. Not in Wrestler Spec, needs confirmation.
    UINT32                                           Reserved_10_10:1 ; ///< CalibDoneSelPifC. BOZO: Was R/W. Not in Wrestler Spec, needs confirmation.
    UINT32                                           Reserved_11_11:1 ; ///< CalibDoneSelPifD. BOZO: Was R/W. Not in Wrestler Spec, needs confirmation.
    UINT32                                           Gen1OnlyEngage:1 ; ///<25 GHz reference clock.
    UINT32                                          Gen1OnlyEngaged:1 ; ///<25 GHz reference clock.
    UINT32                                           Reserved_15_14:2 ; ///<
    UINT32                                       LclkDynGateLatency:6 ; ///<Specifies the number of clocks to wait before turning off LCLK_DYN. See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                             LclkGateFree:1 ; ///< See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                        LclkDynGateEnable:1 ; ///< See 2.5.6.6 [GPU and Root Complex (GNB) Clock Gating].
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8016_STRUCT;

// **** D0F0xE4_WRAP_8021 Register Definition ****
// Address
#define D0F0xE4_WRAP_8021_ADDRESS                               0x8021

// Type
#define D0F0xE4_WRAP_8021_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8021_Lanes10_OFFSET                        0
#define D0F0xE4_WRAP_8021_Lanes10_WIDTH                         4
#define D0F0xE4_WRAP_8021_Lanes10_MASK                          0xf
#define D0F0xE4_WRAP_8021_Lanes32_OFFSET                        4
#define D0F0xE4_WRAP_8021_Lanes32_WIDTH                         4
#define D0F0xE4_WRAP_8021_Lanes32_MASK                          0xf0
#define D0F0xE4_WRAP_8021_Lanes54_OFFSET                        8
#define D0F0xE4_WRAP_8021_Lanes54_WIDTH                         4
#define D0F0xE4_WRAP_8021_Lanes54_MASK                          0xf00
#define D0F0xE4_WRAP_8021_Lanes76_OFFSET                        12
#define D0F0xE4_WRAP_8021_Lanes76_WIDTH                         4
#define D0F0xE4_WRAP_8021_Lanes76_MASK                          0xf000
#define D0F0xE4_WRAP_8021_Lanes98_OFFSET                        16
#define D0F0xE4_WRAP_8021_Lanes98_WIDTH                         4
#define D0F0xE4_WRAP_8021_Lanes98_MASK                          0xf0000
#define D0F0xE4_WRAP_8021_Lanes1110_OFFSET                      20
#define D0F0xE4_WRAP_8021_Lanes1110_WIDTH                       4
#define D0F0xE4_WRAP_8021_Lanes1110_MASK                        0xf00000
#define D0F0xE4_WRAP_8021_Lanes1312_OFFSET                      24
#define D0F0xE4_WRAP_8021_Lanes1312_WIDTH                       4
#define D0F0xE4_WRAP_8021_Lanes1312_MASK                        0xf000000
#define D0F0xE4_WRAP_8021_Lanes1514_OFFSET                      28
#define D0F0xE4_WRAP_8021_Lanes1514_WIDTH                       4
#define D0F0xE4_WRAP_8021_Lanes1514_MASK                        0xf0000000

/// D0F0xE4_WRAP_8021
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Lanes10:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.
    UINT32                                                  Lanes32:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.Specifies the controller lanes that are mapped to PIF TX lanes 3 and 2. See: Lanes10.
    UINT32                                                  Lanes54:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.Specifies the controller lanes that are mapped to PIF TX lanes 5 and 4. See: Lanes10.
    UINT32                                                  Lanes76:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.Specifies the controller lanes that are mapped to PIF TX lanes 7 and 6. See: Lanes10.
    UINT32                                                  Lanes98:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.Specifies the controller lanes that are mapped to PIF TX lanes 9 and 8. See: Lanes10.
    UINT32                                                Lanes1110:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.Specifies the controller lanes that are mapped to PIF TX lanes 11 and 10. See: Lanes10.
    UINT32                                                Lanes1312:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.Specifies the controller lanes that are mapped to PIF TX lanes 13 and 12. See: Lanes10.
    UINT32                                                Lanes1514:4 ; ///<Specifies the controller lanes that are mapped to PIF TX lanes 1 and 0.Specifies the controller lanes that are mapped to PIF TX lanes 15 and 14. See: Lanes10.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8021_STRUCT;

// **** D0F0xE4_WRAP_8022 Register Definition ****
// Address
#define D0F0xE4_WRAP_8022_ADDRESS                               0x8022

// Type
#define D0F0xE4_WRAP_8022_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8022_Lanes10_OFFSET                        0
#define D0F0xE4_WRAP_8022_Lanes10_WIDTH                         4
#define D0F0xE4_WRAP_8022_Lanes10_MASK                          0xf
#define D0F0xE4_WRAP_8022_Lanes32_OFFSET                        4
#define D0F0xE4_WRAP_8022_Lanes32_WIDTH                         4
#define D0F0xE4_WRAP_8022_Lanes32_MASK                          0xf0
#define D0F0xE4_WRAP_8022_Lanes54_OFFSET                        8
#define D0F0xE4_WRAP_8022_Lanes54_WIDTH                         4
#define D0F0xE4_WRAP_8022_Lanes54_MASK                          0xf00
#define D0F0xE4_WRAP_8022_Lanes76_OFFSET                        12
#define D0F0xE4_WRAP_8022_Lanes76_WIDTH                         4
#define D0F0xE4_WRAP_8022_Lanes76_MASK                          0xf000
#define D0F0xE4_WRAP_8022_Lanes98_OFFSET                        16
#define D0F0xE4_WRAP_8022_Lanes98_WIDTH                         4
#define D0F0xE4_WRAP_8022_Lanes98_MASK                          0xf0000
#define D0F0xE4_WRAP_8022_Lanes1110_OFFSET                      20
#define D0F0xE4_WRAP_8022_Lanes1110_WIDTH                       4
#define D0F0xE4_WRAP_8022_Lanes1110_MASK                        0xf00000
#define D0F0xE4_WRAP_8022_Lanes1312_OFFSET                      24
#define D0F0xE4_WRAP_8022_Lanes1312_WIDTH                       4
#define D0F0xE4_WRAP_8022_Lanes1312_MASK                        0xf000000
#define D0F0xE4_WRAP_8022_Lanes1514_OFFSET                      28
#define D0F0xE4_WRAP_8022_Lanes1514_WIDTH                       4
#define D0F0xE4_WRAP_8022_Lanes1514_MASK                        0xf0000000

/// D0F0xE4_WRAP_8022
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  Lanes10:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.
    UINT32                                                  Lanes32:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.Specifies the PIF RX lanes that are mapped to controller lanes 3 and 2. See: Lanes10.
    UINT32                                                  Lanes54:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.Specifies the PIF RX lanes that are mapped to controller lanes 5 and 4. See: Lanes10.
    UINT32                                                  Lanes76:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.Specifies the PIF RX lanes that are mapped to controller lanes 7 and 6. See: Lanes10.
    UINT32                                                  Lanes98:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.Specifies the PIF RX lanes that are mapped to controller lanes 9 and 8. See: Lanes10.
    UINT32                                                Lanes1110:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.Specifies the PIF RX lanes that are mapped to controller lanes 11 and 10. See: Lanes10.
    UINT32                                                Lanes1312:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.Specifies the PIF RX lanes that are mapped to controller lanes 13 and 12. See: Lanes10.
    UINT32                                                Lanes1514:4 ; ///<Specifies the PIF RX lanes that are mapped to controller lanes 1 and 0.Specifies the PIF RX lanes that are mapped to controller lanes 15 and 14. See: Lanes10.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8022_STRUCT;

// **** D0F0xE4_WRAP_8023 Register Definition ****
// Address
#define D0F0xE4_WRAP_8023_ADDRESS                               0x8023

// Type
#define D0F0xE4_WRAP_8023_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8023_LaneEnable_OFFSET                     0
#define D0F0xE4_WRAP_8023_LaneEnable_WIDTH                      16
#define D0F0xE4_WRAP_8023_LaneEnable_MASK                       0xffff
#define D0F0xE4_WRAP_8023_Reserved_31_16_OFFSET                 16
#define D0F0xE4_WRAP_8023_Reserved_31_16_WIDTH                  16
#define D0F0xE4_WRAP_8023_Reserved_31_16_MASK                   0xffff0000

/// D0F0xE4_WRAP_8023
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               LaneEnable:16; ///<1=Lane enabled for transmit.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8023_STRUCT;

// **** D0F0xE4_WRAP_8025 Register Definition ****
// Address
#define D0F0xE4_WRAP_8025_ADDRESS                               0x8025

// Type
#define D0F0xE4_WRAP_8025_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8025_LMTxPhyCmd0_OFFSET                    0
#define D0F0xE4_WRAP_8025_LMTxPhyCmd0_WIDTH                     3
#define D0F0xE4_WRAP_8025_LMTxPhyCmd0_MASK                      0x7
#define D0F0xE4_WRAP_8025_LMRxPhyCmd0_OFFSET                    3
#define D0F0xE4_WRAP_8025_LMRxPhyCmd0_WIDTH                     2
#define D0F0xE4_WRAP_8025_LMRxPhyCmd0_MASK                      0x18
#define D0F0xE4_WRAP_8025_LMLinkSpeed0_OFFSET                   5
#define D0F0xE4_WRAP_8025_LMLinkSpeed0_WIDTH                    1
#define D0F0xE4_WRAP_8025_LMLinkSpeed0_MASK                     0x20
#define D0F0xE4_WRAP_8025_Reserved_7_6_OFFSET                   6
#define D0F0xE4_WRAP_8025_Reserved_7_6_WIDTH                    2
#define D0F0xE4_WRAP_8025_Reserved_7_6_MASK                     0xc0
#define D0F0xE4_WRAP_8025_LMTxPhyCmd1_OFFSET                    8
#define D0F0xE4_WRAP_8025_LMTxPhyCmd1_WIDTH                     3
#define D0F0xE4_WRAP_8025_LMTxPhyCmd1_MASK                      0x700
#define D0F0xE4_WRAP_8025_LMRxPhyCmd1_OFFSET                    11
#define D0F0xE4_WRAP_8025_LMRxPhyCmd1_WIDTH                     2
#define D0F0xE4_WRAP_8025_LMRxPhyCmd1_MASK                      0x1800
#define D0F0xE4_WRAP_8025_LMLinkSpeed1_OFFSET                   13
#define D0F0xE4_WRAP_8025_LMLinkSpeed1_WIDTH                    1
#define D0F0xE4_WRAP_8025_LMLinkSpeed1_MASK                     0x2000
#define D0F0xE4_WRAP_8025_Reserved_15_14_OFFSET                 14
#define D0F0xE4_WRAP_8025_Reserved_15_14_WIDTH                  2
#define D0F0xE4_WRAP_8025_Reserved_15_14_MASK                   0xc000
#define D0F0xE4_WRAP_8025_LMTxPhyCmd2_OFFSET                    16
#define D0F0xE4_WRAP_8025_LMTxPhyCmd2_WIDTH                     3
#define D0F0xE4_WRAP_8025_LMTxPhyCmd2_MASK                      0x70000
#define D0F0xE4_WRAP_8025_LMRxPhyCmd2_OFFSET                    19
#define D0F0xE4_WRAP_8025_LMRxPhyCmd2_WIDTH                     2
#define D0F0xE4_WRAP_8025_LMRxPhyCmd2_MASK                      0x180000
#define D0F0xE4_WRAP_8025_LMLinkSpeed2_OFFSET                   21
#define D0F0xE4_WRAP_8025_LMLinkSpeed2_WIDTH                    1
#define D0F0xE4_WRAP_8025_LMLinkSpeed2_MASK                     0x200000
#define D0F0xE4_WRAP_8025_Reserved_23_22_OFFSET                 22
#define D0F0xE4_WRAP_8025_Reserved_23_22_WIDTH                  2
#define D0F0xE4_WRAP_8025_Reserved_23_22_MASK                   0xc00000
#define D0F0xE4_WRAP_8025_LMTxPhyCmd3_OFFSET                    24
#define D0F0xE4_WRAP_8025_LMTxPhyCmd3_WIDTH                     3
#define D0F0xE4_WRAP_8025_LMTxPhyCmd3_MASK                      0x7000000
#define D0F0xE4_WRAP_8025_LMRxPhyCmd3_OFFSET                    27
#define D0F0xE4_WRAP_8025_LMRxPhyCmd3_WIDTH                     2
#define D0F0xE4_WRAP_8025_LMRxPhyCmd3_MASK                      0x18000000
#define D0F0xE4_WRAP_8025_LMLinkSpeed3_OFFSET                   29
#define D0F0xE4_WRAP_8025_LMLinkSpeed3_WIDTH                    1
#define D0F0xE4_WRAP_8025_LMLinkSpeed3_MASK                     0x20000000
#define D0F0xE4_WRAP_8025_Reserved_31_30_OFFSET                 30
#define D0F0xE4_WRAP_8025_Reserved_31_30_WIDTH                  2
#define D0F0xE4_WRAP_8025_Reserved_31_30_MASK                   0xc0000000

/// D0F0xE4_WRAP_8025
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              LMTxPhyCmd0:3 ; ///<Specifies the transmitter state for lanes 3:0 when the lanes are not enabled for transmit.
    UINT32                                              LMRxPhyCmd0:2 ; ///<Specifies the receiver state for lanes 3:0 when the lanes are not enabled for transmit.
    UINT32                                             LMLinkSpeed0:1 ; ///<Specifies the link speed for lanes 3:0 when the lanes are not enabled for transmit.5 GHz.
    UINT32                                             Reserved_7_6:2 ; ///<
    UINT32                                              LMTxPhyCmd1:3 ; ///<Specifies the transmitter state for lanes 3:0 when the lanes are not enabled for transmit.Specifies the transmitter state for lanes 7:4 when the lanes are not enabled for transmit. See: LMTxPhyCmd0.
    UINT32                                              LMRxPhyCmd1:2 ; ///<Specifies the receiver state for lanes 3:0 when the lanes are not enabled for transmit.Specifies the receiver state for lanes 7:4 when the lanes are not enabled for transmit. See: LMRxPhyCmd0.
    UINT32                                             LMLinkSpeed1:1 ; ///<Specifies the link speed for lanes 7:4 when the lanes are not enabled for transmit.5 GHz.
    UINT32                                           Reserved_15_14:2 ; ///<
    UINT32                                              LMTxPhyCmd2:3 ; ///<Specifies the transmitter state for lanes 3:0 when the lanes are not enabled for transmit.Specifies the transmitter state for lanes 11:8 when the lanes are not enabled for transmit. See: LMTxPhyCmd0.
    UINT32                                              LMRxPhyCmd2:2 ; ///<Specifies the receiver state for lanes 3:0 when the lanes are not enabled for transmit.Specifies the receiver state for lanes 11:8 when the lanes are not enabled for transmit. See: LMRxPhyCmd0.
    UINT32                                             LMLinkSpeed2:1 ; ///<Specifies the link speed for lanes 11:8 when the lanes are not enabled for transmit.5 GHz.
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                              LMTxPhyCmd3:3 ; ///<Specifies the transmitter state for lanes 3:0 when the lanes are not enabled for transmit.Specifies the transmitter state for lanes 15:12 when the lanes are not enabled for transmit. See: LMTxPhyCmd0.
    UINT32                                              LMRxPhyCmd3:2 ; ///<Specifies the receiver state for lanes 3:0 when the lanes are not enabled for transmit.Specifies the receiver state for lanes 15:12 when the lanes are not enabled for transmit. See: LMRxPhyCmd0.
    UINT32                                             LMLinkSpeed3:1 ; ///<Specifies the link speed for lanes 15:12 when the lanes are not enabled for transmit.5 GHz.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8025_STRUCT;

// **** D0F0xE4_WRAP_8060 Register Definition ****
// Address
#define D0F0xE4_WRAP_8060_ADDRESS                               0x8060

// Type
#define D0F0xE4_WRAP_8060_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8060_Reconfigure_OFFSET                    0
#define D0F0xE4_WRAP_8060_Reconfigure_WIDTH                     1
#define D0F0xE4_WRAP_8060_Reconfigure_MASK                      0x1
#define D0F0xE4_WRAP_8060_AtomicReset_OFFSET                    1
#define D0F0xE4_WRAP_8060_AtomicReset_WIDTH                     1
#define D0F0xE4_WRAP_8060_AtomicReset_MASK                      0x2
#define D0F0xE4_WRAP_8060_ResetComplete_OFFSET                  2
#define D0F0xE4_WRAP_8060_ResetComplete_WIDTH                   1
#define D0F0xE4_WRAP_8060_ResetComplete_MASK                    0x4
#define D0F0xE4_WRAP_8060_Reserved_14_3_OFFSET                  3
#define D0F0xE4_WRAP_8060_Reserved_14_3_WIDTH                   12
#define D0F0xE4_WRAP_8060_Reserved_14_3_MASK                    0x7ff8
#define D0F0xE4_WRAP_8060_BifStrapRegReset_OFFSET               15
#define D0F0xE4_WRAP_8060_BifStrapRegReset_WIDTH                1
#define D0F0xE4_WRAP_8060_BifStrapRegReset_MASK                 0x8000
#define D0F0xE4_WRAP_8060_BifGlobalReset_OFFSET                 16
#define D0F0xE4_WRAP_8060_BifGlobalReset_WIDTH                  1
#define D0F0xE4_WRAP_8060_BifGlobalReset_MASK                   0x10000
#define D0F0xE4_WRAP_8060_BifCalibrationReset_OFFSET            17
#define D0F0xE4_WRAP_8060_BifCalibrationReset_WIDTH             1
#define D0F0xE4_WRAP_8060_BifCalibrationReset_MASK              0x20000
#define D0F0xE4_WRAP_8060_BifCoreReset_OFFSET                   18
#define D0F0xE4_WRAP_8060_BifCoreReset_WIDTH                    1
#define D0F0xE4_WRAP_8060_BifCoreReset_MASK                     0x40000
#define D0F0xE4_WRAP_8060_BifRegisterReset_OFFSET               19
#define D0F0xE4_WRAP_8060_BifRegisterReset_WIDTH                1
#define D0F0xE4_WRAP_8060_BifRegisterReset_MASK                 0x80000
#define D0F0xE4_WRAP_8060_BifPhyReset_OFFSET                    20
#define D0F0xE4_WRAP_8060_BifPhyReset_WIDTH                     1
#define D0F0xE4_WRAP_8060_BifPhyReset_MASK                      0x100000
#define D0F0xE4_WRAP_8060_BifStickyReset_OFFSET                 21
#define D0F0xE4_WRAP_8060_BifStickyReset_WIDTH                  1
#define D0F0xE4_WRAP_8060_BifStickyReset_MASK                   0x200000
#define D0F0xE4_WRAP_8060_BifConfigReset_OFFSET                 22
#define D0F0xE4_WRAP_8060_BifConfigReset_WIDTH                  1
#define D0F0xE4_WRAP_8060_BifConfigReset_MASK                   0x400000
#define D0F0xE4_WRAP_8060_Reserved_23_23_OFFSET                 23
#define D0F0xE4_WRAP_8060_Reserved_23_23_WIDTH                  1
#define D0F0xE4_WRAP_8060_Reserved_23_23_MASK                   0x800000
#define D0F0xE4_WRAP_8060_Reserved_30_24_OFFSET                 24
#define D0F0xE4_WRAP_8060_Reserved_30_24_WIDTH                  7
#define D0F0xE4_WRAP_8060_Reserved_30_24_MASK                   0x7f000000
#define D0F0xE4_WRAP_8060_Reserved_31_31_OFFSET                 31
#define D0F0xE4_WRAP_8060_Reserved_31_31_WIDTH                  1
#define D0F0xE4_WRAP_8060_Reserved_31_31_MASK                   0x80000000

/// D0F0xE4_WRAP_8060
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              Reconfigure:1 ; ///<
    UINT32                                              AtomicReset:1 ; ///<
    UINT32                                            ResetComplete:1 ; ///<
    UINT32                                            Reserved_14_3:12; ///<
    UINT32                                         BifStrapRegReset:1 ; ///<
    UINT32                                           BifGlobalReset:1 ; ///<
    UINT32                                      BifCalibrationReset:1 ; ///<
    UINT32                                             BifCoreReset:1 ; ///<
    UINT32                                         BifRegisterReset:1 ; ///<
    UINT32                                              BifPhyReset:1 ; ///<
    UINT32                                           BifStickyReset:1 ; ///<
    UINT32                                           BifConfigReset:1 ; ///<
    UINT32                                           Reserved_23_23:1 ; ///<
    UINT32                                           Reserved_30_24:7 ; ///<
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8060_STRUCT;

// **** D0F0xE4_WRAP_8062 Register Definition ****
// Address
#define D0F0xE4_WRAP_8062_ADDRESS                               0x8062

// Type
#define D0F0xE4_WRAP_8062_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8062_ReconfigureEn_OFFSET                  0
#define D0F0xE4_WRAP_8062_ReconfigureEn_WIDTH                   1
#define D0F0xE4_WRAP_8062_ReconfigureEn_MASK                    0x1
#define D0F0xE4_WRAP_8062_AtomicResetEn_OFFSET                  1
#define D0F0xE4_WRAP_8062_AtomicResetEn_WIDTH                   1
#define D0F0xE4_WRAP_8062_AtomicResetEn_MASK                    0x2
#define D0F0xE4_WRAP_8062_ResetPeriod_OFFSET                    2
#define D0F0xE4_WRAP_8062_ResetPeriod_WIDTH                     3
#define D0F0xE4_WRAP_8062_ResetPeriod_MASK                      0x1c
#define D0F0xE4_WRAP_8062_Reserved_7_5_OFFSET                   5
#define D0F0xE4_WRAP_8062_Reserved_7_5_WIDTH                    3
#define D0F0xE4_WRAP_8062_Reserved_7_5_MASK                     0xe0
#define D0F0xE4_WRAP_8062_WaitLinkUp_OFFSET                     8
#define D0F0xE4_WRAP_8062_WaitLinkUp_WIDTH                      1
#define D0F0xE4_WRAP_8062_WaitLinkUp_MASK                       0x100
#define D0F0xE4_WRAP_8062_ForceRegIdle_OFFSET                   9
#define D0F0xE4_WRAP_8062_ForceRegIdle_WIDTH                    1
#define D0F0xE4_WRAP_8062_ForceRegIdle_MASK                     0x200
#define D0F0xE4_WRAP_8062_BlockOnIdle_OFFSET                    10
#define D0F0xE4_WRAP_8062_BlockOnIdle_WIDTH                     1
#define D0F0xE4_WRAP_8062_BlockOnIdle_MASK                      0x400
#define D0F0xE4_WRAP_8062_ConfigXferMode_OFFSET                 11
#define D0F0xE4_WRAP_8062_ConfigXferMode_WIDTH                  1
#define D0F0xE4_WRAP_8062_ConfigXferMode_MASK                   0x800
#define D0F0xE4_WRAP_8062_MuxSelXferMode_OFFSET                 12
#define D0F0xE4_WRAP_8062_MuxSelXferMode_WIDTH                  1
#define D0F0xE4_WRAP_8062_MuxSelXferMode_MASK                   0x1000
#define D0F0xE4_WRAP_8062_BypassPifHold_OFFSET                  13
#define D0F0xE4_WRAP_8062_BypassPifHold_WIDTH                   1
#define D0F0xE4_WRAP_8062_BypassPifHold_MASK                    0x2000
#define D0F0xE4_WRAP_8062_BifStrapRegResetEn_OFFSET             14
#define D0F0xE4_WRAP_8062_BifStrapRegResetEn_WIDTH              1
#define D0F0xE4_WRAP_8062_BifStrapRegResetEn_MASK               0x4000
#define D0F0xE4_WRAP_8062_BypassHold_OFFSET                     15
#define D0F0xE4_WRAP_8062_BypassHold_WIDTH                      1
#define D0F0xE4_WRAP_8062_BypassHold_MASK                       0x8000
#define D0F0xE4_WRAP_8062_BifGlobalResetEn_OFFSET               16
#define D0F0xE4_WRAP_8062_BifGlobalResetEn_WIDTH                1
#define D0F0xE4_WRAP_8062_BifGlobalResetEn_MASK                 0x10000
#define D0F0xE4_WRAP_8062_BifCalibrationResetEn_OFFSET          17
#define D0F0xE4_WRAP_8062_BifCalibrationResetEn_WIDTH           1
#define D0F0xE4_WRAP_8062_BifCalibrationResetEn_MASK            0x20000
#define D0F0xE4_WRAP_8062_BifCoreResetEn_OFFSET                 18
#define D0F0xE4_WRAP_8062_BifCoreResetEn_WIDTH                  1
#define D0F0xE4_WRAP_8062_BifCoreResetEn_MASK                   0x40000
#define D0F0xE4_WRAP_8062_BifRegisterResetEn_OFFSET             19
#define D0F0xE4_WRAP_8062_BifRegisterResetEn_WIDTH              1
#define D0F0xE4_WRAP_8062_BifRegisterResetEn_MASK               0x80000
#define D0F0xE4_WRAP_8062_BifPhyResetEn_OFFSET                  20
#define D0F0xE4_WRAP_8062_BifPhyResetEn_WIDTH                   1
#define D0F0xE4_WRAP_8062_BifPhyResetEn_MASK                    0x100000
#define D0F0xE4_WRAP_8062_BifStickyResetEn_OFFSET               21
#define D0F0xE4_WRAP_8062_BifStickyResetEn_WIDTH                1
#define D0F0xE4_WRAP_8062_BifStickyResetEn_MASK                 0x200000
#define D0F0xE4_WRAP_8062_BifConfigResetEn_OFFSET               22
#define D0F0xE4_WRAP_8062_BifConfigResetEn_WIDTH                1
#define D0F0xE4_WRAP_8062_BifConfigResetEn_MASK                 0x400000
#define D0F0xE4_WRAP_8062_Reserved_23_23_OFFSET                 23
#define D0F0xE4_WRAP_8062_Reserved_23_23_WIDTH                  1
#define D0F0xE4_WRAP_8062_Reserved_23_23_MASK                   0x800000
#define D0F0xE4_WRAP_8062_Reserved_30_24_OFFSET                 24
#define D0F0xE4_WRAP_8062_Reserved_30_24_WIDTH                  7
#define D0F0xE4_WRAP_8062_Reserved_30_24_MASK                   0x7f000000
#define D0F0xE4_WRAP_8062_Reserved_31_31_OFFSET                 31
#define D0F0xE4_WRAP_8062_Reserved_31_31_WIDTH                  1
#define D0F0xE4_WRAP_8062_Reserved_31_31_MASK                   0x80000000

/// D0F0xE4_WRAP_8062
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            ReconfigureEn:1 ; ///<
    UINT32                                            AtomicResetEn:1 ; ///<
    UINT32                                              ResetPeriod:3 ; ///<Specifies the amount of time that resets are asserted during an atomic reset or reconfiguration.
    UINT32                                             Reserved_7_5:3 ; ///<
    UINT32                                               WaitLinkUp:1 ; ///<
    UINT32                                             ForceRegIdle:1 ; ///<
    UINT32                                              BlockOnIdle:1 ; ///<
    UINT32                                           ConfigXferMode:1 ; ///<
    UINT32                                           MuxSelXferMode:1 ; ///<
    UINT32                                            BypassPifHold:1 ; ///< This should be used for debug only.
    UINT32                                       BifStrapRegResetEn:1 ; ///<
    UINT32                                               BypassHold:1 ; ///< This bit should be used for debug only.
    UINT32                                         BifGlobalResetEn:1 ; ///<
    UINT32                                    BifCalibrationResetEn:1 ; ///<
    UINT32                                           BifCoreResetEn:1 ; ///<
    UINT32                                       BifRegisterResetEn:1 ; ///<
    UINT32                                            BifPhyResetEn:1 ; ///<
    UINT32                                         BifStickyResetEn:1 ; ///<
    UINT32                                         BifConfigResetEn:1 ; ///<
    UINT32                                           Reserved_23_23:1 ; ///<
    UINT32                                           Reserved_30_24:7 ; ///<
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8062_STRUCT;

// **** D0F0xE4_WRAP_8063 Register Definition ****
// Address
#define D0F0xE4_WRAP_8063_ADDRESS                               0x8063

// Type
#define D0F0xE4_WRAP_8063_TYPE                                  TYPE_D0F0xE4
// Field Data
#define D0F0xE4_WRAP_8063_Reserved_0_0_OFFSET                   0
#define D0F0xE4_WRAP_8063_Reserved_0_0_WIDTH                    1
#define D0F0xE4_WRAP_8063_Reserved_0_0_MASK                     0x1
#define D0F0xE4_WRAP_8063_ResetPrbsEn_OFFSET                    1
#define D0F0xE4_WRAP_8063_ResetPrbsEn_WIDTH                     1
#define D0F0xE4_WRAP_8063_ResetPrbsEn_MASK                      0x2
#define D0F0xE4_WRAP_8063_ResetLaneMuxEn_OFFSET                 2
#define D0F0xE4_WRAP_8063_ResetLaneMuxEn_WIDTH                  1
#define D0F0xE4_WRAP_8063_ResetLaneMuxEn_MASK                   0x4
#define D0F0xE4_WRAP_8063_ResetWrapRegsEn_OFFSET                3
#define D0F0xE4_WRAP_8063_ResetWrapRegsEn_WIDTH                 1
#define D0F0xE4_WRAP_8063_ResetWrapRegsEn_MASK                  0x8
#define D0F0xE4_WRAP_8063_ResetSrbm0En_OFFSET                   4
#define D0F0xE4_WRAP_8063_ResetSrbm0En_WIDTH                    1
#define D0F0xE4_WRAP_8063_ResetSrbm0En_MASK                     0x10
#define D0F0xE4_WRAP_8063_ResetSrbm1En_OFFSET                   5
#define D0F0xE4_WRAP_8063_ResetSrbm1En_WIDTH                    1
#define D0F0xE4_WRAP_8063_ResetSrbm1En_MASK                     0x20
#define D0F0xE4_WRAP_8063_ResetLcEn_OFFSET                      6
#define D0F0xE4_WRAP_8063_ResetLcEn_WIDTH                       1
#define D0F0xE4_WRAP_8063_ResetLcEn_MASK                        0x40
#define D0F0xE4_WRAP_8063_Reserved_7_7_OFFSET                   7
#define D0F0xE4_WRAP_8063_Reserved_7_7_WIDTH                    1
#define D0F0xE4_WRAP_8063_Reserved_7_7_MASK                     0x80
#define D0F0xE4_WRAP_8063_Reserved_8_8_OFFSET                   8
#define D0F0xE4_WRAP_8063_Reserved_8_8_WIDTH                    1
#define D0F0xE4_WRAP_8063_Reserved_8_8_MASK                     0x100
#define D0F0xE4_WRAP_8063_Reserved_9_9_OFFSET                   9
#define D0F0xE4_WRAP_8063_Reserved_9_9_WIDTH                    1
#define D0F0xE4_WRAP_8063_Reserved_9_9_MASK                     0x200
#define D0F0xE4_WRAP_8063_Reserved_10_10_OFFSET                 10
#define D0F0xE4_WRAP_8063_Reserved_10_10_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_10_10_MASK                   0x400
#define D0F0xE4_WRAP_8063_SyncIdlePif0En_OFFSET                 11
#define D0F0xE4_WRAP_8063_SyncIdlePif0En_WIDTH                  1
#define D0F0xE4_WRAP_8063_SyncIdlePif0En_MASK                   0x800
#define D0F0xE4_WRAP_8063_ResetSrbmNbEn_OFFSET                  12
#define D0F0xE4_WRAP_8063_ResetSrbmNbEn_WIDTH                   1
#define D0F0xE4_WRAP_8063_ResetSrbmNbEn_MASK                    0x1000
#define D0F0xE4_WRAP_8063_ResetSrbmGfxEn_OFFSET                 13
#define D0F0xE4_WRAP_8063_ResetSrbmGfxEn_WIDTH                  1
#define D0F0xE4_WRAP_8063_ResetSrbmGfxEn_MASK                   0x2000
#define D0F0xE4_WRAP_8063_ResetSrbmDcEn_OFFSET                  14
#define D0F0xE4_WRAP_8063_ResetSrbmDcEn_WIDTH                   1
#define D0F0xE4_WRAP_8063_ResetSrbmDcEn_MASK                    0x4000
#define D0F0xE4_WRAP_8063_ResetCpmEn_OFFSET                     15
#define D0F0xE4_WRAP_8063_ResetCpmEn_WIDTH                      1
#define D0F0xE4_WRAP_8063_ResetCpmEn_MASK                       0x8000
#define D0F0xE4_WRAP_8063_ResetPif0_OFFSET                      16
#define D0F0xE4_WRAP_8063_ResetPif0_WIDTH                       1
#define D0F0xE4_WRAP_8063_ResetPif0_MASK                        0x10000
#define D0F0xE4_WRAP_8063_Reserved_17_17_OFFSET                 17
#define D0F0xE4_WRAP_8063_Reserved_17_17_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_17_17_MASK                   0x20000
#define D0F0xE4_WRAP_8063_Reserved_18_18_OFFSET                 18
#define D0F0xE4_WRAP_8063_Reserved_18_18_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_18_18_MASK                   0x40000
#define D0F0xE4_WRAP_8063_Reserved_19_19_OFFSET                 19
#define D0F0xE4_WRAP_8063_Reserved_19_19_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_19_19_MASK                   0x80000
#define D0F0xE4_WRAP_8063_ResetImpArg0En_OFFSET                 20
#define D0F0xE4_WRAP_8063_ResetImpArg0En_WIDTH                  1
#define D0F0xE4_WRAP_8063_ResetImpArg0En_MASK                   0x100000
#define D0F0xE4_WRAP_8063_Reserved_21_21_OFFSET                 21
#define D0F0xE4_WRAP_8063_Reserved_21_21_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_21_21_MASK                   0x200000
#define D0F0xE4_WRAP_8063_Reserved_22_22_OFFSET                 22
#define D0F0xE4_WRAP_8063_Reserved_22_22_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_22_22_MASK                   0x400000
#define D0F0xE4_WRAP_8063_Reserved_23_23_OFFSET                 23
#define D0F0xE4_WRAP_8063_Reserved_23_23_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_23_23_MASK                   0x800000
#define D0F0xE4_WRAP_8063_ResetPhy0En_OFFSET                    24
#define D0F0xE4_WRAP_8063_ResetPhy0En_WIDTH                     1
#define D0F0xE4_WRAP_8063_ResetPhy0En_MASK                      0x1000000
#define D0F0xE4_WRAP_8063_Reserved_25_25_OFFSET                 25
#define D0F0xE4_WRAP_8063_Reserved_25_25_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_25_25_MASK                   0x2000000
#define D0F0xE4_WRAP_8063_Reserved_26_26_OFFSET                 26
#define D0F0xE4_WRAP_8063_Reserved_26_26_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_26_26_MASK                   0x4000000
#define D0F0xE4_WRAP_8063_Reserved_27_27_OFFSET                 27
#define D0F0xE4_WRAP_8063_Reserved_27_27_WIDTH                  1
#define D0F0xE4_WRAP_8063_Reserved_27_27_MASK                   0x8000000
#define D0F0xE4_WRAP_8063_Reserved_31_28_OFFSET                 28
#define D0F0xE4_WRAP_8063_Reserved_31_28_WIDTH                  4
#define D0F0xE4_WRAP_8063_Reserved_31_28_MASK                   0xf0000000

/// D0F0xE4_WRAP_8063
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<ResetDDIEn.
    UINT32                                              ResetPrbsEn:1 ; ///<
    UINT32                                           ResetLaneMuxEn:1 ; ///<
    UINT32                                          ResetWrapRegsEn:1 ; ///<
    UINT32                                             ResetSrbm0En:1 ; ///<
    UINT32                                             ResetSrbm1En:1 ; ///<
    UINT32                                                ResetLcEn:1 ; ///<
    UINT32                                             Reserved_7_7:1 ; ///<
    UINT32                                             Reserved_8_8:1 ; ///<SyncIdlePif3En. See: SyncIdlePif0En.
    UINT32                                             Reserved_9_9:1 ; ///<SyncIdlePif2En. See: SyncIdlePif0En.
    UINT32                                           Reserved_10_10:1 ; ///<SyncIdlePif1En. See: SyncIdlePif0En.
    UINT32                                           SyncIdlePif0En:1 ; ///<
    UINT32                                            ResetSrbmNbEn:1 ; ///<
    UINT32                                           ResetSrbmGfxEn:1 ; ///<
    UINT32                                            ResetSrbmDcEn:1 ; ///<
    UINT32                                               ResetCpmEn:1 ; ///<
    UINT32                                                ResetPif0:1 ; ///<
    UINT32                                           Reserved_17_17:1 ; ///<ResetPif1En. See: ResetPif0.
    UINT32                                           Reserved_18_18:1 ; ///<ResetPif2En. See: ResetPif0.
    UINT32                                           Reserved_19_19:1 ; ///<ResetPif3En. See: ResetPif0.
    UINT32                                           ResetImpArg0En:1 ; ///<
    UINT32                                           Reserved_21_21:1 ; ///<ResetImpArb1En. See: ResetImpArg0En.
    UINT32                                           Reserved_22_22:1 ; ///<ResetImpArb2En. See: ResetImpArg0En.
    UINT32                                           Reserved_23_23:1 ; ///<ResetImpArb3En. See: ResetImpArg0En.
    UINT32                                              ResetPhy0En:1 ; ///<
    UINT32                                           Reserved_25_25:1 ; ///<ResetPhy1En. See: ResetPhy0En.
    UINT32                                           Reserved_26_26:1 ; ///<ResetPhy2En. See: ResetPhy0En.
    UINT32                                           Reserved_27_27:1 ; ///<ResetPhy3En. See: ResetPhy0En.
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D0F0xE4_WRAP_8063_STRUCT;

// **** DxF0xE4_x02 Register Definition ****
// Address
#define DxF0xE4_x02_ADDRESS                                     0x2

// Type
#define DxF0xE4_x02_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_x02_HwDebug_13_0__OFFSET                        0
#define DxF0xE4_x02_HwDebug_13_0__WIDTH                         14
#define DxF0xE4_x02_HwDebug_13_0__MASK                          0x3fff
#define DxF0xE4_x02_RegsLcNoTSxPadRcvdDis_OFFSET                14
#define DxF0xE4_x02_RegsLcNoTSxPadRcvdDis_WIDTH                 1
#define DxF0xE4_x02_RegsLcNoTSxPadRcvdDis_MASK                  0x4000
#define DxF0xE4_x02_RegsLcAllowTxL1Control_OFFSET               15
#define DxF0xE4_x02_RegsLcAllowTxL1Control_WIDTH                1
#define DxF0xE4_x02_RegsLcAllowTxL1Control_MASK                 0x8000
#define DxF0xE4_x02_Reserved_31_16_OFFSET                       16
#define DxF0xE4_x02_Reserved_31_16_WIDTH                        16
#define DxF0xE4_x02_Reserved_31_16_MASK                         0xffff0000

/// DxF0xE4_x02
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                            HwDebug_13_0_:14; ///<
    UINT32                                    RegsLcNoTSxPadRcvdDis:1 ; ///<
    UINT32                                   RegsLcAllowTxL1Control:1 ; ///<
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_x02_STRUCT;

// **** DxF0xE4_x20 Register Definition ****
// Address
#define DxF0xE4_x20_ADDRESS                                     0x20

// Type
#define DxF0xE4_x20_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_x20_Reserved_9_0_OFFSET                         0
#define DxF0xE4_x20_Reserved_9_0_WIDTH                          10
#define DxF0xE4_x20_Reserved_9_0_MASK                           0x3ff
#define DxF0xE4_x20_TxSnrOverride_OFFSET                        10
#define DxF0xE4_x20_TxSnrOverride_WIDTH                         2
#define DxF0xE4_x20_TxSnrOverride_MASK                          0xc00
#define DxF0xE4_x20_TxRoOverride_OFFSET                         12
#define DxF0xE4_x20_TxRoOverride_WIDTH                          2
#define DxF0xE4_x20_TxRoOverride_MASK                           0x3000
#define DxF0xE4_x20_TxPackPacketDis_OFFSET                      14
#define DxF0xE4_x20_TxPackPacketDis_WIDTH                       1
#define DxF0xE4_x20_TxPackPacketDis_MASK                        0x4000
#define DxF0xE4_x20_TxFlushTlpDis_OFFSET                        15
#define DxF0xE4_x20_TxFlushTlpDis_WIDTH                         1
#define DxF0xE4_x20_TxFlushTlpDis_MASK                          0x8000
#define DxF0xE4_x20_Reserved_19_16_OFFSET                       16
#define DxF0xE4_x20_Reserved_19_16_WIDTH                        4
#define DxF0xE4_x20_Reserved_19_16_MASK                         0xf0000
#define DxF0xE4_x20_TxClpPassP_OFFSET                           20
#define DxF0xE4_x20_TxClpPassP_WIDTH                            1
#define DxF0xE4_x20_TxClpPassP_MASK                             0x100000
#define DxF0xE4_x20_TxNpPassP_OFFSET                            21
#define DxF0xE4_x20_TxNpPassP_WIDTH                             1
#define DxF0xE4_x20_TxNpPassP_MASK                              0x200000
#define DxF0xE4_x20_TxClearExtraPmReqs_OFFSET                   22
#define DxF0xE4_x20_TxClearExtraPmReqs_WIDTH                    1
#define DxF0xE4_x20_TxClearExtraPmReqs_MASK                     0x400000
#define DxF0xE4_x20_TxFcUpdateTimeoutDis_OFFSET                 23
#define DxF0xE4_x20_TxFcUpdateTimeoutDis_WIDTH                  1
#define DxF0xE4_x20_TxFcUpdateTimeoutDis_MASK                   0x800000
#define DxF0xE4_x20_Reserved_31_24_OFFSET                       24
#define DxF0xE4_x20_Reserved_31_24_WIDTH                        8
#define DxF0xE4_x20_Reserved_31_24_MASK                         0xff000000

/// DxF0xE4_x20
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_9_0:10; ///<
    UINT32                                            TxSnrOverride:2 ; ///<
    UINT32                                             TxRoOverride:2 ; ///<This field defines the policy for setting the RO bit in downstream transactions.
    UINT32                                          TxPackPacketDis:1 ; ///<This bit specifies if back to back packing of TLP and DLLP packets is allowed.
    UINT32                                            TxFlushTlpDis:1 ; ///<
    UINT32                                           Reserved_19_16:4 ; ///<
    UINT32                                               TxClpPassP:1 ; ///<
    UINT32                                                TxNpPassP:1 ; ///<
    UINT32                                       TxClearExtraPmReqs:1 ; ///<
    UINT32                                     TxFcUpdateTimeoutDis:1 ; ///<
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_x20_STRUCT;

// **** DxF0xE4_xA0 Register Definition ****
// Address
#define DxF0xE4_xA0_ADDRESS                                     0xa0

// Type
#define DxF0xE4_xA0_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xA0_Reserved_0_0_OFFSET                         0
#define DxF0xE4_xA0_Reserved_0_0_WIDTH                          1
#define DxF0xE4_xA0_Reserved_0_0_MASK                           0x1
#define DxF0xE4_xA0_LcDontEnterL23InD0_OFFSET                   1
#define DxF0xE4_xA0_LcDontEnterL23InD0_WIDTH                    1
#define DxF0xE4_xA0_LcDontEnterL23InD0_MASK                     0x2
#define DxF0xE4_xA0_LcResetlIdleCountEn_OFFSET                  2
#define DxF0xE4_xA0_LcResetlIdleCountEn_WIDTH                   1
#define DxF0xE4_xA0_LcResetlIdleCountEn_MASK                    0x4
#define DxF0xE4_xA0_LcResetLink_OFFSET                          3
#define DxF0xE4_xA0_LcResetLink_WIDTH                           1
#define DxF0xE4_xA0_LcResetLink_MASK                            0x8
#define DxF0xE4_xA0_Lc16xClearTxPipe_OFFSET                     4
#define DxF0xE4_xA0_Lc16xClearTxPipe_WIDTH                      4
#define DxF0xE4_xA0_Lc16xClearTxPipe_MASK                       0xf0
#define DxF0xE4_xA0_LcL0sInactivity_OFFSET                      8
#define DxF0xE4_xA0_LcL0sInactivity_WIDTH                       4
#define DxF0xE4_xA0_LcL0sInactivity_MASK                        0xf00
#define DxF0xE4_xA0_LcL1Inactivity_OFFSET                       12
#define DxF0xE4_xA0_LcL1Inactivity_WIDTH                        4
#define DxF0xE4_xA0_LcL1Inactivity_MASK                         0xf000
#define DxF0xE4_xA0_LcPmiToL1Dis_OFFSET                         16
#define DxF0xE4_xA0_LcPmiToL1Dis_WIDTH                          1
#define DxF0xE4_xA0_LcPmiToL1Dis_MASK                           0x10000
#define DxF0xE4_xA0_LcIncNFtsEn_OFFSET                          17
#define DxF0xE4_xA0_LcIncNFtsEn_WIDTH                           1
#define DxF0xE4_xA0_LcIncNFtsEn_MASK                            0x20000
#define DxF0xE4_xA0_LcLookForIdleInL1L23_OFFSET                 18
#define DxF0xE4_xA0_LcLookForIdleInL1L23_WIDTH                  2
#define DxF0xE4_xA0_LcLookForIdleInL1L23_MASK                   0xc0000
#define DxF0xE4_xA0_LcFactorInExtSync_OFFSET                    20
#define DxF0xE4_xA0_LcFactorInExtSync_WIDTH                     1
#define DxF0xE4_xA0_LcFactorInExtSync_MASK                      0x100000
#define DxF0xE4_xA0_LcWaitForPmAckDis_OFFSET                    21
#define DxF0xE4_xA0_LcWaitForPmAckDis_WIDTH                     1
#define DxF0xE4_xA0_LcWaitForPmAckDis_MASK                      0x200000
#define DxF0xE4_xA0_LcWakeFromL23_OFFSET                        22
#define DxF0xE4_xA0_LcWakeFromL23_WIDTH                         1
#define DxF0xE4_xA0_LcWakeFromL23_MASK                          0x400000
#define DxF0xE4_xA0_LcL1ImmediateAck_OFFSET                     23
#define DxF0xE4_xA0_LcL1ImmediateAck_WIDTH                      1
#define DxF0xE4_xA0_LcL1ImmediateAck_MASK                       0x800000
#define DxF0xE4_xA0_LcAspmToL1Dis_OFFSET                        24
#define DxF0xE4_xA0_LcAspmToL1Dis_WIDTH                         1
#define DxF0xE4_xA0_LcAspmToL1Dis_MASK                          0x1000000
#define DxF0xE4_xA0_LcDelayCount_OFFSET                         25
#define DxF0xE4_xA0_LcDelayCount_WIDTH                          2
#define DxF0xE4_xA0_LcDelayCount_MASK                           0x6000000
#define DxF0xE4_xA0_LcDelayL0sExit_OFFSET                       27
#define DxF0xE4_xA0_LcDelayL0sExit_WIDTH                        1
#define DxF0xE4_xA0_LcDelayL0sExit_MASK                         0x8000000
#define DxF0xE4_xA0_LcDelayL1Exit_OFFSET                        28
#define DxF0xE4_xA0_LcDelayL1Exit_WIDTH                         1
#define DxF0xE4_xA0_LcDelayL1Exit_MASK                          0x10000000
#define DxF0xE4_xA0_LcExtendWaitForElIdle_OFFSET                29
#define DxF0xE4_xA0_LcExtendWaitForElIdle_WIDTH                 1
#define DxF0xE4_xA0_LcExtendWaitForElIdle_MASK                  0x20000000
#define DxF0xE4_xA0_LcEscapeL1L23En_OFFSET                      30
#define DxF0xE4_xA0_LcEscapeL1L23En_WIDTH                       1
#define DxF0xE4_xA0_LcEscapeL1L23En_MASK                        0x40000000
#define DxF0xE4_xA0_LcGateRcvrIdle_OFFSET                       31
#define DxF0xE4_xA0_LcGateRcvrIdle_WIDTH                        1
#define DxF0xE4_xA0_LcGateRcvrIdle_MASK                         0x80000000

/// DxF0xE4_xA0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                       LcDontEnterL23InD0:1 ; ///<
    UINT32                                      LcResetlIdleCountEn:1 ; ///<
    UINT32                                              LcResetLink:1 ; ///<
    UINT32                                         Lc16xClearTxPipe:4 ; ///<Specifies the number of clocks to drain the TX pipe.
    UINT32                                          LcL0sInactivity:4 ; ///<
    UINT32                                           LcL1Inactivity:4 ; ///<
    UINT32                                             LcPmiToL1Dis:1 ; ///<
    UINT32                                              LcIncNFtsEn:1 ; ///<
    UINT32                                     LcLookForIdleInL1L23:2 ; ///<Controls the number of clocks to wait for electrical idle when entering L2, L2 or L3.
    UINT32                                        LcFactorInExtSync:1 ; ///<
    UINT32                                        LcWaitForPmAckDis:1 ; ///<
    UINT32                                            LcWakeFromL23:1 ; ///<
    UINT32                                         LcL1ImmediateAck:1 ; ///<
    UINT32                                            LcAspmToL1Dis:1 ; ///<
    UINT32                                             LcDelayCount:2 ; ///<Controls the minimum time to stay in L0s or L1. Bits	L0s	L1 00b	255	409 01b	1250	16383 10b	500	65535 11b	25000	262143
    UINT32                                           LcDelayL0sExit:1 ; ///<
    UINT32                                            LcDelayL1Exit:1 ; ///<
    UINT32                                    LcExtendWaitForElIdle:1 ; ///<
    UINT32                                          LcEscapeL1L23En:1 ; ///<
    UINT32                                           LcGateRcvrIdle:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xA0_STRUCT;

// **** DxF0xE4_xA1 Register Definition ****
// Address
#define DxF0xE4_xA1_ADDRESS                                     0xa1

// Type
#define DxF0xE4_xA1_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xA1_LcTrainingCntl_OFFSET                       0
#define DxF0xE4_xA1_LcTrainingCntl_WIDTH                        4
#define DxF0xE4_xA1_LcTrainingCntl_MASK                         0xf
#define DxF0xE4_xA1_LcComplianceReceive_OFFSET                  4
#define DxF0xE4_xA1_LcComplianceReceive_WIDTH                   1
#define DxF0xE4_xA1_LcComplianceReceive_MASK                    0x10
#define DxF0xE4_xA1_LcLookForMoreNonMatchingTs1_OFFSET          5
#define DxF0xE4_xA1_LcLookForMoreNonMatchingTs1_WIDTH           1
#define DxF0xE4_xA1_LcLookForMoreNonMatchingTs1_MASK            0x20
#define DxF0xE4_xA1_LcL0sL1TrainingControlEn_OFFSET             6
#define DxF0xE4_xA1_LcL0sL1TrainingControlEn_WIDTH              1
#define DxF0xE4_xA1_LcL0sL1TrainingControlEn_MASK               0x40
#define DxF0xE4_xA1_LcL1LongWakeFixEn_OFFSET                    7
#define DxF0xE4_xA1_LcL1LongWakeFixEn_WIDTH                     1
#define DxF0xE4_xA1_LcL1LongWakeFixEn_MASK                      0x80
#define DxF0xE4_xA1_LcPowerState_OFFSET                         8
#define DxF0xE4_xA1_LcPowerState_WIDTH                          3
#define DxF0xE4_xA1_LcPowerState_MASK                           0x700
#define DxF0xE4_xA1_LcDontGotoL0sifL1Armed_OFFSET               11
#define DxF0xE4_xA1_LcDontGotoL0sifL1Armed_WIDTH                1
#define DxF0xE4_xA1_LcDontGotoL0sifL1Armed_MASK                 0x800
#define DxF0xE4_xA1_LcInitSpdChgWithCsrEn_OFFSET                12
#define DxF0xE4_xA1_LcInitSpdChgWithCsrEn_WIDTH                 1
#define DxF0xE4_xA1_LcInitSpdChgWithCsrEn_MASK                  0x1000
#define DxF0xE4_xA1_Reserved_15_13_OFFSET                       13
#define DxF0xE4_xA1_Reserved_15_13_WIDTH                        3
#define DxF0xE4_xA1_Reserved_15_13_MASK                         0xe000
#define DxF0xE4_xA1_LcExtendWaitForSkp_OFFSET                   16
#define DxF0xE4_xA1_LcExtendWaitForSkp_WIDTH                    1
#define DxF0xE4_xA1_LcExtendWaitForSkp_MASK                     0x10000
#define DxF0xE4_xA1_LcAutonomousChangeOff_OFFSET                17
#define DxF0xE4_xA1_LcAutonomousChangeOff_WIDTH                 1
#define DxF0xE4_xA1_LcAutonomousChangeOff_MASK                  0x20000
#define DxF0xE4_xA1_LcUpconfigureCapOff_OFFSET                  18
#define DxF0xE4_xA1_LcUpconfigureCapOff_WIDTH                   1
#define DxF0xE4_xA1_LcUpconfigureCapOff_MASK                    0x40000
#define DxF0xE4_xA1_LcHwLinkDisEn_OFFSET                        19
#define DxF0xE4_xA1_LcHwLinkDisEn_WIDTH                         1
#define DxF0xE4_xA1_LcHwLinkDisEn_MASK                          0x80000
#define DxF0xE4_xA1_LcLinkDisByHw_OFFSET                        20
#define DxF0xE4_xA1_LcLinkDisByHw_WIDTH                         1
#define DxF0xE4_xA1_LcLinkDisByHw_MASK                          0x100000
#define DxF0xE4_xA1_LcStaticTxPipeCountEn_OFFSET                21
#define DxF0xE4_xA1_LcStaticTxPipeCountEn_WIDTH                 1
#define DxF0xE4_xA1_LcStaticTxPipeCountEn_MASK                  0x200000
#define DxF0xE4_xA1_LcAspmL1NakTimerSel_OFFSET                  22
#define DxF0xE4_xA1_LcAspmL1NakTimerSel_WIDTH                   2
#define DxF0xE4_xA1_LcAspmL1NakTimerSel_MASK                    0xc00000
#define DxF0xE4_xA1_LcDontDeassertRxEnInRSpeed_OFFSET           24
#define DxF0xE4_xA1_LcDontDeassertRxEnInRSpeed_WIDTH            1
#define DxF0xE4_xA1_LcDontDeassertRxEnInRSpeed_MASK             0x1000000
#define DxF0xE4_xA1_LcDontDeassertRxEnInTest_OFFSET             25
#define DxF0xE4_xA1_LcDontDeassertRxEnInTest_WIDTH              1
#define DxF0xE4_xA1_LcDontDeassertRxEnInTest_MASK               0x2000000
#define DxF0xE4_xA1_LcResetAspmL1NakTimer_OFFSET                26
#define DxF0xE4_xA1_LcResetAspmL1NakTimer_WIDTH                 1
#define DxF0xE4_xA1_LcResetAspmL1NakTimer_MASK                  0x4000000
#define DxF0xE4_xA1_LcDebug_5_1__OFFSET                         27
#define DxF0xE4_xA1_LcDebug_5_1__WIDTH                          5
#define DxF0xE4_xA1_LcDebug_5_1__MASK                           0xf8000000

/// DxF0xE4_xA1
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           LcTrainingCntl:4 ; ///<Specifies the state of the training control bits in the TS ordered sets.
    UINT32                                      LcComplianceReceive:1 ; ///<Controls the state of the compliance receive bit in the TS1 ordered sets.
    UINT32                              LcLookForMoreNonMatchingTs1:1 ; ///<
    UINT32                                 LcL0sL1TrainingControlEn:1 ; ///<
    UINT32                                        LcL1LongWakeFixEn:1 ; ///<
    UINT32                                             LcPowerState:3 ; ///<
    UINT32                                   LcDontGotoL0sifL1Armed:1 ; ///<
    UINT32                                    LcInitSpdChgWithCsrEn:1 ; ///<
    UINT32                                           Reserved_15_13:3 ; ///<
    UINT32                                       LcExtendWaitForSkp:1 ; ///<
    UINT32                                    LcAutonomousChangeOff:1 ; ///<
    UINT32                                      LcUpconfigureCapOff:1 ; ///<
    UINT32                                            LcHwLinkDisEn:1 ; ///<
    UINT32                                            LcLinkDisByHw:1 ; ///<
    UINT32                                    LcStaticTxPipeCountEn:1 ; ///<
    UINT32                                      LcAspmL1NakTimerSel:2 ; ///<Controls the timer value used when a request to go to L1 is declined.
    UINT32                               LcDontDeassertRxEnInRSpeed:1 ; ///<Speed LTSSM state.
    UINT32                                 LcDontDeassertRxEnInTest:1 ; ///<Compliance or Loopback LTSSM state.
    UINT32                                    LcResetAspmL1NakTimer:1 ; ///<
    UINT32                                             LcDebug_5_1_:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xA1_STRUCT;

// **** DxF0xE4_xA2 Register Definition ****
// Address
#define DxF0xE4_xA2_ADDRESS                                     0xa2

// Type
#define DxF0xE4_xA2_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xA2_LcLinkWidth_OFFSET                          0
#define DxF0xE4_xA2_LcLinkWidth_WIDTH                           3
#define DxF0xE4_xA2_LcLinkWidth_MASK                            0x7
#define DxF0xE4_xA2_Reserved_3_3_OFFSET                         3
#define DxF0xE4_xA2_Reserved_3_3_WIDTH                          1
#define DxF0xE4_xA2_Reserved_3_3_MASK                           0x8
#define DxF0xE4_xA2_LcLinkWidthRd_OFFSET                        4
#define DxF0xE4_xA2_LcLinkWidthRd_WIDTH                         3
#define DxF0xE4_xA2_LcLinkWidthRd_MASK                          0x70
#define DxF0xE4_xA2_LcReconfigArcMissingEscape_OFFSET           7
#define DxF0xE4_xA2_LcReconfigArcMissingEscape_WIDTH            1
#define DxF0xE4_xA2_LcReconfigArcMissingEscape_MASK             0x80
#define DxF0xE4_xA2_LcReconfigNow_OFFSET                        8
#define DxF0xE4_xA2_LcReconfigNow_WIDTH                         1
#define DxF0xE4_xA2_LcReconfigNow_MASK                          0x100
#define DxF0xE4_xA2_LcRenegotiationSupport_OFFSET               9
#define DxF0xE4_xA2_LcRenegotiationSupport_WIDTH                1
#define DxF0xE4_xA2_LcRenegotiationSupport_MASK                 0x200
#define DxF0xE4_xA2_LcRenegotiateEn_OFFSET                      10
#define DxF0xE4_xA2_LcRenegotiateEn_WIDTH                       1
#define DxF0xE4_xA2_LcRenegotiateEn_MASK                        0x400
#define DxF0xE4_xA2_LcShortReconfigEn_OFFSET                    11
#define DxF0xE4_xA2_LcShortReconfigEn_WIDTH                     1
#define DxF0xE4_xA2_LcShortReconfigEn_MASK                      0x800
#define DxF0xE4_xA2_LcUpconfigureSupport_OFFSET                 12
#define DxF0xE4_xA2_LcUpconfigureSupport_WIDTH                  1
#define DxF0xE4_xA2_LcUpconfigureSupport_MASK                   0x1000
#define DxF0xE4_xA2_LcUpconfigureDis_OFFSET                     13
#define DxF0xE4_xA2_LcUpconfigureDis_WIDTH                      1
#define DxF0xE4_xA2_LcUpconfigureDis_MASK                       0x2000
#define DxF0xE4_xA2_LcUpcfgWaitForRcvrDis_OFFSET                14
#define DxF0xE4_xA2_LcUpcfgWaitForRcvrDis_WIDTH                 1
#define DxF0xE4_xA2_LcUpcfgWaitForRcvrDis_MASK                  0x4000
#define DxF0xE4_xA2_LcUpcfgTimerSel_OFFSET                      15
#define DxF0xE4_xA2_LcUpcfgTimerSel_WIDTH                       1
#define DxF0xE4_xA2_LcUpcfgTimerSel_MASK                        0x8000
#define DxF0xE4_xA2_LcDeassertTxPdnb_OFFSET                     16
#define DxF0xE4_xA2_LcDeassertTxPdnb_WIDTH                      1
#define DxF0xE4_xA2_LcDeassertTxPdnb_MASK                       0x10000
#define DxF0xE4_xA2_LcL1ReconfigEn_OFFSET                       17
#define DxF0xE4_xA2_LcL1ReconfigEn_WIDTH                        1
#define DxF0xE4_xA2_LcL1ReconfigEn_MASK                         0x20000
#define DxF0xE4_xA2_LcDynlinkMstEn_OFFSET                       18
#define DxF0xE4_xA2_LcDynlinkMstEn_WIDTH                        1
#define DxF0xE4_xA2_LcDynlinkMstEn_MASK                         0x40000
#define DxF0xE4_xA2_LcDualEndReconfigEn_OFFSET                  19
#define DxF0xE4_xA2_LcDualEndReconfigEn_WIDTH                   1
#define DxF0xE4_xA2_LcDualEndReconfigEn_MASK                    0x80000
#define DxF0xE4_xA2_LcUpconfigCapable_OFFSET                    20
#define DxF0xE4_xA2_LcUpconfigCapable_WIDTH                     1
#define DxF0xE4_xA2_LcUpconfigCapable_MASK                      0x100000
#define DxF0xE4_xA2_LcDynLanesPwrState_OFFSET                   21
#define DxF0xE4_xA2_LcDynLanesPwrState_WIDTH                    2
#define DxF0xE4_xA2_LcDynLanesPwrState_MASK                     0x600000
#define DxF0xE4_xA2_Reserved_31_23_OFFSET                       23
#define DxF0xE4_xA2_Reserved_31_23_WIDTH                        9
#define DxF0xE4_xA2_Reserved_31_23_MASK                         0xff800000

/// DxF0xE4_xA2
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              LcLinkWidth:3 ; ///<See: LcLinkWidthRd.
    UINT32                                             Reserved_3_3:1 ; ///<
    UINT32                                            LcLinkWidthRd:3 ; ///<
    UINT32                               LcReconfigArcMissingEscape:1 ; ///<Idle to Detect during a long reconfiguration.
    UINT32                                            LcReconfigNow:1 ; ///<
    UINT32                                   LcRenegotiationSupport:1 ; ///<
    UINT32                                          LcRenegotiateEn:1 ; ///<
    UINT32                                        LcShortReconfigEn:1 ; ///<1=Enable short link re-configuration
    UINT32                                     LcUpconfigureSupport:1 ; ///<
    UINT32                                         LcUpconfigureDis:1 ; ///<
    UINT32                                    LcUpcfgWaitForRcvrDis:1 ; ///<
    UINT32                                          LcUpcfgTimerSel:1 ; ///<Specifies how long the link controller waits for training sets on receivers during link upconfigure.
    UINT32                                         LcDeassertTxPdnb:1 ; ///<
    UINT32                                           LcL1ReconfigEn:1 ; ///<
    UINT32                                           LcDynlinkMstEn:1 ; ///<
    UINT32                                      LcDualEndReconfigEn:1 ; ///<
    UINT32                                        LcUpconfigCapable:1 ; ///<
    UINT32                                       LcDynLanesPwrState:2 ; ///<Controls the state of unused links after a reconfiguration.
    UINT32                                           Reserved_31_23:9 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xA2_STRUCT;

// **** DxF0xE4_xA3 Register Definition ****
// Address
#define DxF0xE4_xA3_ADDRESS                                     0xa3

// Type
#define DxF0xE4_xA3_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xA3_LcXmitNFts_OFFSET                           0
#define DxF0xE4_xA3_LcXmitNFts_WIDTH                            8
#define DxF0xE4_xA3_LcXmitNFts_MASK                             0xff
#define DxF0xE4_xA3_LcXmitNFtsOverrideEn_OFFSET                 8
#define DxF0xE4_xA3_LcXmitNFtsOverrideEn_WIDTH                  1
#define DxF0xE4_xA3_LcXmitNFtsOverrideEn_MASK                   0x100
#define DxF0xE4_xA3_LcXmitFtsBeforeRecovery_OFFSET              9
#define DxF0xE4_xA3_LcXmitFtsBeforeRecovery_WIDTH               1
#define DxF0xE4_xA3_LcXmitFtsBeforeRecovery_MASK                0x200
#define DxF0xE4_xA3_Reserved_15_10_OFFSET                       10
#define DxF0xE4_xA3_Reserved_15_10_WIDTH                        6
#define DxF0xE4_xA3_Reserved_15_10_MASK                         0xfc00
#define DxF0xE4_xA3_LcXmitNFtsLimit_OFFSET                      16
#define DxF0xE4_xA3_LcXmitNFtsLimit_WIDTH                       8
#define DxF0xE4_xA3_LcXmitNFtsLimit_MASK                        0xff0000
#define DxF0xE4_xA3_LcNFts_OFFSET                               24
#define DxF0xE4_xA3_LcNFts_WIDTH                                8
#define DxF0xE4_xA3_LcNFts_MASK                                 0xff000000

/// DxF0xE4_xA3
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               LcXmitNFts:8 ; ///<Specifies the number of FTS to sent if LcXmitNFtsOverideEn=1.
    UINT32                                     LcXmitNFtsOverrideEn:1 ; ///<
    UINT32                                  LcXmitFtsBeforeRecovery:1 ; ///<
    UINT32                                           Reserved_15_10:6 ; ///<
    UINT32                                          LcXmitNFtsLimit:8 ; ///<Specifies the maximum number of FTS that can be incremented when D[8:4]F0xE4_xA0[LcIncNFtsEn]=1.
    UINT32                                                   LcNFts:8 ; ///<The number of FTS captures from the other end of the link.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xA3_STRUCT;

// **** DxF0xE4_xA5 Register Definition ****
// Address
#define DxF0xE4_xA5_ADDRESS                                     0xa5

// Type
#define DxF0xE4_xA5_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xA5_LcCurrentState_OFFSET                       0
#define DxF0xE4_xA5_LcCurrentState_WIDTH                        6
#define DxF0xE4_xA5_LcCurrentState_MASK                         0x3f
#define DxF0xE4_xA5_Reserved_7_6_OFFSET                         6
#define DxF0xE4_xA5_Reserved_7_6_WIDTH                          2
#define DxF0xE4_xA5_Reserved_7_6_MASK                           0xc0
#define DxF0xE4_xA5_LcPrevState1_OFFSET                         8
#define DxF0xE4_xA5_LcPrevState1_WIDTH                          6
#define DxF0xE4_xA5_LcPrevState1_MASK                           0x3f00
#define DxF0xE4_xA5_Reserved_15_14_OFFSET                       14
#define DxF0xE4_xA5_Reserved_15_14_WIDTH                        2
#define DxF0xE4_xA5_Reserved_15_14_MASK                         0xc000
#define DxF0xE4_xA5_LcPrevState2_OFFSET                         16
#define DxF0xE4_xA5_LcPrevState2_WIDTH                          6
#define DxF0xE4_xA5_LcPrevState2_MASK                           0x3f0000
#define DxF0xE4_xA5_Reserved_23_22_OFFSET                       22
#define DxF0xE4_xA5_Reserved_23_22_WIDTH                        2
#define DxF0xE4_xA5_Reserved_23_22_MASK                         0xc00000
#define DxF0xE4_xA5_LcPrevState3_OFFSET                         24
#define DxF0xE4_xA5_LcPrevState3_WIDTH                          6
#define DxF0xE4_xA5_LcPrevState3_MASK                           0x3f000000
#define DxF0xE4_xA5_Reserved_31_30_OFFSET                       30
#define DxF0xE4_xA5_Reserved_31_30_WIDTH                        2
#define DxF0xE4_xA5_Reserved_31_30_MASK                         0xc0000000

/// DxF0xE4_xA5
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                           LcCurrentState:6 ; ///<See: Table 141.
    UINT32                                             Reserved_7_6:2 ; ///<
    UINT32                                             LcPrevState1:6 ; ///<See: Table 141.
    UINT32                                           Reserved_15_14:2 ; ///<
    UINT32                                             LcPrevState2:6 ; ///<See: Table 141.
    UINT32                                           Reserved_23_22:2 ; ///<
    UINT32                                             LcPrevState3:6 ; ///<See: Table 141.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xA5_STRUCT;

// **** DxF0xE4_xB1 Register Definition ****
// Address
#define DxF0xE4_xB1_ADDRESS                                     0xb1

// Type
#define DxF0xE4_xB1_TYPE                                        TYPE_D4F0xE4
// Field Data
#define DxF0xE4_xB1_LcTimedOutState_OFFSET                      0
#define DxF0xE4_xB1_LcTimedOutState_WIDTH                       6
#define DxF0xE4_xB1_LcTimedOutState_MASK                        0x3f
#define DxF0xE4_xB1_LcTimedOut_OFFSET                           6
#define DxF0xE4_xB1_LcTimedOut_WIDTH                            1
#define DxF0xE4_xB1_LcTimedOut_MASK                             0x40
#define DxF0xE4_xB1_LcLookForBwReduction_OFFSET                 7
#define DxF0xE4_xB1_LcLookForBwReduction_WIDTH                  1
#define DxF0xE4_xB1_LcLookForBwReduction_MASK                   0x80
#define DxF0xE4_xB1_LcMoreTs2En_OFFSET                          8
#define DxF0xE4_xB1_LcMoreTs2En_WIDTH                           1
#define DxF0xE4_xB1_LcMoreTs2En_MASK                            0x100
#define DxF0xE4_xB1_LcX12NegotiationDis_OFFSET                  9
#define DxF0xE4_xB1_LcX12NegotiationDis_WIDTH                   1
#define DxF0xE4_xB1_LcX12NegotiationDis_MASK                    0x200
#define DxF0xE4_xB1_LcLinkUpReversalEn_OFFSET                   10
#define DxF0xE4_xB1_LcLinkUpReversalEn_WIDTH                    1
#define DxF0xE4_xB1_LcLinkUpReversalEn_MASK                     0x400
#define DxF0xE4_xB1_LcIllegalState_OFFSET                       11
#define DxF0xE4_xB1_LcIllegalState_WIDTH                        1
#define DxF0xE4_xB1_LcIllegalState_MASK                         0x800
#define DxF0xE4_xB1_LcIllegalStateRestartEn_OFFSET              12
#define DxF0xE4_xB1_LcIllegalStateRestartEn_WIDTH               1
#define DxF0xE4_xB1_LcIllegalStateRestartEn_MASK                0x1000
#define DxF0xE4_xB1_LcWaitForOtherLanesMode_OFFSET              13
#define DxF0xE4_xB1_LcWaitForOtherLanesMode_WIDTH               1
#define DxF0xE4_xB1_LcWaitForOtherLanesMode_MASK                0x2000
#define DxF0xE4_xB1_LcElecIdleMode_OFFSET                       14
#define DxF0xE4_xB1_LcElecIdleMode_WIDTH                        2
#define DxF0xE4_xB1_LcElecIdleMode_MASK                         0xc000
#define DxF0xE4_xB1_LcDisableInferredElecIdleDetect_OFFSET      16
#define DxF0xE4_xB1_LcDisableInferredElecIdleDetect_WIDTH       1
#define DxF0xE4_xB1_LcDisableInferredElecIdleDetect_MASK        0x10000
#define DxF0xE4_xB1_Reserved_18_17_OFFSET                       17
#define DxF0xE4_xB1_Reserved_18_17_WIDTH                        2
#define DxF0xE4_xB1_Reserved_18_17_MASK                         0x60000
#define DxF0xE4_xB1_LcDeassertRxEnInL0s_OFFSET                  19
#define DxF0xE4_xB1_LcDeassertRxEnInL0s_WIDTH                   1
#define DxF0xE4_xB1_LcDeassertRxEnInL0s_MASK                    0x80000
#define DxF0xE4_xB1_LcBlockElIdleinL0_OFFSET                    20
#define DxF0xE4_xB1_LcBlockElIdleinL0_WIDTH                     1
#define DxF0xE4_xB1_LcBlockElIdleinL0_MASK                      0x100000
#define DxF0xE4_xB1_LcRcvL0toRcvL0sDis_OFFSET                   21
#define DxF0xE4_xB1_LcRcvL0toRcvL0sDis_WIDTH                    1
#define DxF0xE4_xB1_LcRcvL0toRcvL0sDis_MASK                     0x200000
#define DxF0xE4_xB1_LcAssertInactiveDuringHold_OFFSET           22
#define DxF0xE4_xB1_LcAssertInactiveDuringHold_WIDTH            1
#define DxF0xE4_xB1_LcAssertInactiveDuringHold_MASK             0x400000
#define DxF0xE4_xB1_LcWaitForLanesInLwNeg_OFFSET                23
#define DxF0xE4_xB1_LcWaitForLanesInLwNeg_WIDTH                 2
#define DxF0xE4_xB1_LcWaitForLanesInLwNeg_MASK                  0x1800000
#define DxF0xE4_xB1_LcPwrDownNegOffLanes_OFFSET                 25
#define DxF0xE4_xB1_LcPwrDownNegOffLanes_WIDTH                  1
#define DxF0xE4_xB1_LcPwrDownNegOffLanes_MASK                   0x2000000
#define DxF0xE4_xB1_LcDisableLostSymLockArcs_OFFSET             26
#define DxF0xE4_xB1_LcDisableLostSymLockArcs_WIDTH              1
#define DxF0xE4_xB1_LcDisableLostSymLockArcs_MASK               0x4000000
#define DxF0xE4_xB1_LcLinkBwNotificationDis_OFFSET              27
#define DxF0xE4_xB1_LcLinkBwNotificationDis_WIDTH               1
#define DxF0xE4_xB1_LcLinkBwNotificationDis_MASK                0x8000000
#define DxF0xE4_xB1_Reserved_28_28_OFFSET                       28
#define DxF0xE4_xB1_Reserved_28_28_WIDTH                        1
#define DxF0xE4_xB1_Reserved_28_28_MASK                         0x10000000
#define DxF0xE4_xB1_LcTestTimerSel_OFFSET                       29
#define DxF0xE4_xB1_LcTestTimerSel_WIDTH                        2
#define DxF0xE4_xB1_LcTestTimerSel_MASK                         0x60000000
#define DxF0xE4_xB1_ElecIdleForPi_OFFSET                        31
#define DxF0xE4_xB1_ElecIdleForPi_WIDTH                         1
#define DxF0xE4_xB1_ElecIdleForPi_MASK                          0x80000000

/// DxF0xE4_xB1
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                          LcTimedOutState:6 ; ///<Link controller state when the deadman timer expired.
    UINT32                                               LcTimedOut:1 ; ///<
    UINT32                                     LcLookForBwReduction:1 ; ///<
    UINT32                                              LcMoreTs2En:1 ; ///<
    UINT32                                      LcX12NegotiationDis:1 ; ///<
    UINT32                                       LcLinkUpReversalEn:1 ; ///<
    UINT32                                           LcIllegalState:1 ; ///<
    UINT32                                  LcIllegalStateRestartEn:1 ; ///<
    UINT32                                  LcWaitForOtherLanesMode:1 ; ///<
    UINT32                                           LcElecIdleMode:2 ; ///<Specifies the electrical idle entry and exit mode.
    UINT32                          LcDisableInferredElecIdleDetect:1 ; ///<
    UINT32                                           Reserved_18_17:2 ; ///<
    UINT32                                      LcDeassertRxEnInL0s:1 ; ///<
    UINT32                                        LcBlockElIdleinL0:1 ; ///<
    UINT32                                       LcRcvL0toRcvL0sDis:1 ; ///<1=Disable the receiver from transitions from L0 to L0s
    UINT32                               LcAssertInactiveDuringHold:1 ; ///<
    UINT32                                    LcWaitForLanesInLwNeg:2 ; ///<Controls how long the LTSSM waits for lanes during link width negotiation if D[8:4]F0xE4_xA2[LcUpcfgTimerSel]=1.
    UINT32                                     LcPwrDownNegOffLanes:1 ; ///<
    UINT32                                 LcDisableLostSymLockArcs:1 ; ///<idle or recovery.idle to Recovery.RcvrLock when a training set is received.
    UINT32                                  LcLinkBwNotificationDis:1 ; ///<
    UINT32                                           Reserved_28_28:1 ; ///<
    UINT32                                           LcTestTimerSel:2 ; ///<Controls LTSSM timeout values.
    UINT32                                            ElecIdleForPi:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} DxF0xE4_xB1_STRUCT;

// **** GMMx00 Register Definition ****
// Address
#define GMMx00_ADDRESS                                          0x0

// Type
#define GMMx00_TYPE                                             TYPE_GMM
// Field Data
#define GMMx00_Offset_OFFSET                                    0
#define GMMx00_Offset_WIDTH                                     31
#define GMMx00_Offset_MASK                                      0x7fffffff
#define GMMx00_Aper_OFFSET                                      31
#define GMMx00_Aper_WIDTH                                       1
#define GMMx00_Aper_MASK                                        0x80000000

/// GMMx00
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   Offset:31; ///<Specifies the offset to be accessed. All accesses must be doubleword aligned, therefore, bits 1:0 are tied to zero.
    UINT32                                                     Aper:1 ; ///<Selects the aperture the offset is for.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx00_STRUCT;

// **** GMMx04 Register Definition ****
// Address
#define GMMx04_ADDRESS                                          0x4

// Type
#define GMMx04_TYPE                                             TYPE_GMM
// Field Data
#define GMMx04_Data_OFFSET                                      0
#define GMMx04_Data_WIDTH                                       32
#define GMMx04_Data_MASK                                        0xffffffff

/// GMMx04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Data:32; ///<Data read from or written to the offset specified in GMMx00.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx04_STRUCT;

// **** GMMx2014 Register Definition ****
// Address
#define GMMx2014_ADDRESS                                        0x2014

// Type
#define GMMx2014_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2014_Rlc_OFFSET                                     0
#define GMMx2014_Rlc_WIDTH                                      4
#define GMMx2014_Rlc_MASK                                       0xf
#define GMMx2014_Vmc_OFFSET                                     4
#define GMMx2014_Vmc_WIDTH                                      4
#define GMMx2014_Vmc_MASK                                       0xf0
#define GMMx2014_Dmif_OFFSET                                    8
#define GMMx2014_Dmif_WIDTH                                     4
#define GMMx2014_Dmif_MASK                                      0xf00
#define GMMx2014_Mcif_OFFSET                                    12
#define GMMx2014_Mcif_WIDTH                                     4
#define GMMx2014_Mcif_MASK                                      0xf000
#define GMMx2014_Reserved_31_16_OFFSET                          16
#define GMMx2014_Reserved_31_16_WIDTH                           16
#define GMMx2014_Reserved_31_16_MASK                            0xffff0000

/// GMMx2014
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Rlc:4 ; ///<
    UINT32                                                      Vmc:4 ; ///<
    UINT32                                                     Dmif:4 ; ///<
    UINT32                                                     Mcif:4 ; ///<
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2014_STRUCT;

// **** GMMx2018 Register Definition ****
// Address
#define GMMx2018_ADDRESS                                        0x2018

// Type
#define GMMx2018_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2018_Ih_OFFSET                                      0
#define GMMx2018_Ih_WIDTH                                       4
#define GMMx2018_Ih_MASK                                        0xf
#define GMMx2018_Mcif_OFFSET                                    4
#define GMMx2018_Mcif_WIDTH                                     4
#define GMMx2018_Mcif_MASK                                      0xf0
#define GMMx2018_Rlc_OFFSET                                     8
#define GMMx2018_Rlc_WIDTH                                      4
#define GMMx2018_Rlc_MASK                                       0xf00
#define GMMx2018_Vip_OFFSET                                     12
#define GMMx2018_Vip_WIDTH                                      4
#define GMMx2018_Vip_MASK                                       0xf000
#define GMMx2018_Reserved_31_16_OFFSET                          16
#define GMMx2018_Reserved_31_16_WIDTH                           16
#define GMMx2018_Reserved_31_16_MASK                            0xffff0000

/// GMMx2018
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                       Ih:4 ; ///<
    UINT32                                                     Mcif:4 ; ///<
    UINT32                                                      Rlc:4 ; ///<
    UINT32                                                      Vip:4 ; ///<
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2018_STRUCT;

// **** GMMx201C Register Definition ****
// Address
#define GMMx201C_ADDRESS                                        0x201c

// Type
#define GMMx201C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx201C_UvdExt0_OFFSET                                 0
#define GMMx201C_UvdExt0_WIDTH                                  4
#define GMMx201C_UvdExt0_MASK                                   0xf
#define GMMx201C_DrmDma_OFFSET                                  4
#define GMMx201C_DrmDma_WIDTH                                   4
#define GMMx201C_DrmDma_MASK                                    0xf0
#define GMMx201C_Hdp_OFFSET                                     8
#define GMMx201C_Hdp_WIDTH                                      4
#define GMMx201C_Hdp_MASK                                       0xf00
#define GMMx201C_Sem_OFFSET                                     12
#define GMMx201C_Sem_WIDTH                                      4
#define GMMx201C_Sem_MASK                                       0xf000
#define GMMx201C_Umc_OFFSET                                     16
#define GMMx201C_Umc_WIDTH                                      4
#define GMMx201C_Umc_MASK                                       0xf0000
#define GMMx201C_Uvd_OFFSET                                     20
#define GMMx201C_Uvd_WIDTH                                      4
#define GMMx201C_Uvd_MASK                                       0xf00000
#define GMMx201C_UvdExt1_OFFSET                                 24
#define GMMx201C_UvdExt1_WIDTH                                  4
#define GMMx201C_UvdExt1_MASK                                   0xf000000
#define GMMx201C_Reserved_31_28_OFFSET                          28
#define GMMx201C_Reserved_31_28_WIDTH                           4
#define GMMx201C_Reserved_31_28_MASK                            0xf0000000

/// GMMx201C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  UvdExt0:4 ; ///<
    UINT32                                                   DrmDma:4 ; ///<
    UINT32                                                      Hdp:4 ; ///<
    UINT32                                                      Sem:4 ; ///<
    UINT32                                                      Umc:4 ; ///<
    UINT32                                                      Uvd:4 ; ///<
    UINT32                                                  UvdExt1:4 ; ///<
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx201C_STRUCT;

// **** GMMx2020 Register Definition ****
// Address
#define GMMx2020_ADDRESS                                        0x2020

// Type
#define GMMx2020_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2020_UvdExt0_OFFSET                                 0
#define GMMx2020_UvdExt0_WIDTH                                  4
#define GMMx2020_UvdExt0_MASK                                   0xf
#define GMMx2020_DrmDma_OFFSET                                  4
#define GMMx2020_DrmDma_WIDTH                                   4
#define GMMx2020_DrmDma_MASK                                    0xf0
#define GMMx2020_Hdp_OFFSET                                     8
#define GMMx2020_Hdp_WIDTH                                      4
#define GMMx2020_Hdp_MASK                                       0xf00
#define GMMx2020_Sem_OFFSET                                     12
#define GMMx2020_Sem_WIDTH                                      4
#define GMMx2020_Sem_MASK                                       0xf000
#define GMMx2020_Umc_OFFSET                                     16
#define GMMx2020_Umc_WIDTH                                      4
#define GMMx2020_Umc_MASK                                       0xf0000
#define GMMx2020_Uvd_OFFSET                                     20
#define GMMx2020_Uvd_WIDTH                                      4
#define GMMx2020_Uvd_MASK                                       0xf00000
#define GMMx2020_Xdp_OFFSET                                     24
#define GMMx2020_Xdp_WIDTH                                      4
#define GMMx2020_Xdp_MASK                                       0xf000000
#define GMMx2020_UvdExt1_OFFSET                                 28
#define GMMx2020_UvdExt1_WIDTH                                  4
#define GMMx2020_UvdExt1_MASK                                   0xf0000000

/// GMMx2020
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  UvdExt0:4 ; ///<
    UINT32                                                   DrmDma:4 ; ///<
    UINT32                                                      Hdp:4 ; ///<
    UINT32                                                      Sem:4 ; ///<
    UINT32                                                      Umc:4 ; ///<
    UINT32                                                      Uvd:4 ; ///<
    UINT32                                                      Xdp:4 ; ///<
    UINT32                                                  UvdExt1:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2020_STRUCT;

// **** GMMx217C Register Definition ****
// Address
#define GMMx217C_ADDRESS                                        0x217c

// Type
#define GMMx217C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx217C_Enable_OFFSET                                  0
#define GMMx217C_Enable_WIDTH                                   1
#define GMMx217C_Enable_MASK                                    0x1
#define GMMx217C_Prescale_OFFSET                                1
#define GMMx217C_Prescale_WIDTH                                 2
#define GMMx217C_Prescale_MASK                                  0x6
#define GMMx217C_BlackoutExempt_OFFSET                          3
#define GMMx217C_BlackoutExempt_WIDTH                           1
#define GMMx217C_BlackoutExempt_MASK                            0x8
#define GMMx217C_StallMode_OFFSET                               4
#define GMMx217C_StallMode_WIDTH                                2
#define GMMx217C_StallMode_MASK                                 0x30
#define GMMx217C_StallOverride_OFFSET                           6
#define GMMx217C_StallOverride_WIDTH                            1
#define GMMx217C_StallOverride_MASK                             0x40
#define GMMx217C_MaxBurst_OFFSET                                7
#define GMMx217C_MaxBurst_WIDTH                                 4
#define GMMx217C_MaxBurst_MASK                                  0x780
#define GMMx217C_LazyTimer_OFFSET                               11
#define GMMx217C_LazyTimer_WIDTH                                4
#define GMMx217C_LazyTimer_MASK                                 0x7800
#define GMMx217C_StallOverrideWtm_OFFSET                        15
#define GMMx217C_StallOverrideWtm_WIDTH                         1
#define GMMx217C_StallOverrideWtm_MASK                          0x8000
#define GMMx217C_Reserved_19_16_OFFSET                          16
#define GMMx217C_Reserved_19_16_WIDTH                           4
#define GMMx217C_Reserved_19_16_MASK                            0xf0000
#define GMMx217C_Reserved_31_20_OFFSET                          20
#define GMMx217C_Reserved_31_20_WIDTH                           12
#define GMMx217C_Reserved_31_20_MASK                            0xfff00000

/// GMMx217C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 Prescale:2 ; ///<Prescaler for client urgency signal and outstanding request count.
    UINT32                                           BlackoutExempt:1 ; ///<
    UINT32                                                StallMode:2 ; ///<How the client stall signal is used in weight manager.
    UINT32                                            StallOverride:1 ; ///<
    UINT32                                                 MaxBurst:4 ; ///<Maximum number of goes (MaxBurst+1) given to a client before arbitration changes to another client.
    UINT32                                                LazyTimer:4 ; ///<Maximum number of cycles to wait after 1st ask before the first go can be issued.
    UINT32                                         StallOverrideWtm:1 ; ///<
    UINT32                                           Reserved_19_16:4 ; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx217C_STRUCT;

// **** GMMx2188 Register Definition ****
// Address
#define GMMx2188_ADDRESS                                        0x2188

// Type
#define GMMx2188_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2188_Enable_OFFSET                                  0
#define GMMx2188_Enable_WIDTH                                   1
#define GMMx2188_Enable_MASK                                    0x1
#define GMMx2188_Prescale_OFFSET                                1
#define GMMx2188_Prescale_WIDTH                                 2
#define GMMx2188_Prescale_MASK                                  0x6
#define GMMx2188_BlackoutExempt_OFFSET                          3
#define GMMx2188_BlackoutExempt_WIDTH                           1
#define GMMx2188_BlackoutExempt_MASK                            0x8
#define GMMx2188_StallMode_OFFSET                               4
#define GMMx2188_StallMode_WIDTH                                2
#define GMMx2188_StallMode_MASK                                 0x30
#define GMMx2188_StallOverride_OFFSET                           6
#define GMMx2188_StallOverride_WIDTH                            1
#define GMMx2188_StallOverride_MASK                             0x40
#define GMMx2188_MaxBurst_OFFSET                                7
#define GMMx2188_MaxBurst_WIDTH                                 4
#define GMMx2188_MaxBurst_MASK                                  0x780
#define GMMx2188_LazyTimer_OFFSET                               11
#define GMMx2188_LazyTimer_WIDTH                                4
#define GMMx2188_LazyTimer_MASK                                 0x7800
#define GMMx2188_StallOverrideWtm_OFFSET                        15
#define GMMx2188_StallOverrideWtm_WIDTH                         1
#define GMMx2188_StallOverrideWtm_MASK                          0x8000
#define GMMx2188_ReqLimit_OFFSET                                16
#define GMMx2188_ReqLimit_WIDTH                                 4
#define GMMx2188_ReqLimit_MASK                                  0xf0000
#define GMMx2188_Reserved_31_20_OFFSET                          20
#define GMMx2188_Reserved_31_20_WIDTH                           12
#define GMMx2188_Reserved_31_20_MASK                            0xfff00000

/// GMMx2188
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 Prescale:2 ; ///<Prescaler for client urgency signal and outstanding request count.
    UINT32                                           BlackoutExempt:1 ; ///<
    UINT32                                                StallMode:2 ; ///<How the client stall signal is used in weight manager.
    UINT32                                            StallOverride:1 ; ///<
    UINT32                                                 MaxBurst:4 ; ///<Maximum number of goes (MaxBurst+1) given to a client before arbitration changes to another client.
    UINT32                                                LazyTimer:4 ; ///<Maximum number of cycles to wait after 1st ask before the first go can be issued.
    UINT32                                         StallOverrideWtm:1 ; ///<
    UINT32                                                 ReqLimit:4 ; ///<
    UINT32                                           Reserved_31_20:12; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2188_STRUCT;

// **** GMMx21C8 Register Definition ****
// Address
#define GMMx21C8_ADDRESS                                        0x21c8

// Type
#define GMMx21C8_TYPE                                           TYPE_GMM
// Field Data
#define GMMx21C8_Enable_OFFSET                                  0
#define GMMx21C8_Enable_WIDTH                                   1
#define GMMx21C8_Enable_MASK                                    0x1
#define GMMx21C8_Prescale_OFFSET                                1
#define GMMx21C8_Prescale_WIDTH                                 2
#define GMMx21C8_Prescale_MASK                                  0x6
#define GMMx21C8_BlackoutExempt_OFFSET                          3
#define GMMx21C8_BlackoutExempt_WIDTH                           1
#define GMMx21C8_BlackoutExempt_MASK                            0x8
#define GMMx21C8_StallMode_OFFSET                               4
#define GMMx21C8_StallMode_WIDTH                                2
#define GMMx21C8_StallMode_MASK                                 0x30
#define GMMx21C8_StallOverride_OFFSET                           6
#define GMMx21C8_StallOverride_WIDTH                            1
#define GMMx21C8_StallOverride_MASK                             0x40
#define GMMx21C8_MaxBurst_OFFSET                                7
#define GMMx21C8_MaxBurst_WIDTH                                 4
#define GMMx21C8_MaxBurst_MASK                                  0x780
#define GMMx21C8_LazyTimer_OFFSET                               11
#define GMMx21C8_LazyTimer_WIDTH                                4
#define GMMx21C8_LazyTimer_MASK                                 0x7800
#define GMMx21C8_StallOverrideWtm_OFFSET                        15
#define GMMx21C8_StallOverrideWtm_WIDTH                         1
#define GMMx21C8_StallOverrideWtm_MASK                          0x8000
#define GMMx21C8_Reserved_31_16_OFFSET                          16
#define GMMx21C8_Reserved_31_16_WIDTH                           16
#define GMMx21C8_Reserved_31_16_MASK                            0xffff0000

/// GMMx21C8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   Enable:1 ; ///<
    UINT32                                                 Prescale:2 ; ///<Prescaler for client urgency signal and outstanding request count.
    UINT32                                           BlackoutExempt:1 ; ///<
    UINT32                                                StallMode:2 ; ///<How the client stall signal is used in weight manager.
    UINT32                                            StallOverride:1 ; ///<
    UINT32                                                 MaxBurst:4 ; ///<Maximum number of goes (MaxBurst+1) given to a client before arbitration changes to another client.
    UINT32                                                LazyTimer:4 ; ///<Maximum number of cycles to wait after the first ask before the first go can be issued.
    UINT32                                         StallOverrideWtm:1 ; ///<
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx21C8_STRUCT;

// **** GMMx25C0 Register Definition ****
// Address
#define GMMx25C0_ADDRESS                                        0x25c0

// Type
#define GMMx25C0_TYPE                                           TYPE_GMM
// Field Data
#define GMMx25C0_BlackoutRd_OFFSET                              0
#define GMMx25C0_BlackoutRd_WIDTH                               1
#define GMMx25C0_BlackoutRd_MASK                                0x1
#define GMMx25C0_BlackoutWr_OFFSET                              1
#define GMMx25C0_BlackoutWr_WIDTH                               1
#define GMMx25C0_BlackoutWr_MASK                                0x2
#define GMMx25C0_IgnorePm_OFFSET                                2
#define GMMx25C0_IgnorePm_WIDTH                                 1
#define GMMx25C0_IgnorePm_MASK                                  0x4
#define GMMx25C0_ExemptPm_OFFSET                                3
#define GMMx25C0_ExemptPm_WIDTH                                 1
#define GMMx25C0_ExemptPm_MASK                                  0x8
#define GMMx25C0_GfxIdleOverride_OFFSET                         4
#define GMMx25C0_GfxIdleOverride_WIDTH                          2
#define GMMx25C0_GfxIdleOverride_MASK                           0x30
#define GMMx25C0_Reserved_13_6_OFFSET                           6
#define GMMx25C0_Reserved_13_6_WIDTH                            8
#define GMMx25C0_Reserved_13_6_MASK                             0x3fc0
#define GMMx25C0_Reserved_31_14_OFFSET                          14
#define GMMx25C0_Reserved_31_14_WIDTH                           18
#define GMMx25C0_Reserved_31_14_MASK                            0xffffc000

/// GMMx25C0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               BlackoutRd:1 ; ///<
    UINT32                                               BlackoutWr:1 ; ///<
    UINT32                                                 IgnorePm:1 ; ///<
    UINT32                                                 ExemptPm:1 ; ///<
    UINT32                                          GfxIdleOverride:2 ; ///<override default behavior of GFX idle signal.
    UINT32                                            Reserved_13_6:8 ; ///<dummy bits for future chicken-bit usage.
    UINT32                                           Reserved_31_14:18; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx25C0_STRUCT;

// **** GMMx25C8 Register Definition ****
// Address
#define GMMx25C8_ADDRESS                                        0x25c8

// Type
#define GMMx25C8_TYPE                                           TYPE_GMM
// Field Data
#define GMMx25C8_ReadLcl_OFFSET                                 0
#define GMMx25C8_ReadLcl_WIDTH                                  8
#define GMMx25C8_ReadLcl_MASK                                   0xff
#define GMMx25C8_ReadHub_OFFSET                                 8
#define GMMx25C8_ReadHub_WIDTH                                  8
#define GMMx25C8_ReadHub_MASK                                   0xff00
#define GMMx25C8_ReadPri_OFFSET                                 16
#define GMMx25C8_ReadPri_WIDTH                                  8
#define GMMx25C8_ReadPri_MASK                                   0xff0000
#define GMMx25C8_LclPri_OFFSET                                  24
#define GMMx25C8_LclPri_WIDTH                                   1
#define GMMx25C8_LclPri_MASK                                    0x1000000
#define GMMx25C8_HubPri_OFFSET                                  25
#define GMMx25C8_HubPri_WIDTH                                   1
#define GMMx25C8_HubPri_MASK                                    0x2000000
#define GMMx25C8_Reserved_31_26_OFFSET                          26
#define GMMx25C8_Reserved_31_26_WIDTH                           6
#define GMMx25C8_Reserved_31_26_MASK                            0xfc000000

/// GMMx25C8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  ReadLcl:8 ; ///<Specifies the number of entries available for local read requests.
    UINT32                                                  ReadHub:8 ; ///<Specifies the number of entries available for non-priority remote read requests.
    UINT32                                                  ReadPri:8 ; ///<Specifies the number of entries available for priority remote read requests.
    UINT32                                                   LclPri:1 ; ///<
    UINT32                                                   HubPri:1 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx25C8_STRUCT;

// **** GMMx25CC Register Definition ****
// Address
#define GMMx25CC_ADDRESS                                        0x25cc

// Type
#define GMMx25CC_TYPE                                           TYPE_GMM
// Field Data
#define GMMx25CC_WriteLcl_OFFSET                                0
#define GMMx25CC_WriteLcl_WIDTH                                 8
#define GMMx25CC_WriteLcl_MASK                                  0xff
#define GMMx25CC_WriteHub_OFFSET                                8
#define GMMx25CC_WriteHub_WIDTH                                 8
#define GMMx25CC_WriteHub_MASK                                  0xff00
#define GMMx25CC_HubPri_OFFSET                                  16
#define GMMx25CC_HubPri_WIDTH                                   1
#define GMMx25CC_HubPri_MASK                                    0x10000
#define GMMx25CC_Reserved_31_17_OFFSET                          17
#define GMMx25CC_Reserved_31_17_WIDTH                           15
#define GMMx25CC_Reserved_31_17_MASK                            0xfffe0000

/// GMMx25CC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 WriteLcl:8 ; ///<Specifies the number of entries available for local write requests.
    UINT32                                                 WriteHub:8 ; ///<Specifies the number of entries available for remote write requests.
    UINT32                                                   HubPri:1 ; ///<
    UINT32                                           Reserved_31_17:15; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx25CC_STRUCT;

// **** GMMx2610 Register Definition ****
// Address
#define GMMx2610_ADDRESS                                        0x2610

// Type
#define GMMx2610_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2610_TctFetch0_OFFSET                               0
#define GMMx2610_TctFetch0_WIDTH                                4
#define GMMx2610_TctFetch0_MASK                                 0xf
#define GMMx2610_TcvFetch0_OFFSET                               4
#define GMMx2610_TcvFetch0_WIDTH                                4
#define GMMx2610_TcvFetch0_MASK                                 0xf0
#define GMMx2610_Vc0_OFFSET                                     8
#define GMMx2610_Vc0_WIDTH                                      4
#define GMMx2610_Vc0_MASK                                       0xf00
#define GMMx2610_Cb0_OFFSET                                     12
#define GMMx2610_Cb0_WIDTH                                      4
#define GMMx2610_Cb0_MASK                                       0xf000
#define GMMx2610_CbcMask0_OFFSET                                16
#define GMMx2610_CbcMask0_WIDTH                                 4
#define GMMx2610_CbcMask0_MASK                                  0xf0000
#define GMMx2610_CbfMask0_OFFSET                                20
#define GMMx2610_CbfMask0_WIDTH                                 4
#define GMMx2610_CbfMask0_MASK                                  0xf00000
#define GMMx2610_Db0_OFFSET                                     24
#define GMMx2610_Db0_WIDTH                                      4
#define GMMx2610_Db0_MASK                                       0xf000000
#define GMMx2610_DbhTile0_OFFSET                                28
#define GMMx2610_DbhTile0_WIDTH                                 4
#define GMMx2610_DbhTile0_MASK                                  0xf0000000

/// GMMx2610
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                TctFetch0:4 ; ///<tc/vc groups cannot overlap with any other clients.
    UINT32                                                TcvFetch0:4 ; ///<tc/vc groups cannot overlap with any other clients.
    UINT32                                                      Vc0:4 ; ///<tc/vc groups cannot overlap with any other clients.
    UINT32                                                      Cb0:4 ; ///<
    UINT32                                                 CbcMask0:4 ; ///<
    UINT32                                                 CbfMask0:4 ; ///<
    UINT32                                                      Db0:4 ; ///<
    UINT32                                                 DbhTile0:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2610_STRUCT;

// **** GMMx2614 Register Definition ****
// Address
#define GMMx2614_ADDRESS                                        0x2614

// Type
#define GMMx2614_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2614_Cb0_OFFSET                                     0
#define GMMx2614_Cb0_WIDTH                                      4
#define GMMx2614_Cb0_MASK                                       0xf
#define GMMx2614_CbcMask0_OFFSET                                4
#define GMMx2614_CbcMask0_WIDTH                                 4
#define GMMx2614_CbcMask0_MASK                                  0xf0
#define GMMx2614_CbfMask0_OFFSET                                8
#define GMMx2614_CbfMask0_WIDTH                                 4
#define GMMx2614_CbfMask0_MASK                                  0xf00
#define GMMx2614_Db0_OFFSET                                     12
#define GMMx2614_Db0_WIDTH                                      4
#define GMMx2614_Db0_MASK                                       0xf000
#define GMMx2614_DbhTile0_OFFSET                                16
#define GMMx2614_DbhTile0_WIDTH                                 4
#define GMMx2614_DbhTile0_MASK                                  0xf0000
#define GMMx2614_Sx0_OFFSET                                     20
#define GMMx2614_Sx0_WIDTH                                      4
#define GMMx2614_Sx0_MASK                                       0xf00000
#define GMMx2614_Bcast0_OFFSET                                  24
#define GMMx2614_Bcast0_WIDTH                                   4
#define GMMx2614_Bcast0_MASK                                    0xf000000
#define GMMx2614_Cbimmed0_OFFSET                                28
#define GMMx2614_Cbimmed0_WIDTH                                 4
#define GMMx2614_Cbimmed0_MASK                                  0xf0000000

/// GMMx2614
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Cb0:4 ; ///<
    UINT32                                                 CbcMask0:4 ; ///<
    UINT32                                                 CbfMask0:4 ; ///<
    UINT32                                                      Db0:4 ; ///<
    UINT32                                                 DbhTile0:4 ; ///<
    UINT32                                                      Sx0:4 ; ///<
    UINT32                                                   Bcast0:4 ; ///<
    UINT32                                                 Cbimmed0:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2614_STRUCT;

// **** GMMx2618 Register Definition ****
// Address
#define GMMx2618_ADDRESS                                        0x2618

// Type
#define GMMx2618_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2618_DbstEn0_OFFSET                                 0
#define GMMx2618_DbstEn0_WIDTH                                  4
#define GMMx2618_DbstEn0_MASK                                   0xf
#define GMMx2618_TcvFetch1_OFFSET                               4
#define GMMx2618_TcvFetch1_WIDTH                                4
#define GMMx2618_TcvFetch1_MASK                                 0xf0
#define GMMx2618_TctFetch1_OFFSET                               8
#define GMMx2618_TctFetch1_WIDTH                                4
#define GMMx2618_TctFetch1_MASK                                 0xf00
#define GMMx2618_Vc1_OFFSET                                     12
#define GMMx2618_Vc1_WIDTH                                      4
#define GMMx2618_Vc1_MASK                                       0xf000
#define GMMx2618_Reserved_31_16_OFFSET                          16
#define GMMx2618_Reserved_31_16_WIDTH                           16
#define GMMx2618_Reserved_31_16_MASK                            0xffff0000

/// GMMx2618
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  DbstEn0:4 ; ///<
    UINT32                                                TcvFetch1:4 ; ///<
    UINT32                                                TctFetch1:4 ; ///<
    UINT32                                                      Vc1:4 ; ///<
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2618_STRUCT;

// **** GMMx261C Register Definition ****
// Address
#define GMMx261C_ADDRESS                                        0x261c

// Type
#define GMMx261C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx261C_DbstEn0_OFFSET                                 0
#define GMMx261C_DbstEn0_WIDTH                                  4
#define GMMx261C_DbstEn0_MASK                                   0xf
#define GMMx261C_Reserved_31_4_OFFSET                           4
#define GMMx261C_Reserved_31_4_WIDTH                            28
#define GMMx261C_Reserved_31_4_MASK                             0xfffffff0

/// GMMx261C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  DbstEn0:4 ; ///<
    UINT32                                            Reserved_31_4:28; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx261C_STRUCT;

// **** GMMx2638 Register Definition ****
// Address
#define GMMx2638_ADDRESS                                        0x2638

// Type
#define GMMx2638_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2638_OnDly_OFFSET                                   0
#define GMMx2638_OnDly_WIDTH                                    6
#define GMMx2638_OnDly_MASK                                     0x3f
#define GMMx2638_OffDly_OFFSET                                  6
#define GMMx2638_OffDly_WIDTH                                   6
#define GMMx2638_OffDly_MASK                                    0xfc0
#define GMMx2638_RdyDly_OFFSET                                  12
#define GMMx2638_RdyDly_WIDTH                                   6
#define GMMx2638_RdyDly_MASK                                    0x3f000
#define GMMx2638_Enable_OFFSET                                  18
#define GMMx2638_Enable_WIDTH                                   1
#define GMMx2638_Enable_MASK                                    0x40000
#define GMMx2638_Reserved_31_19_OFFSET                          19
#define GMMx2638_Reserved_31_19_WIDTH                           13
#define GMMx2638_Reserved_31_19_MASK                            0xfff80000

/// GMMx2638
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    OnDly:6 ; ///<delay in clock cycles (+1) to turn on the clock after requested.
    UINT32                                                   OffDly:6 ; ///<delay in clock cycles (+1) to turn off the clock after busy goes low.
    UINT32                                                   RdyDly:6 ; ///<delay in clock cycles (+1) to turn on ready after the clock starts.
    UINT32                                                   Enable:1 ; ///<
    UINT32                                           Reserved_31_19:13; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2638_STRUCT;

// **** GMMx263C Register Definition ****
// Address
#define GMMx263C_ADDRESS                                        0x263c

// Type
#define GMMx263C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx263C_OnDly_OFFSET                                   0
#define GMMx263C_OnDly_WIDTH                                    6
#define GMMx263C_OnDly_MASK                                     0x3f
#define GMMx263C_OffDly_OFFSET                                  6
#define GMMx263C_OffDly_WIDTH                                   6
#define GMMx263C_OffDly_MASK                                    0xfc0
#define GMMx263C_RdyDly_OFFSET                                  12
#define GMMx263C_RdyDly_WIDTH                                   6
#define GMMx263C_RdyDly_MASK                                    0x3f000
#define GMMx263C_Enable_OFFSET                                  18
#define GMMx263C_Enable_WIDTH                                   1
#define GMMx263C_Enable_MASK                                    0x40000
#define GMMx263C_Reserved_31_19_OFFSET                          19
#define GMMx263C_Reserved_31_19_WIDTH                           13
#define GMMx263C_Reserved_31_19_MASK                            0xfff80000

/// GMMx263C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    OnDly:6 ; ///<delay in clock cycles (+1) to turn on the clock after requested.
    UINT32                                                   OffDly:6 ; ///<delay in clock cycles (+1) to turn off the clock after busy goes low.
    UINT32                                                   RdyDly:6 ; ///<delay in clock cycles (+1) to turn on ready after the clock starts.
    UINT32                                                   Enable:1 ; ///<
    UINT32                                           Reserved_31_19:13; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx263C_STRUCT;

// **** GMMx2640 Register Definition ****
// Address
#define GMMx2640_ADDRESS                                        0x2640

// Type
#define GMMx2640_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2640_OnDly_OFFSET                                   0
#define GMMx2640_OnDly_WIDTH                                    6
#define GMMx2640_OnDly_MASK                                     0x3f
#define GMMx2640_OffDly_OFFSET                                  6
#define GMMx2640_OffDly_WIDTH                                   6
#define GMMx2640_OffDly_MASK                                    0xfc0
#define GMMx2640_RdyDly_OFFSET                                  12
#define GMMx2640_RdyDly_WIDTH                                   6
#define GMMx2640_RdyDly_MASK                                    0x3f000
#define GMMx2640_Enable_OFFSET                                  18
#define GMMx2640_Enable_WIDTH                                   1
#define GMMx2640_Enable_MASK                                    0x40000
#define GMMx2640_Reserved_31_19_OFFSET                          19
#define GMMx2640_Reserved_31_19_WIDTH                           13
#define GMMx2640_Reserved_31_19_MASK                            0xfff80000

/// GMMx2640
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    OnDly:6 ; ///<delay in clock cycles (+1) to turn on the clock after requested.
    UINT32                                                   OffDly:6 ; ///<delay in clock cycles (+1) to turn off the clock after busy goes low.
    UINT32                                                   RdyDly:6 ; ///<delay in clock cycles (+1) to turn on ready after the clock starts.
    UINT32                                                   Enable:1 ; ///<
    UINT32                                           Reserved_31_19:13; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2640_STRUCT;

// **** GMMx2784 Register Definition ****
// Address
#define GMMx2784_ADDRESS                                        0x2784

// Type
#define GMMx2784_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2784_WtMode_OFFSET                                  0
#define GMMx2784_WtMode_WIDTH                                   2
#define GMMx2784_WtMode_MASK                                    0x3
#define GMMx2784_HarshPri_OFFSET                                2
#define GMMx2784_HarshPri_WIDTH                                 1
#define GMMx2784_HarshPri_MASK                                  0x4
#define GMMx2784_AllowStutterGrp0_OFFSET                        3
#define GMMx2784_AllowStutterGrp0_WIDTH                         1
#define GMMx2784_AllowStutterGrp0_MASK                          0x8
#define GMMx2784_AllowStutterGrp1_OFFSET                        4
#define GMMx2784_AllowStutterGrp1_WIDTH                         1
#define GMMx2784_AllowStutterGrp1_MASK                          0x10
#define GMMx2784_AllowStutterGrp2_OFFSET                        5
#define GMMx2784_AllowStutterGrp2_WIDTH                         1
#define GMMx2784_AllowStutterGrp2_MASK                          0x20
#define GMMx2784_AllowStutterGrp3_OFFSET                        6
#define GMMx2784_AllowStutterGrp3_WIDTH                         1
#define GMMx2784_AllowStutterGrp3_MASK                          0x40
#define GMMx2784_AllowStutterGrp4_OFFSET                        7
#define GMMx2784_AllowStutterGrp4_WIDTH                         1
#define GMMx2784_AllowStutterGrp4_MASK                          0x80
#define GMMx2784_AllowStutterGrp5_OFFSET                        8
#define GMMx2784_AllowStutterGrp5_WIDTH                         1
#define GMMx2784_AllowStutterGrp5_MASK                          0x100
#define GMMx2784_AllowStutterGrp6_OFFSET                        9
#define GMMx2784_AllowStutterGrp6_WIDTH                         1
#define GMMx2784_AllowStutterGrp6_MASK                          0x200
#define GMMx2784_AllowStutterGrp7_OFFSET                        10
#define GMMx2784_AllowStutterGrp7_WIDTH                         1
#define GMMx2784_AllowStutterGrp7_MASK                          0x400
#define GMMx2784_Reserved_31_11_OFFSET                          11
#define GMMx2784_Reserved_31_11_WIDTH                           21
#define GMMx2784_Reserved_31_11_MASK                            0xfffff800

/// GMMx2784
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   WtMode:2 ; ///<
    UINT32                                                 HarshPri:1 ; ///<
    UINT32                                         AllowStutterGrp0:1 ; ///<
    UINT32                                         AllowStutterGrp1:1 ; ///<
    UINT32                                         AllowStutterGrp2:1 ; ///<
    UINT32                                         AllowStutterGrp3:1 ; ///<
    UINT32                                         AllowStutterGrp4:1 ; ///<
    UINT32                                         AllowStutterGrp5:1 ; ///<
    UINT32                                         AllowStutterGrp6:1 ; ///<
    UINT32                                         AllowStutterGrp7:1 ; ///<
    UINT32                                           Reserved_31_11:21; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2784_STRUCT;

// **** GMMx279C Register Definition ****
// Address
#define GMMx279C_ADDRESS                                        0x279c

// Type
#define GMMx279C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx279C_Group0_OFFSET                                  0
#define GMMx279C_Group0_WIDTH                                   8
#define GMMx279C_Group0_MASK                                    0xff
#define GMMx279C_Group1_OFFSET                                  8
#define GMMx279C_Group1_WIDTH                                   8
#define GMMx279C_Group1_MASK                                    0xff00
#define GMMx279C_Group2_OFFSET                                  16
#define GMMx279C_Group2_WIDTH                                   8
#define GMMx279C_Group2_MASK                                    0xff0000
#define GMMx279C_Group3_OFFSET                                  24
#define GMMx279C_Group3_WIDTH                                   8
#define GMMx279C_Group3_MASK                                    0xff000000

/// GMMx279C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   Group0:8 ; ///<
    UINT32                                                   Group1:8 ; ///<
    UINT32                                                   Group2:8 ; ///<
    UINT32                                                   Group3:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx279C_STRUCT;

// **** GMMx27A0 Register Definition ****
// Address
#define GMMx27A0_ADDRESS                                        0x27a0

// Type
#define GMMx27A0_TYPE                                           TYPE_GMM
// Field Data
#define GMMx27A0_Group0_OFFSET                                  0
#define GMMx27A0_Group0_WIDTH                                   8
#define GMMx27A0_Group0_MASK                                    0xff
#define GMMx27A0_Group1_OFFSET                                  8
#define GMMx27A0_Group1_WIDTH                                   8
#define GMMx27A0_Group1_MASK                                    0xff00
#define GMMx27A0_Group2_OFFSET                                  16
#define GMMx27A0_Group2_WIDTH                                   8
#define GMMx27A0_Group2_MASK                                    0xff0000
#define GMMx27A0_Group3_OFFSET                                  24
#define GMMx27A0_Group3_WIDTH                                   8
#define GMMx27A0_Group3_MASK                                    0xff000000

/// GMMx27A0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   Group0:8 ; ///<
    UINT32                                                   Group1:8 ; ///<
    UINT32                                                   Group2:8 ; ///<
    UINT32                                                   Group3:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx27A0_STRUCT;

// **** GMMx27CC Register Definition ****
// Address
#define GMMx27CC_ADDRESS                                        0x27cc

// Type
#define GMMx27CC_TYPE                                           TYPE_GMM
// Field Data
#define GMMx27CC_StreakLimit_OFFSET                             0
#define GMMx27CC_StreakLimit_WIDTH                              8
#define GMMx27CC_StreakLimit_MASK                               0xff
#define GMMx27CC_StreakLimitUber_OFFSET                         8
#define GMMx27CC_StreakLimitUber_WIDTH                          8
#define GMMx27CC_StreakLimitUber_MASK                           0xff00
#define GMMx27CC_StreakBreak_OFFSET                             16
#define GMMx27CC_StreakBreak_WIDTH                              1
#define GMMx27CC_StreakBreak_MASK                               0x10000
#define GMMx27CC_StreakUber_OFFSET                              17
#define GMMx27CC_StreakUber_WIDTH                               1
#define GMMx27CC_StreakUber_MASK                                0x20000
#define GMMx27CC_Reserved_31_18_OFFSET                          18
#define GMMx27CC_Reserved_31_18_WIDTH                           14
#define GMMx27CC_Reserved_31_18_MASK                            0xfffc0000

/// GMMx27CC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              StreakLimit:8 ; ///<number of read transactions allowed to the same page (a streak) before forcing a page close programmed value = max_streak_length-2*8.
    UINT32                                          StreakLimitUber:8 ; ///<number of read transactions allowed to the same page (a streak) before forcing a page close when streak_uber is set and the client group is ready.
    UINT32                                              StreakBreak:1 ; ///<
    UINT32                                               StreakUber:1 ; ///<
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx27CC_STRUCT;

// **** GMMx27D0 Register Definition ****
// Address
#define GMMx27D0_ADDRESS                                        0x27d0

// Type
#define GMMx27D0_TYPE                                           TYPE_GMM
// Field Data
#define GMMx27D0_StreakLimit_OFFSET                             0
#define GMMx27D0_StreakLimit_WIDTH                              8
#define GMMx27D0_StreakLimit_MASK                               0xff
#define GMMx27D0_StreakLimitUber_OFFSET                         8
#define GMMx27D0_StreakLimitUber_WIDTH                          8
#define GMMx27D0_StreakLimitUber_MASK                           0xff00
#define GMMx27D0_StreakBreak_OFFSET                             16
#define GMMx27D0_StreakBreak_WIDTH                              1
#define GMMx27D0_StreakBreak_MASK                               0x10000
#define GMMx27D0_StreakUber_OFFSET                              17
#define GMMx27D0_StreakUber_WIDTH                               1
#define GMMx27D0_StreakUber_MASK                                0x20000
#define GMMx27D0_Reserved_31_18_OFFSET                          18
#define GMMx27D0_Reserved_31_18_WIDTH                           14
#define GMMx27D0_Reserved_31_18_MASK                            0xfffc0000

/// GMMx27D0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              StreakLimit:8 ; ///<number of read transactions allowed to the same page (a streak) before forcing a page close programmed value = max_streak_length-2*8.
    UINT32                                          StreakLimitUber:8 ; ///<number of read transactions allowed to the same page (a streak) before forcing a page close when streak_uber is set and the client group is ready.
    UINT32                                              StreakBreak:1 ; ///<
    UINT32                                               StreakUber:1 ; ///<
    UINT32                                           Reserved_31_18:14; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx27D0_STRUCT;

// **** GMMx27DC Register Definition ****
// Address
#define GMMx27DC_ADDRESS                                        0x27dc

// Type
#define GMMx27DC_TYPE                                           TYPE_GMM
// Field Data
#define GMMx27DC_Lcl_OFFSET                                     0
#define GMMx27DC_Lcl_WIDTH                                      8
#define GMMx27DC_Lcl_MASK                                       0xff
#define GMMx27DC_Hub_OFFSET                                     8
#define GMMx27DC_Hub_WIDTH                                      8
#define GMMx27DC_Hub_MASK                                       0xff00
#define GMMx27DC_Disp_OFFSET                                    16
#define GMMx27DC_Disp_WIDTH                                     8
#define GMMx27DC_Disp_MASK                                      0xff0000
#define GMMx27DC_Reserved_31_24_OFFSET                          24
#define GMMx27DC_Reserved_31_24_WIDTH                           8
#define GMMx27DC_Reserved_31_24_MASK                            0xff000000

/// GMMx27DC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Lcl:8 ; ///<credit count for virtual FIFO that drains to local center-bus clients.
    UINT32                                                      Hub:8 ; ///<credit count for virtual FIFO that drains to clients not on local MCD, excluding display.
    UINT32                                                     Disp:8 ; ///<credit count for virtual FIFO that drains to display client.
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx27DC_STRUCT;

// **** GMMx27E0 Register Definition ****
// Address
#define GMMx27E0_ADDRESS                                        0x27e0

// Type
#define GMMx27E0_TYPE                                           TYPE_GMM
// Field Data
#define GMMx27E0_Lcl_OFFSET                                     0
#define GMMx27E0_Lcl_WIDTH                                      8
#define GMMx27E0_Lcl_MASK                                       0xff
#define GMMx27E0_Hub_OFFSET                                     8
#define GMMx27E0_Hub_WIDTH                                      8
#define GMMx27E0_Hub_MASK                                       0xff00
#define GMMx27E0_Reserved_31_16_OFFSET                          16
#define GMMx27E0_Reserved_31_16_WIDTH                           16
#define GMMx27E0_Reserved_31_16_MASK                            0xffff0000

/// GMMx27E0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                      Lcl:8 ; ///<credit count for virtual FIFO that drains to local center-bus clients.
    UINT32                                                      Hub:8 ; ///<credit count for virtual FIFO that drains to clients not on local MCD.
    UINT32                                           Reserved_31_16:16; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx27E0_STRUCT;

// **** GMMx2814 Register Definition ****
// Address
#define GMMx2814_ADDRESS                                        0x2814

// Type
#define GMMx2814_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2814_WriteClks_OFFSET                               0
#define GMMx2814_WriteClks_WIDTH                                9
#define GMMx2814_WriteClks_MASK                                 0x1ff
#define GMMx2814_UvdHarshPriority_OFFSET                        9
#define GMMx2814_UvdHarshPriority_WIDTH                         1
#define GMMx2814_UvdHarshPriority_MASK                          0x200
#define GMMx2814_Reserved_31_10_OFFSET                          10
#define GMMx2814_Reserved_31_10_WIDTH                           22
#define GMMx2814_Reserved_31_10_MASK                            0xfffffc00

/// GMMx2814
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                WriteClks:9 ; ///<Try to stay with write for WriteClks NCLK cycles before switching to urgent UVD reads.
    UINT32                                         UvdHarshPriority:1 ; ///<
    UINT32                                           Reserved_31_10:22; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2814_STRUCT;

// **** GMMx28C8 Register Definition ****
// Address
#define GMMx28C8_ADDRESS                                        0x28c8

// Type
#define GMMx28C8_TYPE                                           TYPE_GMM
// Field Data
#define GMMx28C8_Delay_OFFSET                                   0
#define GMMx28C8_Delay_WIDTH                                    4
#define GMMx28C8_Delay_MASK                                     0xf
#define GMMx28C8_Disable_OFFSET                                 4
#define GMMx28C8_Disable_WIDTH                                  1
#define GMMx28C8_Disable_MASK                                   0x10
#define GMMx28C8_Reserved_31_5_OFFSET                           5
#define GMMx28C8_Reserved_31_5_WIDTH                            27
#define GMMx28C8_Reserved_31_5_MASK                             0xffffffe0

/// GMMx28C8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                    Delay:4 ; ///<This field specifies the number of clocks to wait for the IFQ check response.
    UINT32                                                  Disable:1 ; ///<
    UINT32                                            Reserved_31_5:27; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx28C8_STRUCT;

// **** GMMx2B8C Register Definition ****
// Address
#define GMMx2B8C_ADDRESS                                        0x2b8c

// Type
#define GMMx2B8C_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2B8C_RengRamIndex_OFFSET                            0
#define GMMx2B8C_RengRamIndex_WIDTH                             10
#define GMMx2B8C_RengRamIndex_MASK                              0x3ff
#define GMMx2B8C_Reserved_31_10_OFFSET                          10
#define GMMx2B8C_Reserved_31_10_WIDTH                           22
#define GMMx2B8C_Reserved_31_10_MASK                            0xfffffc00

/// GMMx2B8C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             RengRamIndex:10; ///<Index into register engine RAM. This field increments after GMMx2B90 is read or written.
    UINT32                                           Reserved_31_10:22; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2B8C_STRUCT;

// **** GMMx2B90 Register Definition ****
// Address
#define GMMx2B90_ADDRESS                                        0x2b90

// Type
#define GMMx2B90_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2B90_RengRamData_OFFSET                             0
#define GMMx2B90_RengRamData_WIDTH                              32
#define GMMx2B90_RengRamData_MASK                               0xffffffff

/// GMMx2B90
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              RengRamData:32; ///<Data pointed to by GMMx2B90[RengRamIndex]
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2B90_STRUCT;

// **** GMMx2C04 Register Definition ****
// Address
#define GMMx2C04_ADDRESS                                        0x2c04

// Type
#define GMMx2C04_TYPE                                           TYPE_GMM
// Field Data
#define GMMx2C04_NonsurfBase_OFFSET                             0
#define GMMx2C04_NonsurfBase_WIDTH                              28
#define GMMx2C04_NonsurfBase_MASK                               0xfffffff
#define GMMx2C04_Reserved_31_28_OFFSET                          28
#define GMMx2C04_Reserved_31_28_WIDTH                           4
#define GMMx2C04_Reserved_31_28_MASK                            0xf0000000

/// GMMx2C04
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              NonsurfBase:28; ///<Specifies GPU address bits 35:8 of the default surface base address.
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} GMMx2C04_STRUCT;

// **** FCRxFE00_70A4 Register Definition ****
// Address
#define FCRxFE00_70A4_ADDRESS                                   0xfe0070a4

// Type
#define FCRxFE00_70A4_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70A4_Reserved_3_0_OFFSET                       0
#define FCRxFE00_70A4_Reserved_3_0_WIDTH                        4
#define FCRxFE00_70A4_Reserved_3_0_MASK                         0xf
#define FCRxFE00_70A4_SclkDpmVid0_OFFSET                        4
#define FCRxFE00_70A4_SclkDpmVid0_WIDTH                         2
#define FCRxFE00_70A4_SclkDpmVid0_MASK                          0x30
#define FCRxFE00_70A4_SclkDpmVid1_OFFSET                        6
#define FCRxFE00_70A4_SclkDpmVid1_WIDTH                         2
#define FCRxFE00_70A4_SclkDpmVid1_MASK                          0xc0
#define FCRxFE00_70A4_SclkDpmVid2_OFFSET                        8
#define FCRxFE00_70A4_SclkDpmVid2_WIDTH                         2
#define FCRxFE00_70A4_SclkDpmVid2_MASK                          0x300
#define FCRxFE00_70A4_SclkDpmVid3_OFFSET                        10
#define FCRxFE00_70A4_SclkDpmVid3_WIDTH                         2
#define FCRxFE00_70A4_SclkDpmVid3_MASK                          0xc00
#define FCRxFE00_70A4_SclkDpmVid4_OFFSET                        12
#define FCRxFE00_70A4_SclkDpmVid4_WIDTH                         2
#define FCRxFE00_70A4_SclkDpmVid4_MASK                          0x3000
#define FCRxFE00_70A4_Reserved_31_14_OFFSET                     14
#define FCRxFE00_70A4_Reserved_31_14_WIDTH                      18
#define FCRxFE00_70A4_Reserved_31_14_MASK                       0xffffc000

/// FCRxFE00_70A4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                              SclkDpmVid0:2 ; ///<
    UINT32                                              SclkDpmVid1:2 ; ///<
    UINT32                                              SclkDpmVid2:2 ; ///<
    UINT32                                              SclkDpmVid3:2 ; ///<
    UINT32                                              SclkDpmVid4:2 ; ///<
    UINT32                                           Reserved_31_14:18; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70A4_STRUCT;

// **** FCRxFE00_70A5 Register Definition ****
// Address
#define FCRxFE00_70A5_ADDRESS                                   0xfe0070a5

// Type
#define FCRxFE00_70A5_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70A5_Reserved_5_0_OFFSET                       0
#define FCRxFE00_70A5_Reserved_5_0_WIDTH                        6
#define FCRxFE00_70A5_Reserved_5_0_MASK                         0x3f
#define FCRxFE00_70A5_SclkDpmDid0_OFFSET                        6
#define FCRxFE00_70A5_SclkDpmDid0_WIDTH                         7
#define FCRxFE00_70A5_SclkDpmDid0_MASK                          0x1fc0
#define FCRxFE00_70A5_SclkDpmDid1_OFFSET                        13
#define FCRxFE00_70A5_SclkDpmDid1_WIDTH                         7
#define FCRxFE00_70A5_SclkDpmDid1_MASK                          0xfe000
#define FCRxFE00_70A5_SclkDpmDid2_OFFSET                        20
#define FCRxFE00_70A5_SclkDpmDid2_WIDTH                         7
#define FCRxFE00_70A5_SclkDpmDid2_MASK                          0x7f00000
#define FCRxFE00_70A5_Reserved_31_27_OFFSET                     27
#define FCRxFE00_70A5_Reserved_31_27_WIDTH                      5
#define FCRxFE00_70A5_Reserved_31_27_MASK                       0xf8000000

/// FCRxFE00_70A5
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_5_0:6 ; ///<
    UINT32                                              SclkDpmDid0:7 ; ///<
    UINT32                                              SclkDpmDid1:7 ; ///<
    UINT32                                              SclkDpmDid2:7 ; ///<
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70A5_STRUCT;

// **** FCRxFE00_70A8 Register Definition ****
// Address
#define FCRxFE00_70A8_ADDRESS                                   0xfe0070a8

// Type
#define FCRxFE00_70A8_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70A8_Reserved_2_0_OFFSET                       0
#define FCRxFE00_70A8_Reserved_2_0_WIDTH                        3
#define FCRxFE00_70A8_Reserved_2_0_MASK                         0x7
#define FCRxFE00_70A8_SclkDpmDid3_OFFSET                        3
#define FCRxFE00_70A8_SclkDpmDid3_WIDTH                         7
#define FCRxFE00_70A8_SclkDpmDid3_MASK                          0x3f8
#define FCRxFE00_70A8_SclkDpmDid4_OFFSET                        10
#define FCRxFE00_70A8_SclkDpmDid4_WIDTH                         7
#define FCRxFE00_70A8_SclkDpmDid4_MASK                          0x1fc00
#define FCRxFE00_70A8_Reserved_31_17_OFFSET                     17
#define FCRxFE00_70A8_Reserved_31_17_WIDTH                      15
#define FCRxFE00_70A8_Reserved_31_17_MASK                       0xfffe0000

/// FCRxFE00_70A8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_2_0:3 ; ///<
    UINT32                                              SclkDpmDid3:7 ; ///<
    UINT32                                              SclkDpmDid4:7 ; ///<
    UINT32                                           Reserved_31_17:15; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70A8_STRUCT;

// **** FCRxFE00_70AA Register Definition ****
// Address
#define FCRxFE00_70AA_ADDRESS                                   0xfe0070aa

// Type
#define FCRxFE00_70AA_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70AA_Reserved_0_0_OFFSET                       0
#define FCRxFE00_70AA_Reserved_0_0_WIDTH                        1
#define FCRxFE00_70AA_Reserved_0_0_MASK                         0x1
#define FCRxFE00_70AA_SclkDpmCacBase_OFFSET                     1
#define FCRxFE00_70AA_SclkDpmCacBase_WIDTH                      8
#define FCRxFE00_70AA_SclkDpmCacBase_MASK                       0x1fe
#define FCRxFE00_70AA_Reserved_31_9_OFFSET                      9
#define FCRxFE00_70AA_Reserved_31_9_WIDTH                       23
#define FCRxFE00_70AA_Reserved_31_9_MASK                        0xfffffe00

/// FCRxFE00_70AA
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                           SclkDpmCacBase:8 ; ///<
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70AA_STRUCT;

// **** FCRxFE00_70AE Register Definition ****
// Address
#define FCRxFE00_70AE_ADDRESS                                   0xfe0070ae

// Type
#define FCRxFE00_70AE_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70AE_Reserved_0_0_OFFSET                       0
#define FCRxFE00_70AE_Reserved_0_0_WIDTH                        1
#define FCRxFE00_70AE_Reserved_0_0_MASK                         0x1
#define FCRxFE00_70AE_DispClkDid0_OFFSET                        1
#define FCRxFE00_70AE_DispClkDid0_WIDTH                         7
#define FCRxFE00_70AE_DispClkDid0_MASK                          0xfe
#define FCRxFE00_70AE_DispClkDid1_OFFSET                        8
#define FCRxFE00_70AE_DispClkDid1_WIDTH                         7
#define FCRxFE00_70AE_DispClkDid1_MASK                          0x7f00
#define FCRxFE00_70AE_DispClkDid2_OFFSET                        15
#define FCRxFE00_70AE_DispClkDid2_WIDTH                         7
#define FCRxFE00_70AE_DispClkDid2_MASK                          0x3f8000
#define FCRxFE00_70AE_DispClkDid3_OFFSET                        22
#define FCRxFE00_70AE_DispClkDid3_WIDTH                         7
#define FCRxFE00_70AE_DispClkDid3_MASK                          0x1fc00000
#define FCRxFE00_70AE_Reserved_31_29_OFFSET                     29
#define FCRxFE00_70AE_Reserved_31_29_WIDTH                      3
#define FCRxFE00_70AE_Reserved_31_29_MASK                       0xe0000000

/// FCRxFE00_70AE
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                              DispClkDid0:7 ; ///<
    UINT32                                              DispClkDid1:7 ; ///<
    UINT32                                              DispClkDid2:7 ; ///<
    UINT32                                              DispClkDid3:7 ; ///<
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70AE_STRUCT;

// **** FCRxFE00_70B1 Register Definition ****
// Address
#define FCRxFE00_70B1_ADDRESS                                   0xfe0070b1

// Type
#define FCRxFE00_70B1_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70B1_Reserved_4_0_OFFSET                       0
#define FCRxFE00_70B1_Reserved_4_0_WIDTH                        5
#define FCRxFE00_70B1_Reserved_4_0_MASK                         0x1f
#define FCRxFE00_70B1_LclkDpmDid0_OFFSET                        5
#define FCRxFE00_70B1_LclkDpmDid0_WIDTH                         7
#define FCRxFE00_70B1_LclkDpmDid0_MASK                          0xfe0
#define FCRxFE00_70B1_LclkDpmDid1_OFFSET                        12
#define FCRxFE00_70B1_LclkDpmDid1_WIDTH                         7
#define FCRxFE00_70B1_LclkDpmDid1_MASK                          0x7f000
#define FCRxFE00_70B1_LclkDpmDid2_OFFSET                        19
#define FCRxFE00_70B1_LclkDpmDid2_WIDTH                         7
#define FCRxFE00_70B1_LclkDpmDid2_MASK                          0x3f80000
#define FCRxFE00_70B1_Reserved_31_26_OFFSET                     26
#define FCRxFE00_70B1_Reserved_31_26_WIDTH                      6
#define FCRxFE00_70B1_Reserved_31_26_MASK                       0xfc000000

/// FCRxFE00_70B1
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                              LclkDpmDid0:7 ; ///<Specifies the divisor used for the respective LCLK DPM state. See 2.5.6.2.3.3 [BIOS Initialization for LCLK DPM Using Root Complex Activity].
    UINT32                                              LclkDpmDid1:7 ; ///<See: FCRxFE00_70B1[LclkDpmDid0].
    UINT32                                              LclkDpmDid2:7 ; ///<See: FCRxFE00_70B1[LclkDpmDid0].
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70B1_STRUCT;

// **** FCRxFE00_70B4 Register Definition ****
// Address
#define FCRxFE00_70B4_ADDRESS                                   0xfe0070b4

// Type
#define FCRxFE00_70B4_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70B4_Reserved_1_0_OFFSET                       0
#define FCRxFE00_70B4_Reserved_1_0_WIDTH                        2
#define FCRxFE00_70B4_Reserved_1_0_MASK                         0x3
#define FCRxFE00_70B4_LclkDpmDid3_OFFSET                        2
#define FCRxFE00_70B4_LclkDpmDid3_WIDTH                         7
#define FCRxFE00_70B4_LclkDpmDid3_MASK                          0x1fc
#define FCRxFE00_70B4_LclkDpmValid0_OFFSET                      9
#define FCRxFE00_70B4_LclkDpmValid0_WIDTH                       1
#define FCRxFE00_70B4_LclkDpmValid0_MASK                        0x200
#define FCRxFE00_70B4_LclkDpmValid1_OFFSET                      10
#define FCRxFE00_70B4_LclkDpmValid1_WIDTH                       1
#define FCRxFE00_70B4_LclkDpmValid1_MASK                        0x400
#define FCRxFE00_70B4_LclkDpmValid2_OFFSET                      11
#define FCRxFE00_70B4_LclkDpmValid2_WIDTH                       1
#define FCRxFE00_70B4_LclkDpmValid2_MASK                        0x800
#define FCRxFE00_70B4_LclkDpmValid3_OFFSET                      12
#define FCRxFE00_70B4_LclkDpmValid3_WIDTH                       1
#define FCRxFE00_70B4_LclkDpmValid3_MASK                        0x1000
#define FCRxFE00_70B4_Reserved_31_13_OFFSET                     13
#define FCRxFE00_70B4_Reserved_31_13_WIDTH                      19
#define FCRxFE00_70B4_Reserved_31_13_MASK                       0xffffe000

/// FCRxFE00_70B4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_1_0:2 ; ///<
    UINT32                                              LclkDpmDid3:7 ; ///<Specifies the divisor used for the respective LCLK DPM state. See 2.5.6.2.3.3 [BIOS Initialization for LCLK DPM Using Root Complex Activity].See: FCRxFE00_70B1[LclkDpmDid0].
    UINT32                                            LclkDpmValid0:1 ; ///<Specifies whether the respective LclkDpmDidX is valid. See 2.5.6.2.3.3 [BIOS Initialization for LCLK DPM Using Root Complex Activity].
    UINT32                                            LclkDpmValid1:1 ; ///<See: FCRxFE00_70B4[LclkDpmValid0].
    UINT32                                            LclkDpmValid2:1 ; ///<See: FCRxFE00_70B4[LclkDpmValid0].
    UINT32                                            LclkDpmValid3:1 ; ///<See: FCRxFE00_70B4[LclkDpmValid0].
    UINT32                                           Reserved_31_13:19; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70B4_STRUCT;

// **** FCRxFE00_70B5 Register Definition ****
// Address
#define FCRxFE00_70B5_ADDRESS                                   0xfe0070b5

// Type
#define FCRxFE00_70B5_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70B5_Reserved_4_0_OFFSET                       0
#define FCRxFE00_70B5_Reserved_4_0_WIDTH                        5
#define FCRxFE00_70B5_Reserved_4_0_MASK                         0x1f
#define FCRxFE00_70B5_DclkDid0_OFFSET                           5
#define FCRxFE00_70B5_DclkDid0_WIDTH                            7
#define FCRxFE00_70B5_DclkDid0_MASK                             0xfe0
#define FCRxFE00_70B5_DclkDid1_OFFSET                           12
#define FCRxFE00_70B5_DclkDid1_WIDTH                            7
#define FCRxFE00_70B5_DclkDid1_MASK                             0x7f000
#define FCRxFE00_70B5_DclkDid2_OFFSET                           19
#define FCRxFE00_70B5_DclkDid2_WIDTH                            7
#define FCRxFE00_70B5_DclkDid2_MASK                             0x3f80000
#define FCRxFE00_70B5_Reserved_31_26_OFFSET                     26
#define FCRxFE00_70B5_Reserved_31_26_WIDTH                      6
#define FCRxFE00_70B5_Reserved_31_26_MASK                       0xfc000000

/// FCRxFE00_70B5
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                                 DclkDid0:7 ; ///<
    UINT32                                                 DclkDid1:7 ; ///<
    UINT32                                                 DclkDid2:7 ; ///<
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70B5_STRUCT;

// **** FCRxFE00_70B8 Register Definition ****
// Address
#define FCRxFE00_70B8_ADDRESS                                   0xfe0070b8

// Type
#define FCRxFE00_70B8_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70B8_Reserved_1_0_OFFSET                       0
#define FCRxFE00_70B8_Reserved_1_0_WIDTH                        2
#define FCRxFE00_70B8_Reserved_1_0_MASK                         0x3
#define FCRxFE00_70B8_DclkDid3_OFFSET                           2
#define FCRxFE00_70B8_DclkDid3_WIDTH                            7
#define FCRxFE00_70B8_DclkDid3_MASK                             0x1fc
#define FCRxFE00_70B8_Reserved_31_9_OFFSET                      9
#define FCRxFE00_70B8_Reserved_31_9_WIDTH                       23
#define FCRxFE00_70B8_Reserved_31_9_MASK                        0xfffffe00

/// FCRxFE00_70B8
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_1_0:2 ; ///<
    UINT32                                                 DclkDid3:7 ; ///<
    UINT32                                            Reserved_31_9:23; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70B8_STRUCT;

// **** FCRxFE00_70B9 Register Definition ****
// Address
#define FCRxFE00_70B9_ADDRESS                                   0xfe0070b9

// Type
#define FCRxFE00_70B9_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70B9_Reserved_0_0_OFFSET                       0
#define FCRxFE00_70B9_Reserved_0_0_WIDTH                        1
#define FCRxFE00_70B9_Reserved_0_0_MASK                         0x1
#define FCRxFE00_70B9_VclkDid0_OFFSET                           1
#define FCRxFE00_70B9_VclkDid0_WIDTH                            7
#define FCRxFE00_70B9_VclkDid0_MASK                             0xfe
#define FCRxFE00_70B9_VclkDid1_OFFSET                           8
#define FCRxFE00_70B9_VclkDid1_WIDTH                            7
#define FCRxFE00_70B9_VclkDid1_MASK                             0x7f00
#define FCRxFE00_70B9_VclkDid2_OFFSET                           15
#define FCRxFE00_70B9_VclkDid2_WIDTH                            7
#define FCRxFE00_70B9_VclkDid2_MASK                             0x3f8000
#define FCRxFE00_70B9_VclkDid3_OFFSET                           22
#define FCRxFE00_70B9_VclkDid3_WIDTH                            7
#define FCRxFE00_70B9_VclkDid3_MASK                             0x1fc00000
#define FCRxFE00_70B9_Reserved_31_29_OFFSET                     29
#define FCRxFE00_70B9_Reserved_31_29_WIDTH                      3
#define FCRxFE00_70B9_Reserved_31_29_MASK                       0xe0000000

/// FCRxFE00_70B9
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                                 VclkDid0:7 ; ///<
    UINT32                                                 VclkDid1:7 ; ///<
    UINT32                                                 VclkDid2:7 ; ///<
    UINT32                                                 VclkDid3:7 ; ///<
    UINT32                                           Reserved_31_29:3 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70B9_STRUCT;

// **** FCRxFE00_70BC Register Definition ****
// Address
#define FCRxFE00_70BC_ADDRESS                                   0xfe0070bc

// Type
#define FCRxFE00_70BC_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70BC_Reserved_4_0_OFFSET                       0
#define FCRxFE00_70BC_Reserved_4_0_WIDTH                        5
#define FCRxFE00_70BC_Reserved_4_0_MASK                         0x1f
#define FCRxFE00_70BC_SclkDpmValid0_OFFSET                      5
#define FCRxFE00_70BC_SclkDpmValid0_WIDTH                       5
#define FCRxFE00_70BC_SclkDpmValid0_MASK                        0x3e0
#define FCRxFE00_70BC_SclkDpmValid1_OFFSET                      10
#define FCRxFE00_70BC_SclkDpmValid1_WIDTH                       5
#define FCRxFE00_70BC_SclkDpmValid1_MASK                        0x7c00
#define FCRxFE00_70BC_SclkDpmValid2_OFFSET                      15
#define FCRxFE00_70BC_SclkDpmValid2_WIDTH                       5
#define FCRxFE00_70BC_SclkDpmValid2_MASK                        0xf8000
#define FCRxFE00_70BC_SclkDpmValid3_OFFSET                      20
#define FCRxFE00_70BC_SclkDpmValid3_WIDTH                       5
#define FCRxFE00_70BC_SclkDpmValid3_MASK                        0x1f00000
#define FCRxFE00_70BC_SclkDpmValid4_OFFSET                      25
#define FCRxFE00_70BC_SclkDpmValid4_WIDTH                       5
#define FCRxFE00_70BC_SclkDpmValid4_MASK                        0x3e000000
#define FCRxFE00_70BC_Reserved_31_30_OFFSET                     30
#define FCRxFE00_70BC_Reserved_31_30_WIDTH                      2
#define FCRxFE00_70BC_Reserved_31_30_MASK                       0xc0000000

/// FCRxFE00_70BC
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_4_0:5 ; ///<
    UINT32                                            SclkDpmValid0:5 ; ///<
    UINT32                                            SclkDpmValid1:5 ; ///<
    UINT32                                            SclkDpmValid2:5 ; ///<
    UINT32                                            SclkDpmValid3:5 ; ///<
    UINT32                                            SclkDpmValid4:5 ; ///<
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70BC_STRUCT;

// **** FCRxFE00_70BF Register Definition ****
// Address
#define FCRxFE00_70BF_ADDRESS                                   0xfe0070bf

// Type
#define FCRxFE00_70BF_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70BF_Reserved_5_0_OFFSET                       0
#define FCRxFE00_70BF_Reserved_5_0_WIDTH                        6
#define FCRxFE00_70BF_Reserved_5_0_MASK                         0x3f
#define FCRxFE00_70BF_SclkDpmValid5_OFFSET                      6
#define FCRxFE00_70BF_SclkDpmValid5_WIDTH                       5
#define FCRxFE00_70BF_SclkDpmValid5_MASK                        0x7c0
#define FCRxFE00_70BF_Reserved_31_11_OFFSET                     11
#define FCRxFE00_70BF_Reserved_31_11_WIDTH                      21
#define FCRxFE00_70BF_Reserved_31_11_MASK                       0xfffff800

/// FCRxFE00_70BF
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_5_0:6 ; ///<
    UINT32                                            SclkDpmValid5:5 ; ///<
    UINT32                                           Reserved_31_11:21; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70BF_STRUCT;

// **** FCRxFE00_70C0 Register Definition ****
// Address
#define FCRxFE00_70C0_ADDRESS                                   0xfe0070c0

// Type
#define FCRxFE00_70C0_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70C0_Reserved_2_0_OFFSET                       0
#define FCRxFE00_70C0_Reserved_2_0_WIDTH                        3
#define FCRxFE00_70C0_Reserved_2_0_MASK                         0x7
#define FCRxFE00_70C0_PolicyLabel0_OFFSET                       3
#define FCRxFE00_70C0_PolicyLabel0_WIDTH                        2
#define FCRxFE00_70C0_PolicyLabel0_MASK                         0x18
#define FCRxFE00_70C0_PolicyLabel1_OFFSET                       5
#define FCRxFE00_70C0_PolicyLabel1_WIDTH                        2
#define FCRxFE00_70C0_PolicyLabel1_MASK                         0x60
#define FCRxFE00_70C0_PolicyLabel2_OFFSET                       7
#define FCRxFE00_70C0_PolicyLabel2_WIDTH                        2
#define FCRxFE00_70C0_PolicyLabel2_MASK                         0x180
#define FCRxFE00_70C0_PolicyLabel3_OFFSET                       9
#define FCRxFE00_70C0_PolicyLabel3_WIDTH                        2
#define FCRxFE00_70C0_PolicyLabel3_MASK                         0x600
#define FCRxFE00_70C0_PolicyLabel4_OFFSET                       11
#define FCRxFE00_70C0_PolicyLabel4_WIDTH                        2
#define FCRxFE00_70C0_PolicyLabel4_MASK                         0x1800
#define FCRxFE00_70C0_PolicyLabel5_OFFSET                       13
#define FCRxFE00_70C0_PolicyLabel5_WIDTH                        2
#define FCRxFE00_70C0_PolicyLabel5_MASK                         0x6000
#define FCRxFE00_70C0_Reserved_31_15_OFFSET                     15
#define FCRxFE00_70C0_Reserved_31_15_WIDTH                      17
#define FCRxFE00_70C0_Reserved_31_15_MASK                       0xffff8000

/// FCRxFE00_70C0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_2_0:3 ; ///<
    UINT32                                             PolicyLabel0:2 ; ///<
    UINT32                                             PolicyLabel1:2 ; ///<
    UINT32                                             PolicyLabel2:2 ; ///<
    UINT32                                             PolicyLabel3:2 ; ///<
    UINT32                                             PolicyLabel4:2 ; ///<
    UINT32                                             PolicyLabel5:2 ; ///<
    UINT32                                           Reserved_31_15:17; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70C0_STRUCT;

// **** FCRxFE00_70C1 Register Definition ****
// Address
#define FCRxFE00_70C1_ADDRESS                                   0xfe0070c1

// Type
#define FCRxFE00_70C1_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70C1_Reserved_6_0_OFFSET                       0
#define FCRxFE00_70C1_Reserved_6_0_WIDTH                        7
#define FCRxFE00_70C1_Reserved_6_0_MASK                         0x7f
#define FCRxFE00_70C1_PolicyFlags0_OFFSET                       7
#define FCRxFE00_70C1_PolicyFlags0_WIDTH                        7
#define FCRxFE00_70C1_PolicyFlags0_MASK                         0x3f80
#define FCRxFE00_70C1_PolicyFlags1_OFFSET                       14
#define FCRxFE00_70C1_PolicyFlags1_WIDTH                        7
#define FCRxFE00_70C1_PolicyFlags1_MASK                         0x1fc000
#define FCRxFE00_70C1_PolicyFlags2_OFFSET                       21
#define FCRxFE00_70C1_PolicyFlags2_WIDTH                        7
#define FCRxFE00_70C1_PolicyFlags2_MASK                         0xfe00000
#define FCRxFE00_70C1_Reserved_31_28_OFFSET                     28
#define FCRxFE00_70C1_Reserved_31_28_WIDTH                      4
#define FCRxFE00_70C1_Reserved_31_28_MASK                       0xf0000000

/// FCRxFE00_70C1
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_6_0:7 ; ///<
    UINT32                                             PolicyFlags0:7 ; ///<
    UINT32                                             PolicyFlags1:7 ; ///<
    UINT32                                             PolicyFlags2:7 ; ///<
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70C1_STRUCT;

// **** FCRxFE00_70C4 Register Definition ****
// Address
#define FCRxFE00_70C4_ADDRESS                                   0xfe0070c4

// Type
#define FCRxFE00_70C4_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70C4_Reserved_3_0_OFFSET                       0
#define FCRxFE00_70C4_Reserved_3_0_WIDTH                        4
#define FCRxFE00_70C4_Reserved_3_0_MASK                         0xf
#define FCRxFE00_70C4_PolicyFlags3_OFFSET                       4
#define FCRxFE00_70C4_PolicyFlags3_WIDTH                        7
#define FCRxFE00_70C4_PolicyFlags3_MASK                         0x7f0
#define FCRxFE00_70C4_PolicyFlags4_OFFSET                       11
#define FCRxFE00_70C4_PolicyFlags4_WIDTH                        7
#define FCRxFE00_70C4_PolicyFlags4_MASK                         0x3f800
#define FCRxFE00_70C4_PolicyFlags5_OFFSET                       18
#define FCRxFE00_70C4_PolicyFlags5_WIDTH                        7
#define FCRxFE00_70C4_PolicyFlags5_MASK                         0x1fc0000
#define FCRxFE00_70C4_Reserved_31_25_OFFSET                     25
#define FCRxFE00_70C4_Reserved_31_25_WIDTH                      7
#define FCRxFE00_70C4_Reserved_31_25_MASK                       0xfe000000

/// FCRxFE00_70C4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                                             PolicyFlags3:7 ; ///<
    UINT32                                             PolicyFlags4:7 ; ///<
    UINT32                                             PolicyFlags5:7 ; ///<
    UINT32                                           Reserved_31_25:7 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70C4_STRUCT;

// **** FCRxFE00_70C7 Register Definition ****
// Address
#define FCRxFE00_70C7_ADDRESS                                   0xfe0070c7

// Type
#define FCRxFE00_70C7_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFE00_70C7_Reserved_0_0_OFFSET                       0
#define FCRxFE00_70C7_Reserved_0_0_WIDTH                        1
#define FCRxFE00_70C7_Reserved_0_0_MASK                         0x1
#define FCRxFE00_70C7_DclkVclkSel0_OFFSET                       1
#define FCRxFE00_70C7_DclkVclkSel0_WIDTH                        2
#define FCRxFE00_70C7_DclkVclkSel0_MASK                         0x6
#define FCRxFE00_70C7_DclkVclkSel1_OFFSET                       3
#define FCRxFE00_70C7_DclkVclkSel1_WIDTH                        2
#define FCRxFE00_70C7_DclkVclkSel1_MASK                         0x18
#define FCRxFE00_70C7_DclkVclkSel2_OFFSET                       5
#define FCRxFE00_70C7_DclkVclkSel2_WIDTH                        2
#define FCRxFE00_70C7_DclkVclkSel2_MASK                         0x60
#define FCRxFE00_70C7_DclkVclkSel3_OFFSET                       7
#define FCRxFE00_70C7_DclkVclkSel3_WIDTH                        2
#define FCRxFE00_70C7_DclkVclkSel3_MASK                         0x180
#define FCRxFE00_70C7_DclkVclkSel4_OFFSET                       9
#define FCRxFE00_70C7_DclkVclkSel4_WIDTH                        2
#define FCRxFE00_70C7_DclkVclkSel4_MASK                         0x600
#define FCRxFE00_70C7_DclkVclkSel5_OFFSET                       11
#define FCRxFE00_70C7_DclkVclkSel5_WIDTH                        2
#define FCRxFE00_70C7_DclkVclkSel5_MASK                         0x1800
#define FCRxFE00_70C7_Reserved_31_13_OFFSET                     13
#define FCRxFE00_70C7_Reserved_31_13_WIDTH                      19
#define FCRxFE00_70C7_Reserved_31_13_MASK                       0xffffe000

/// FCRxFE00_70C7
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                             DclkVclkSel0:2 ; ///<
    UINT32                                             DclkVclkSel1:2 ; ///<
    UINT32                                             DclkVclkSel2:2 ; ///<
    UINT32                                             DclkVclkSel3:2 ; ///<
    UINT32                                             DclkVclkSel4:2 ; ///<
    UINT32                                             DclkVclkSel5:2 ; ///<
    UINT32                                           Reserved_31_13:19; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFE00_70C7_STRUCT;

// **** FCRxFF30_0134(GMMx4D0) Register Definition ****
// Address
#define FCRxFF30_0134_ADDRESS                                   0xff300134

// Field Data
#define FCRxFF30_0134_DispclkDccgGateDisable_OFFSET                   0
#define FCRxFF30_0134_DispclkDccgGateDisable_WIDTH                    1
#define FCRxFF30_0134_DispclkDccgGateDisable_MASK                     0x1
#define FCRxFF30_0134_DispclkRDccgGateDisable_OFFSET                  1
#define FCRxFF30_0134_DispclkRDccgGateDisable_WIDTH                   1
#define FCRxFF30_0134_DispclkRDccgGateDisable_MASK                    0x2
#define FCRxFF30_0134_SclkGateDisable_OFFSET                          2
#define FCRxFF30_0134_SclkGateDisable_WIDTH                           1
#define FCRxFF30_0134_SclkGateDisable_MASK                            0x4
#define FCRxFF30_0134_Reserved_7_3_OFFSET                             3
#define FCRxFF30_0134_Reserved_7_3_WIDTH                              5
#define FCRxFF30_0134_Reserved_7_3_MASK                               0xf8
#define FCRxFF30_0134_SymclkaGateDisable_OFFSET                       8
#define FCRxFF30_0134_SymclkaGateDisable_WIDTH                        1
#define FCRxFF30_0134_SymclkaGateDisable_MASK                         0x100
#define FCRxFF30_0134_SymclkbGateDisable_OFFSET                       9
#define FCRxFF30_0134_SymclkbGateDisable_WIDTH                        1
#define FCRxFF30_0134_SymclkbGateDisable_MASK                         0x200
#define FCRxFF30_0134_Reserved_31_10_OFFSET                           10
#define FCRxFF30_0134_Reserved_31_10_WIDTH                            22
#define FCRxFF30_0134_Reserved_31_10_MASK                             0xfffffc00

/// FCRxFF30_0134
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                   DispclkDccgGateDisable:1 ; ///<
    UINT32                                  DispclkRDccgGateDisable:1 ; ///<
    UINT32                                          SclkGateDisable:1 ; ///<
    UINT32                                             Reserved_7_3:5 ; ///<
    UINT32                                       SymclkaGateDisable:1 ; ///<
    UINT32                                       SymclkbGateDisable:1 ; ///<
    UINT32                                           Reserved_31_10:22; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_0134_STRUCT;

// **** FCRxFF30_01E4 Register Definition ****
// Address
#define FCRxFF30_01E4_ADDRESS                                   0xff3001e4

// Type
#define FCRxFF30_01E4_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFF30_01E4_Fraction_OFFSET                           0
#define FCRxFF30_01E4_Fraction_WIDTH                            8
#define FCRxFF30_01E4_Fraction_MASK                             0xff
#define FCRxFF30_01E4_Hysteresis_OFFSET                         8
#define FCRxFF30_01E4_Hysteresis_WIDTH                          12
#define FCRxFF30_01E4_Hysteresis_MASK                           0xfff00
#define FCRxFF30_01E4_VoltageChangeEn_OFFSET                    20
#define FCRxFF30_01E4_VoltageChangeEn_WIDTH                     1
#define FCRxFF30_01E4_VoltageChangeEn_MASK                      0x100000
#define FCRxFF30_01E4_Reserved_31_21_OFFSET                     21
#define FCRxFF30_01E4_Reserved_31_21_WIDTH                      11
#define FCRxFF30_01E4_Reserved_31_21_MASK                       0xffe00000

/// FCRxFF30_01E4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 Fraction:8 ; ///<Divider fraction.
    UINT32                                               Hysteresis:12; ///<
    UINT32                                          VoltageChangeEn:1 ; ///<Specifies whether LCLK DPM voltage changes are enabled. See 2.5.6.2.3 [LCLK DPM].
    UINT32                                           Reserved_31_21:11; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_01E4_STRUCT;

// **** FCRxFF30_01F4 Register Definition ****
// Address
#define FCRxFF30_01F4_ADDRESS                                   0xff3001f4

// Type
#define FCRxFF30_01F4_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFF30_01F4_CgRlcCgttSclkOverride_OFFSET              0
#define FCRxFF30_01F4_CgRlcCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgRlcCgttSclkOverride_MASK                0x1
#define FCRxFF30_01F4_CgCpCgttSclkOverride_OFFSET               1
#define FCRxFF30_01F4_CgCpCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F4_CgCpCgttSclkOverride_MASK                 0x2
#define FCRxFF30_01F4_CgVgtCgttSclkOverride_OFFSET              2
#define FCRxFF30_01F4_CgVgtCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgVgtCgttSclkOverride_MASK                0x4
#define FCRxFF30_01F4_CgPaCgttSclkOverride_OFFSET               3
#define FCRxFF30_01F4_CgPaCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F4_CgPaCgttSclkOverride_MASK                 0x8
#define FCRxFF30_01F4_CgScCgttSclkOverride_OFFSET               4
#define FCRxFF30_01F4_CgScCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F4_CgScCgttSclkOverride_MASK                 0x10
#define FCRxFF30_01F4_CgSpimCgttSclkOverride_OFFSET             5
#define FCRxFF30_01F4_CgSpimCgttSclkOverride_WIDTH              1
#define FCRxFF30_01F4_CgSpimCgttSclkOverride_MASK               0x20
#define FCRxFF30_01F4_CgSxmCgttSclkOverride_OFFSET              6
#define FCRxFF30_01F4_CgSxmCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgSxmCgttSclkOverride_MASK                0x40
#define FCRxFF30_01F4_CgSxsCgttSclkOverride_OFFSET              7
#define FCRxFF30_01F4_CgSxsCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgSxsCgttSclkOverride_MASK                0x80
#define FCRxFF30_01F4_CgCb0CgttSclkOverride_OFFSET              8
#define FCRxFF30_01F4_CgCb0CgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgCb0CgttSclkOverride_MASK                0x100
#define FCRxFF30_01F4_CgCb1CgttSclkOverride_OFFSET              9
#define FCRxFF30_01F4_CgCb1CgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgCb1CgttSclkOverride_MASK                0x200
#define FCRxFF30_01F4_ReservedCgtt10Override_OFFSET             10
#define FCRxFF30_01F4_ReservedCgtt10Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt10Override_MASK               0x400
#define FCRxFF30_01F4_ReservedCgtt11Override_OFFSET             11
#define FCRxFF30_01F4_ReservedCgtt11Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt11Override_MASK               0x800
#define FCRxFF30_01F4_CgDb0CgttSclkOverride_OFFSET              12
#define FCRxFF30_01F4_CgDb0CgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgDb0CgttSclkOverride_MASK                0x1000
#define FCRxFF30_01F4_CgDb1CgttSclkOverride_OFFSET              13
#define FCRxFF30_01F4_CgDb1CgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgDb1CgttSclkOverride_MASK                0x2000
#define FCRxFF30_01F4_ReservedCgtt14Override_OFFSET             14
#define FCRxFF30_01F4_ReservedCgtt14Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt14Override_MASK               0x4000
#define FCRxFF30_01F4_ReservedCgtt15Override_OFFSET             15
#define FCRxFF30_01F4_ReservedCgtt15Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt15Override_MASK               0x8000
#define FCRxFF30_01F4_CgVcCgttSclkOverride_OFFSET               16
#define FCRxFF30_01F4_CgVcCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F4_CgVcCgttSclkOverride_MASK                 0x10000
#define FCRxFF30_01F4_CgAvpCgttSclkOverride_OFFSET              17
#define FCRxFF30_01F4_CgAvpCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgAvpCgttSclkOverride_MASK                0x20000
#define FCRxFF30_01F4_CgAvpCgttEclkOverride_OFFSET              18
#define FCRxFF30_01F4_CgAvpCgttEclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgAvpCgttEclkOverride_MASK                0x40000
#define FCRxFF30_01F4_CgUvdmCgttSclkOverride_OFFSET             19
#define FCRxFF30_01F4_CgUvdmCgttSclkOverride_WIDTH              1
#define FCRxFF30_01F4_CgUvdmCgttSclkOverride_MASK               0x80000
#define FCRxFF30_01F4_CgUvdmCgttVclkOverride_OFFSET             20
#define FCRxFF30_01F4_CgUvdmCgttVclkOverride_WIDTH              1
#define FCRxFF30_01F4_CgUvdmCgttVclkOverride_MASK               0x100000
#define FCRxFF30_01F4_CgUvdmCgttDclkOverride_OFFSET             21
#define FCRxFF30_01F4_CgUvdmCgttDclkOverride_WIDTH              1
#define FCRxFF30_01F4_CgUvdmCgttDclkOverride_MASK               0x200000
#define FCRxFF30_01F4_CgBifCgttSclkOverride_OFFSET              22
#define FCRxFF30_01F4_CgBifCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgBifCgttSclkOverride_MASK                0x400000
#define FCRxFF30_01F4_CgRomCgttSclkOverride_OFFSET              23
#define FCRxFF30_01F4_CgRomCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgRomCgttSclkOverride_MASK                0x800000
#define FCRxFF30_01F4_CgDrmCgttSclkOverride_OFFSET              24
#define FCRxFF30_01F4_CgDrmCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgDrmCgttSclkOverride_MASK                0x1000000
#define FCRxFF30_01F4_CgDcCgttSclkOverride_OFFSET               25
#define FCRxFF30_01F4_CgDcCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F4_CgDcCgttSclkOverride_MASK                 0x2000000
#define FCRxFF30_01F4_ReservedCgtt26Override_OFFSET             26
#define FCRxFF30_01F4_ReservedCgtt26Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt26Override_MASK               0x4000000
#define FCRxFF30_01F4_CgMcbCgttSclkOverride_OFFSET              27
#define FCRxFF30_01F4_CgMcbCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F4_CgMcbCgttSclkOverride_MASK                0x8000000
#define FCRxFF30_01F4_CgMcdwCgttSclkOverride_OFFSET             28
#define FCRxFF30_01F4_CgMcdwCgttSclkOverride_WIDTH              1
#define FCRxFF30_01F4_CgMcdwCgttSclkOverride_MASK               0x10000000
#define FCRxFF30_01F4_ReservedCgtt29Override_OFFSET             29
#define FCRxFF30_01F4_ReservedCgtt29Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt29Override_MASK               0x20000000
#define FCRxFF30_01F4_ReservedCgtt30Override_OFFSET             30
#define FCRxFF30_01F4_ReservedCgtt30Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt30Override_MASK               0x40000000
#define FCRxFF30_01F4_ReservedCgtt31Override_OFFSET             31
#define FCRxFF30_01F4_ReservedCgtt31Override_WIDTH              1
#define FCRxFF30_01F4_ReservedCgtt31Override_MASK               0x80000000

/// FCRxFF30_01F4
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                    CgRlcCgttSclkOverride:1 ; ///<
    UINT32                                     CgCpCgttSclkOverride:1 ; ///<
    UINT32                                    CgVgtCgttSclkOverride:1 ; ///<
    UINT32                                     CgPaCgttSclkOverride:1 ; ///<
    UINT32                                     CgScCgttSclkOverride:1 ; ///<
    UINT32                                   CgSpimCgttSclkOverride:1 ; ///<
    UINT32                                    CgSxmCgttSclkOverride:1 ; ///<
    UINT32                                    CgSxsCgttSclkOverride:1 ; ///<
    UINT32                                    CgCb0CgttSclkOverride:1 ; ///<
    UINT32                                    CgCb1CgttSclkOverride:1 ; ///<
    UINT32                                   ReservedCgtt10Override:1 ; ///<
    UINT32                                   ReservedCgtt11Override:1 ; ///<
    UINT32                                    CgDb0CgttSclkOverride:1 ; ///<
    UINT32                                    CgDb1CgttSclkOverride:1 ; ///<
    UINT32                                   ReservedCgtt14Override:1 ; ///<
    UINT32                                   ReservedCgtt15Override:1 ; ///<
    UINT32                                     CgVcCgttSclkOverride:1 ; ///<
    UINT32                                    CgAvpCgttSclkOverride:1 ; ///<
    UINT32                                    CgAvpCgttEclkOverride:1 ; ///<
    UINT32                                   CgUvdmCgttSclkOverride:1 ; ///<
    UINT32                                   CgUvdmCgttVclkOverride:1 ; ///<
    UINT32                                   CgUvdmCgttDclkOverride:1 ; ///<
    UINT32                                    CgBifCgttSclkOverride:1 ; ///<
    UINT32                                    CgRomCgttSclkOverride:1 ; ///<
    UINT32                                    CgDrmCgttSclkOverride:1 ; ///<
    UINT32                                     CgDcCgttSclkOverride:1 ; ///<
    UINT32                                   ReservedCgtt26Override:1 ; ///<
    UINT32                                    CgMcbCgttSclkOverride:1 ; ///<
    UINT32                                   CgMcdwCgttSclkOverride:1 ; ///<
    UINT32                                   ReservedCgtt29Override:1 ; ///<
    UINT32                                   ReservedCgtt30Override:1 ; ///<
    UINT32                                   ReservedCgtt31Override:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_01F4_STRUCT;

// **** FCRxFF30_01F5 Register Definition ****
// Address
#define FCRxFF30_01F5_ADDRESS                                   0xff3001f5

// Type
#define FCRxFF30_01F5_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFF30_01F5_ReservedCgtt32Override_OFFSET             0
#define FCRxFF30_01F5_ReservedCgtt32Override_WIDTH              1
#define FCRxFF30_01F5_ReservedCgtt32Override_MASK               0x1
#define FCRxFF30_01F5_ReservedCgtt33Override_OFFSET             1
#define FCRxFF30_01F5_ReservedCgtt33Override_WIDTH              1
#define FCRxFF30_01F5_ReservedCgtt33Override_MASK               0x2
#define FCRxFF30_01F5_ReservedCgtt34Override_OFFSET             2
#define FCRxFF30_01F5_ReservedCgtt34Override_WIDTH              1
#define FCRxFF30_01F5_ReservedCgtt34Override_MASK               0x4
#define FCRxFF30_01F5_ReservedCgtt35Override_OFFSET             3
#define FCRxFF30_01F5_ReservedCgtt35Override_WIDTH              1
#define FCRxFF30_01F5_ReservedCgtt35Override_MASK               0x8
#define FCRxFF30_01F5_CgTaCgttSclkOverride_OFFSET               4
#define FCRxFF30_01F5_CgTaCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F5_CgTaCgttSclkOverride_MASK                 0x10
#define FCRxFF30_01F5_CgTdCgttSclkOverride_OFFSET               5
#define FCRxFF30_01F5_CgTdCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F5_CgTdCgttSclkOverride_MASK                 0x20
#define FCRxFF30_01F5_CgTcaCgttSclkOverride_OFFSET              6
#define FCRxFF30_01F5_CgTcaCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgTcaCgttSclkOverride_MASK                0x40
#define FCRxFF30_01F5_CgTcpCgttSclkOverride_OFFSET              7
#define FCRxFF30_01F5_CgTcpCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgTcpCgttSclkOverride_MASK                0x80
#define FCRxFF30_01F5_CgTccCgttSclkOverride_OFFSET              8
#define FCRxFF30_01F5_CgTccCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgTccCgttSclkOverride_MASK                0x100
#define FCRxFF30_01F5_CgSqCgttSclkOverride_OFFSET               9
#define FCRxFF30_01F5_CgSqCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F5_CgSqCgttSclkOverride_MASK                 0x200
#define FCRxFF30_01F5_CgHdpCgttSclkOverride_OFFSET              10
#define FCRxFF30_01F5_CgHdpCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgHdpCgttSclkOverride_MASK                0x400
#define FCRxFF30_01F5_CgVmcCgttSclkOverride_OFFSET              11
#define FCRxFF30_01F5_CgVmcCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgVmcCgttSclkOverride_MASK                0x800
#define FCRxFF30_01F5_CgOrbCgttSclkOverride_OFFSET              12
#define FCRxFF30_01F5_CgOrbCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgOrbCgttSclkOverride_MASK                0x1000
#define FCRxFF30_01F5_CgOrbCgttLclkOverride_OFFSET              13
#define FCRxFF30_01F5_CgOrbCgttLclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgOrbCgttLclkOverride_MASK                0x2000
#define FCRxFF30_01F5_CgIocCgttSclkOverride_OFFSET              14
#define FCRxFF30_01F5_CgIocCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgIocCgttSclkOverride_MASK                0x4000
#define FCRxFF30_01F5_CgIocCgttLclkOverride_OFFSET              15
#define FCRxFF30_01F5_CgIocCgttLclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgIocCgttLclkOverride_MASK                0x8000
#define FCRxFF30_01F5_CgGrbmCgttSclkOverride_OFFSET             16
#define FCRxFF30_01F5_CgGrbmCgttSclkOverride_WIDTH              1
#define FCRxFF30_01F5_CgGrbmCgttSclkOverride_MASK               0x10000
#define FCRxFF30_01F5_ReservedCgtt49Override_OFFSET             17
#define FCRxFF30_01F5_ReservedCgtt49Override_WIDTH              1
#define FCRxFF30_01F5_ReservedCgtt49Override_MASK               0x20000
#define FCRxFF30_01F5_CgSmuCgttSclkOverride_OFFSET              18
#define FCRxFF30_01F5_CgSmuCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgSmuCgttSclkOverride_MASK                0x40000
#define FCRxFF30_01F5_ReservedCgtt51Override_OFFSET             19
#define FCRxFF30_01F5_ReservedCgtt51Override_WIDTH              1
#define FCRxFF30_01F5_ReservedCgtt51Override_MASK               0x80000
#define FCRxFF30_01F5_CgIhCgttSclkOverride_OFFSET               20
#define FCRxFF30_01F5_CgIhCgttSclkOverride_WIDTH                1
#define FCRxFF30_01F5_CgIhCgttSclkOverride_MASK                 0x100000
#define FCRxFF30_01F5_CgDbgCgttSclkOverride_OFFSET              21
#define FCRxFF30_01F5_CgDbgCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgDbgCgttSclkOverride_MASK                0x200000
#define FCRxFF30_01F5_CgSemCgttSclkOverride_OFFSET              22
#define FCRxFF30_01F5_CgSemCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgSemCgttSclkOverride_MASK                0x400000
#define FCRxFF30_01F5_CgSrbmCgttSclkOverride_OFFSET             23
#define FCRxFF30_01F5_CgSrbmCgttSclkOverride_WIDTH              1
#define FCRxFF30_01F5_CgSrbmCgttSclkOverride_MASK               0x800000
#define FCRxFF30_01F5_CgDrmdmaCgttSclkOverride_OFFSET           24
#define FCRxFF30_01F5_CgDrmdmaCgttSclkOverride_WIDTH            1
#define FCRxFF30_01F5_CgDrmdmaCgttSclkOverride_MASK             0x1000000
#define FCRxFF30_01F5_CgUvduCgttSclkOverride_OFFSET             25
#define FCRxFF30_01F5_CgUvduCgttSclkOverride_WIDTH              1
#define FCRxFF30_01F5_CgUvduCgttSclkOverride_MASK               0x2000000
#define FCRxFF30_01F5_CgUvduCgttVclkOverride_OFFSET             26
#define FCRxFF30_01F5_CgUvduCgttVclkOverride_WIDTH              1
#define FCRxFF30_01F5_CgUvduCgttVclkOverride_MASK               0x4000000
#define FCRxFF30_01F5_CgUvduCgttDclkOverride_OFFSET             27
#define FCRxFF30_01F5_CgUvduCgttDclkOverride_WIDTH              1
#define FCRxFF30_01F5_CgUvduCgttDclkOverride_MASK               0x8000000
#define FCRxFF30_01F5_CgDcCgttDispClkOverride_OFFSET            28
#define FCRxFF30_01F5_CgDcCgttDispClkOverride_WIDTH             1
#define FCRxFF30_01F5_CgDcCgttDispClkOverride_MASK              0x10000000
#define FCRxFF30_01F5_CgXbrCgttSclkOverride_OFFSET              29
#define FCRxFF30_01F5_CgXbrCgttSclkOverride_WIDTH               1
#define FCRxFF30_01F5_CgXbrCgttSclkOverride_MASK                0x20000000
#define FCRxFF30_01F5_CgSpimCgtsSclkOverride_OFFSET             30
#define FCRxFF30_01F5_CgSpimCgtsSclkOverride_WIDTH              1
#define FCRxFF30_01F5_CgSpimCgtsSclkOverride_MASK               0x40000000
#define FCRxFF30_01F5_CgSpimCgtsSclkLsOverride_OFFSET           31
#define FCRxFF30_01F5_CgSpimCgtsSclkLsOverride_WIDTH            1
#define FCRxFF30_01F5_CgSpimCgtsSclkLsOverride_MASK             0x80000000

/// FCRxFF30_01F5
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                   ReservedCgtt32Override:1 ; ///<
    UINT32                                   ReservedCgtt33Override:1 ; ///<
    UINT32                                   ReservedCgtt34Override:1 ; ///<
    UINT32                                   ReservedCgtt35Override:1 ; ///<
    UINT32                                     CgTaCgttSclkOverride:1 ; ///<
    UINT32                                     CgTdCgttSclkOverride:1 ; ///<
    UINT32                                    CgTcaCgttSclkOverride:1 ; ///<
    UINT32                                    CgTcpCgttSclkOverride:1 ; ///<
    UINT32                                    CgTccCgttSclkOverride:1 ; ///<
    UINT32                                     CgSqCgttSclkOverride:1 ; ///<
    UINT32                                    CgHdpCgttSclkOverride:1 ; ///<
    UINT32                                    CgVmcCgttSclkOverride:1 ; ///<
    UINT32                                    CgOrbCgttSclkOverride:1 ; ///<
    UINT32                                    CgOrbCgttLclkOverride:1 ; ///<
    UINT32                                    CgIocCgttSclkOverride:1 ; ///<
    UINT32                                    CgIocCgttLclkOverride:1 ; ///<
    UINT32                                   CgGrbmCgttSclkOverride:1 ; ///<
    UINT32                                   ReservedCgtt49Override:1 ; ///<
    UINT32                                    CgSmuCgttSclkOverride:1 ; ///<
    UINT32                                   ReservedCgtt51Override:1 ; ///<
    UINT32                                     CgIhCgttSclkOverride:1 ; ///<
    UINT32                                    CgDbgCgttSclkOverride:1 ; ///<
    UINT32                                    CgSemCgttSclkOverride:1 ; ///<
    UINT32                                   CgSrbmCgttSclkOverride:1 ; ///<
    UINT32                                 CgDrmdmaCgttSclkOverride:1 ; ///<
    UINT32                                   CgUvduCgttSclkOverride:1 ; ///<
    UINT32                                   CgUvduCgttVclkOverride:1 ; ///<
    UINT32                                   CgUvduCgttDclkOverride:1 ; ///<
    UINT32                                  CgDcCgttDispClkOverride:1 ; ///<
    UINT32                                    CgXbrCgttSclkOverride:1 ; ///<
    UINT32                                   CgSpimCgtsSclkOverride:1 ; ///<
    UINT32                                 CgSpimCgtsSclkLsOverride:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_01F5_STRUCT;

// **** FCRxFF30_0398 Register Definition ****
// Address
#define FCRxFF30_0398_ADDRESS                                   0xff300398

// Type
#define FCRxFF30_0398_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFF30_0398_Reserved_0_0_OFFSET                       0
#define FCRxFF30_0398_Reserved_0_0_WIDTH                        1
#define FCRxFF30_0398_Reserved_0_0_MASK                         0x1
#define FCRxFF30_0398_SoftResetBif_OFFSET                       1
#define FCRxFF30_0398_SoftResetBif_WIDTH                        1
#define FCRxFF30_0398_SoftResetBif_MASK                         0x2
#define FCRxFF30_0398_SoftResetCg_OFFSET                        2
#define FCRxFF30_0398_SoftResetCg_WIDTH                         1
#define FCRxFF30_0398_SoftResetCg_MASK                          0x4
#define FCRxFF30_0398_Reserved_4_3_OFFSET                       3
#define FCRxFF30_0398_Reserved_4_3_WIDTH                        2
#define FCRxFF30_0398_Reserved_4_3_MASK                         0x18
#define FCRxFF30_0398_SoftResetDc_OFFSET                        5
#define FCRxFF30_0398_SoftResetDc_WIDTH                         1
#define FCRxFF30_0398_SoftResetDc_MASK                          0x20
#define FCRxFF30_0398_Reserved_6_6_OFFSET                       6
#define FCRxFF30_0398_Reserved_6_6_WIDTH                        1
#define FCRxFF30_0398_Reserved_6_6_MASK                         0x40
#define FCRxFF30_0398_SoftResetDrm_OFFSET                       7
#define FCRxFF30_0398_SoftResetDrm_WIDTH                        1
#define FCRxFF30_0398_SoftResetDrm_MASK                         0x80
#define FCRxFF30_0398_SoftResetGrbm_OFFSET                      8
#define FCRxFF30_0398_SoftResetGrbm_WIDTH                       1
#define FCRxFF30_0398_SoftResetGrbm_MASK                        0x100
#define FCRxFF30_0398_SoftResetHdp_OFFSET                       9
#define FCRxFF30_0398_SoftResetHdp_WIDTH                        1
#define FCRxFF30_0398_SoftResetHdp_MASK                         0x200
#define FCRxFF30_0398_SoftResetIh_OFFSET                        10
#define FCRxFF30_0398_SoftResetIh_WIDTH                         1
#define FCRxFF30_0398_SoftResetIh_MASK                          0x400
#define FCRxFF30_0398_SoftResetMc_OFFSET                        11
#define FCRxFF30_0398_SoftResetMc_WIDTH                         1
#define FCRxFF30_0398_SoftResetMc_MASK                          0x800
#define FCRxFF30_0398_Reserved_12_12_OFFSET                     12
#define FCRxFF30_0398_Reserved_12_12_WIDTH                      1
#define FCRxFF30_0398_Reserved_12_12_MASK                       0x1000
#define FCRxFF30_0398_SoftResetRlc_OFFSET                       13
#define FCRxFF30_0398_SoftResetRlc_WIDTH                        1
#define FCRxFF30_0398_SoftResetRlc_MASK                         0x2000
#define FCRxFF30_0398_SoftResetRom_OFFSET                       14
#define FCRxFF30_0398_SoftResetRom_WIDTH                        1
#define FCRxFF30_0398_SoftResetRom_MASK                         0x4000
#define FCRxFF30_0398_SoftResetSem_OFFSET                       15
#define FCRxFF30_0398_SoftResetSem_WIDTH                        1
#define FCRxFF30_0398_SoftResetSem_MASK                         0x8000
#define FCRxFF30_0398_Reserved_16_16_OFFSET                     16
#define FCRxFF30_0398_Reserved_16_16_WIDTH                      1
#define FCRxFF30_0398_Reserved_16_16_MASK                       0x10000
#define FCRxFF30_0398_SoftResetVmc_OFFSET                       17
#define FCRxFF30_0398_SoftResetVmc_WIDTH                        1
#define FCRxFF30_0398_SoftResetVmc_MASK                         0x20000
#define FCRxFF30_0398_SoftResetUvd_OFFSET                       18
#define FCRxFF30_0398_SoftResetUvd_WIDTH                        1
#define FCRxFF30_0398_SoftResetUvd_MASK                         0x40000
#define FCRxFF30_0398_Reserved_19_19_OFFSET                     19
#define FCRxFF30_0398_Reserved_19_19_WIDTH                      1
#define FCRxFF30_0398_Reserved_19_19_MASK                       0x80000
#define FCRxFF30_0398_SoftResetDrmdma_OFFSET                    20
#define FCRxFF30_0398_SoftResetDrmdma_WIDTH                     1
#define FCRxFF30_0398_SoftResetDrmdma_MASK                      0x100000
#define FCRxFF30_0398_SoftResetTst_OFFSET                       21
#define FCRxFF30_0398_SoftResetTst_WIDTH                        1
#define FCRxFF30_0398_SoftResetTst_MASK                         0x200000
#define FCRxFF30_0398_SoftResetRegbb_OFFSET                     22
#define FCRxFF30_0398_SoftResetRegbb_WIDTH                      1
#define FCRxFF30_0398_SoftResetRegbb_MASK                       0x400000
#define FCRxFF30_0398_SoftResetOrb_OFFSET                       23
#define FCRxFF30_0398_SoftResetOrb_WIDTH                        1
#define FCRxFF30_0398_SoftResetOrb_MASK                         0x800000
#define FCRxFF30_0398_Reserved_31_24_OFFSET                     24
#define FCRxFF30_0398_Reserved_31_24_WIDTH                      8
#define FCRxFF30_0398_Reserved_31_24_MASK                       0xff000000

/// FCRxFF30_0398
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_0_0:1 ; ///<
    UINT32                                             SoftResetBif:1 ; ///<
    UINT32                                              SoftResetCg:1 ; ///<See: SoftResetBif.
    UINT32                                             Reserved_4_3:2 ; ///<
    UINT32                                              SoftResetDc:1 ; ///<See: SoftResetBif.
    UINT32                                             Reserved_6_6:1 ; ///<
    UINT32                                             SoftResetDrm:1 ; ///<See: SoftResetBif.
    UINT32                                            SoftResetGrbm:1 ; ///<See: SoftResetBif.
    UINT32                                             SoftResetHdp:1 ; ///<See: SoftResetBif.
    UINT32                                              SoftResetIh:1 ; ///<See: SoftResetBif.
    UINT32                                              SoftResetMc:1 ; ///<See: SoftResetBif.
    UINT32                                           Reserved_12_12:1 ; ///<
    UINT32                                             SoftResetRlc:1 ; ///<See: SoftResetBif.
    UINT32                                             SoftResetRom:1 ; ///<See: SoftResetBif.
    UINT32                                             SoftResetSem:1 ; ///<See: SoftResetBif.
    UINT32                                           Reserved_16_16:1 ; ///<
    UINT32                                             SoftResetVmc:1 ; ///<See: SoftResetBif.
    UINT32                                             SoftResetUvd:1 ; ///<See: SoftResetBif.
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                          SoftResetDrmdma:1 ; ///<See: SoftResetBif.
    UINT32                                             SoftResetTst:1 ; ///<See: SoftResetBif.
    UINT32                                           SoftResetRegbb:1 ; ///<See: SoftResetBif.
    UINT32                                             SoftResetOrb:1 ; ///<See: SoftResetBif.
    UINT32                                           Reserved_31_24:8 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_0398_STRUCT;

// **** FCRxFF30_0AE6 Register Definition ****
// Address
#define FCRxFF30_0AE6_ADDRESS                                   0xff300AE6

// Field Data
#define FCRxFF30_0AE6_RengExecuteNonsecureStartPtr_OFFSET            0
#define FCRxFF30_0AE6_RengExecuteNonsecureStartPtr_WIDTH             10
#define FCRxFF30_0AE6_RengExecuteNowMode_OFFSET                      10
#define FCRxFF30_0AE6_RengExecuteNowMode_WIDTH                       1
#define FCRxFF30_0AE6_RengExecuteOnRegUpdate_OFFSET                  11
#define FCRxFF30_0AE6_RengExecuteOnRegUpdate_WIDTH                   1
#define FCRxFF30_0AE6_RengSrbmCreditsMcd_OFFSET                      12
#define FCRxFF30_0AE6_RengSrbmCreditsMcd_WIDTH                       4
#define FCRxFF30_0AE6_StctrlStutterEn_OFFSET                         16
#define FCRxFF30_0AE6_StctrlStutterEn_WIDTH                          1
#define FCRxFF30_0AE6_StctrlGmcIdleThreshold_OFFSET                  17
#define FCRxFF30_0AE6_StctrlGmcIdleThreshold_WIDTH                   2
#define FCRxFF30_0AE6_StctrlSrbmIdleThreshold_OFFSET                 19
#define FCRxFF30_0AE6_StctrlSrbmIdleThreshold_WIDTH                  2
#define FCRxFF30_0AE6_StctrlIgnorePreSr_OFFSET                       21
#define FCRxFF30_0AE6_StctrlIgnorePreSr_WIDTH                        1
#define FCRxFF30_0AE6_StctrlIgnoreAllowStop_OFFSET                   22
#define FCRxFF30_0AE6_StctrlIgnoreAllowStop_WIDTH                    1
#define FCRxFF30_0AE6_StctrlIgnoreDramOffline_OFFSET                 23
#define FCRxFF30_0AE6_StctrlIgnoreDramOffline_WIDTH                  1
#define FCRxFF30_0AE6_StctrlIgnoreProtectionFault_OFFSET             24
#define FCRxFF30_0AE6_StctrlIgnoreProtectionFault_WIDTH              1
#define FCRxFF30_0AE6_StctrlDisableAllowSr_OFFSET                    25
#define FCRxFF30_0AE6_StctrlDisableAllowSr_WIDTH                     1
#define FCRxFF30_0AE6_StctrlDisableGmcOffline_OFFSET                 26
#define FCRxFF30_0AE6_StctrlDisableGmcOffline_WIDTH                  1
#define FCRxFF30_0AE6_CriticalRegsLock_OFFSET                        27
#define FCRxFF30_0AE6_CriticalRegsLock_WIDTH                         1
#define FCRxFF30_0AE6_SmuExecuteOnRegUpdate_OFFSET                   28
#define FCRxFF30_0AE6_SmuExecuteOnRegUpdate_WIDTH                    1
#define FCRxFF30_0AE6_AllowDeepSleepMode_OFFSET                      29
#define FCRxFF30_0AE6_AllowDeepSleepMode_WIDTH                       2
#define FCRxFF30_0AE6_Reserved_31_31_OFFSET                          31
#define FCRxFF30_0AE6_Reserved_31_31_WIDTH                           1

/// FCRxFF30_0AE6
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                             RengExecuteNonsecureStartPtr:10; ///<This pointer splits the RAM of Register ENGine into secure and not secure regions. The RAM cannot be updated below this pointer. Furthermore, any opcodes that result in register writes are either tagged as secure (below this pointer) or non-secure. The non-secure registers writes cannot overwrite any registers that have been locked by CRITICAL_REGS_LOCK or 'garlic request disable'. This field cannot be overwritten once CRITICAL_REGS_LOCK is set.
    UINT32                                       RengExecuteNowMode:1 ; ///<The opcodes found in the RAM of Register ENGine can be interpreted as either register writes (restore mode) or reads (save mode) based on this field if RENG was triggered by RENG_EXECUTE_NOW bit. If RENG execution was triggered by State Controller (STCTRL) then mode is signaled by STCTRL itself.
    UINT32                                   RengExecuteOnRegUpdate:1 ; ///<If set, STCTRL triggers RENG to execute opcodes in save mode every time GMC registers get updated. STCTRL allows some time (see STCTRL_SRBM_IDLE_THRESHOLD) before it really triggers RENG to save registers.
    UINT32                                       RengSrbmCreditsMcd:4 ; ///<Controls maximum number of credits RENG can use before it stalls sending register writes to MCD. max = RENG_SRBM_CREDITS_MCD + 1.
    UINT32                                          StctrlStutterEn:1 ; ///<Enables stutter mode. If STCTRL_STUTTER_EN is set without RENG_EXECUTE_ON_PWR_UP then stutter mode without power-gating is enabled.
    UINT32                                   StctrlGmcIdleThreshold:2 ; ///<Sets the threshold on how long should STCTRL wait after it halted all input interfaces to allow any requests that just missed 'halt' condition to make its way to GMC and become visible to STCTRL.
    UINT32                                  StctrlSrbmIdleThreshold:2 ; ///<Sets the threshold on how long should STCTRL wait after GMC registers got updated and SRBM has no more requests in pipe destined for GMC or any other targets that belong to the same broadcast group. See description on RENG_EXECUTE_ON_REG_UPDATE for more details.
    UINT32                                        StctrlIgnorePreSr:1 ; ///<If set (typically under debug mode), STCTRL ignores 'pre self refresh' signal from CNB when deciding if it should disconnect/power-gate GMC.
    UINT32                                    StctrlIgnoreAllowStop:1 ; ///<If set (typically under debug mode), STCTRL ignores 'display allow stop' signal from CNB when deciding if it should disconnect/power-gate GMC.
    UINT32                                  StctrlIgnoreDramOffline:1 ; ///<If set (typically under debug mode), STCTRL does not wait for 'dram offline' signal from CNB before disconnecting/power-gating GMC.
    UINT32                              StctrlIgnoreProtectionFault:1 ; ///<If set, STCTRL will ignore protection faults in vmc l2 when deciding if it can disconnect or power-gate GMC.
    UINT32                                     StctrlDisableAllowSr:1 ; ///<If set (typically under debug mode), STCTRL will always keep allow self refresh signal low to CNB even if it is disconnected/power-gated.
    UINT32                                  StctrlDisableGmcOffline:1 ; ///<If set (typically under debug mode), STCTRL will always keep GMC offline signal low to CNB even if it is disconnected/power-gated.
    UINT32                                         CriticalRegsLock:1 ; ///<Locks critical registers in GMC as well as RENG_EXECUTE_NONSECURE_START_PTR field.
    UINT32                                    SmuExecuteOnRegUpdate:1 ; ///<If set, STCTRL asserts interrupt to SMU every time GMC registers get updated.
    UINT32                                       AllowDeepSleepMode:2 ; ///<Configures how GMCON_SMU_pwr_allow_deep_sleep is asserted. This signal is used by SMU as one of the qualifiers to allow reducing SCLK to very low frequency.
    UINT32                                           Reserved_31_31:1 ; ///<
  } Field;
  UINT32 Value;
} FCRxFF30_0AE6_STRUCT;

// **** FCRxFF30_1512 Register Definition ****
// Address
#define FCRxFF30_1512_ADDRESS                                   0xff301512

// Type
#define FCRxFF30_1512_TYPE                                      TYPE_FCR
// Field Data
#define FCRxFF30_1512_OnDelay_OFFSET                            0
#define FCRxFF30_1512_OnDelay_WIDTH                             4
#define FCRxFF30_1512_OnDelay_MASK                              0xf
#define FCRxFF30_1512_OffHysteresis_OFFSET                      4
#define FCRxFF30_1512_OffHysteresis_WIDTH                       8
#define FCRxFF30_1512_OffHysteresis_MASK                        0xff0
#define FCRxFF30_1512_Reserved_29_12_OFFSET                     12
#define FCRxFF30_1512_Reserved_29_12_WIDTH                      18
#define FCRxFF30_1512_Reserved_29_12_MASK                       0x3ffff000
#define FCRxFF30_1512_SoftOverride1_OFFSET                      30
#define FCRxFF30_1512_SoftOverride1_WIDTH                       1
#define FCRxFF30_1512_SoftOverride1_MASK                        0x40000000
#define FCRxFF30_1512_SoftOverride0_OFFSET                      31
#define FCRxFF30_1512_SoftOverride0_WIDTH                       1
#define FCRxFF30_1512_SoftOverride0_MASK                        0x80000000

/// FCRxFF30_1512
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                  OnDelay:4 ; ///<Delay for local clock gating on.
    UINT32                                            OffHysteresis:8 ; ///<Hysteresis for local clock gating. This would filter out small turn off changes.
    UINT32                                           Reserved_29_12:18; ///<
    UINT32                                            SoftOverride1:1 ; ///<Soft OVERRIDE for core_oclk.
    UINT32                                            SoftOverride0:1 ; ///<Soft OVERRIDE for reg_oclk.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_1512_STRUCT;

// **** FCRxFF30_1B7C(GMMx6DF0) Register Definition ****
// Address
#define FCRxFF30_1B7C_ADDRESS                                   0xff301B7C

// Field Data
#define FCRxFF30_1B7C_Reserved_3_0_OFFSET                            0
#define FCRxFF30_1B7C_Reserved_3_0_WIDTH                             4
#define FCRxFF30_1B7C_Reserved_3_0_MASK                              0xf
#define FCRxFF30_1B7C_CrtcDispclkRDcfeGateDisable_OFFSET             4
#define FCRxFF30_1B7C_CrtcDispclkRDcfeGateDisable_WIDTH              1
#define FCRxFF30_1B7C_CrtcDispclkRDcfeGateDisable_MASK               0x10
#define FCRxFF30_1B7C_Reserved_7_5_OFFSET                            5
#define FCRxFF30_1B7C_Reserved_7_5_WIDTH                             3
#define FCRxFF30_1B7C_Reserved_7_5_MASK                              0xe0
#define FCRxFF30_1B7C_CrtcDispclkGDcpGateDisable_OFFSET              8
#define FCRxFF30_1B7C_CrtcDispclkGDcpGateDisable_WIDTH               1
#define FCRxFF30_1B7C_CrtcDispclkGDcpGateDisable_MASK                0x100
#define FCRxFF30_1B7C_Reserved_11_9_OFFSET                           9
#define FCRxFF30_1B7C_Reserved_11_9_WIDTH                            3
#define FCRxFF30_1B7C_Reserved_11_9_MASK                             0xe00
#define FCRxFF30_1B7C_CrtcDispclkGSclGateDisable_OFFSET              12
#define FCRxFF30_1B7C_CrtcDispclkGSclGateDisable_WIDTH               1
#define FCRxFF30_1B7C_CrtcDispclkGSclGateDisable_MASK                0x1000
#define FCRxFF30_1B7C_Reserved_31_13_OFFSET                          13
#define FCRxFF30_1B7C_Reserved_31_13_WIDTH                           19
#define FCRxFF30_1B7C_Reserved_31_13_MASK                            0xffffe000

/// FCRxFF30_1B7C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                              CrtcDispclkRDcfeGateDisable:1 ; ///<Disable clock gating for dispclk_r. See 2.5.5.3 [GPU and Root Complex Clock Gating].
    UINT32                                             Reserved_7_5:3 ; ///<
    UINT32                               CrtcDispclkGDcpGateDisable:1 ; ///<Disable clock gating for dispclk_g_dcp. See 2.5.5.3 [GPU and Root Complex Clock Gating].
    UINT32                                            Reserved_11_9:3 ; ///<
    UINT32                               CrtcDispclkGSclGateDisable:1 ; ///<Disable clock gating for dispclk_g_scl. See 2.5.5.3 [GPU and Root Complex Clock Gating].
    UINT32                                           Reserved_31_13:19; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_1B7C_STRUCT;

// **** FCRxFF30_1E7C(GMMx79F0) Register Definition ****
// Address
#define FCRxFF30_1E7C_ADDRESS                                   0xff301E7C

// Field Data
#define FCRxFF30_1E7C_Reserved_3_0_OFFSET                            0
#define FCRxFF30_1E7C_Reserved_3_0_WIDTH                             4
#define FCRxFF30_1E7C_Reserved_3_0_MASK                              0xf
#define FCRxFF30_1E7C_CrtcDispclkRDcfeGateDisable_OFFSET             4
#define FCRxFF30_1E7C_CrtcDispclkRDcfeGateDisable_WIDTH              1
#define FCRxFF30_1E7C_CrtcDispclkRDcfeGateDisable_MASK               0x10
#define FCRxFF30_1E7C_Reserved_7_5_OFFSET                            5
#define FCRxFF30_1E7C_Reserved_7_5_WIDTH                             3
#define FCRxFF30_1E7C_Reserved_7_5_MASK                              0xe0
#define FCRxFF30_1E7C_CrtcDispclkGDcpGateDisable_OFFSET              8
#define FCRxFF30_1E7C_CrtcDispclkGDcpGateDisable_WIDTH               1
#define FCRxFF30_1E7C_CrtcDispclkGDcpGateDisable_MASK                0x100
#define FCRxFF30_1E7C_Reserved_11_9_OFFSET                           9
#define FCRxFF30_1E7C_Reserved_11_9_WIDTH                            3
#define FCRxFF30_1E7C_Reserved_11_9_MASK                             0xe00
#define FCRxFF30_1E7C_CrtcDispclkGSclGateDisable_OFFSET              12
#define FCRxFF30_1E7C_CrtcDispclkGSclGateDisable_WIDTH               1
#define FCRxFF30_1E7C_CrtcDispclkGSclGateDisable_MASK                0x1000
#define FCRxFF30_1E7C_Reserved_31_13_OFFSET                          13
#define FCRxFF30_1E7C_Reserved_31_13_WIDTH                           19
#define FCRxFF30_1E7C_Reserved_31_13_MASK                            0xffffe000

/// FCRxFF30_1E7C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                             Reserved_3_0:4 ; ///<
    UINT32                              CrtcDispclkRDcfeGateDisable:1 ; ///<Disable clock gating for dispclk_r. See 2.5.5.3 [GPU and Root Complex Clock Gating].
    UINT32                                             Reserved_7_5:3 ; ///<
    UINT32                               CrtcDispclkGDcpGateDisable:1 ; ///<Disable clock gating for dispclk_g_dcp. See 2.5.5.3 [GPU and Root Complex Clock Gating].
    UINT32                                            Reserved_11_9:3 ; ///<
    UINT32                               CrtcDispclkGSclGateDisable:1 ; ///<Disable clock gating for dispclk_g_scl. See 2.5.5.3 [GPU and Root Complex Clock Gating].
    UINT32                                           Reserved_31_13:19; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} FCRxFF30_1E7C_STRUCT;






// THESE ARE LLANO DEFINED REGISTERS

// **** D18F2x084 Register Definition ****
// Address
#define D18F2x084_ADDRESS                                       0x84

// Type
#define D18F2x084_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x084_BurstCtrl_OFFSET                              0
#define D18F2x084_BurstCtrl_WIDTH                               2
#define D18F2x084_BurstCtrl_MASK                                0x3
#define D18F2x084_DrvImpCtrl_OFFSET                             2
#define D18F2x084_DrvImpCtrl_WIDTH                              2
#define D18F2x084_DrvImpCtrl_MASK                               0xc
#define D18F2x084_Twr_OFFSET                                    4
#define D18F2x084_Twr_WIDTH                                     3
#define D18F2x084_Twr_MASK                                      0x70
#define D18F2x084_DramTerm_OFFSET                               7
#define D18F2x084_DramTerm_WIDTH                                3
#define D18F2x084_DramTerm_MASK                                 0x380
#define D18F2x084_DramTermDyn_OFFSET                            10
#define D18F2x084_DramTermDyn_WIDTH                             2
#define D18F2x084_DramTermDyn_MASK                              0xc00
#define D18F2x084_Reserved_12_12_OFFSET                         12
#define D18F2x084_Reserved_12_12_WIDTH                          1
#define D18F2x084_Reserved_12_12_MASK                           0x1000
#define D18F2x084_Qoff_OFFSET                                   13
#define D18F2x084_Qoff_WIDTH                                    1
#define D18F2x084_Qoff_MASK                                     0x2000
#define D18F2x084_Reserved_17_14_OFFSET                         14
#define D18F2x084_Reserved_17_14_WIDTH                          4
#define D18F2x084_Reserved_17_14_MASK                           0x3c000
#define D18F2x084_ASR_OFFSET                                    18
#define D18F2x084_ASR_WIDTH                                     1
#define D18F2x084_ASR_MASK                                      0x40000
#define D18F2x084_SRT_OFFSET                                    19
#define D18F2x084_SRT_WIDTH                                     1
#define D18F2x084_SRT_MASK                                      0x80000
#define D18F2x084_Tcwl_OFFSET                                   20
#define D18F2x084_Tcwl_WIDTH                                    3
#define D18F2x084_Tcwl_MASK                                     0x700000
#define D18F2x084_PchgPDModeSel_OFFSET                          23
#define D18F2x084_PchgPDModeSel_WIDTH                           1
#define D18F2x084_PchgPDModeSel_MASK                            0x800000
#define D18F2x084_Reserved_25_24_OFFSET                         24
#define D18F2x084_Reserved_25_24_WIDTH                          2
#define D18F2x084_Reserved_25_24_MASK                           0x3000000
#define D18F2x084_Reserved_26_26_OFFSET                         26
#define D18F2x084_Reserved_26_26_WIDTH                          1
#define D18F2x084_Reserved_26_26_MASK                           0x4000000
#define D18F2x084_Reserved_31_27_OFFSET                         27
#define D18F2x084_Reserved_31_27_WIDTH                          5
#define D18F2x084_Reserved_31_27_MASK                           0xf8000000

/// D18F2x084
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                BurstCtrl:2 ; ///<Specifies the number of sequential beats of DQ related to one read or write command.
    UINT32                                               DrvImpCtrl:2 ; ///<This field specifies impedance of the DRAM output driver.
    UINT32                                                      Twr:3 ; ///<This specifies the minimum time from the last data write until the chip select bank precharge; this is the WR field in the DDR3 specification.
    UINT32                                                 DramTerm:3 ; ///<This specifies the programming of the DRAM nominal termination value when the MRS command is issued to configure MR1 during DDR3 DRAM initialization (D18F2x[1,0]90[InitDram]). A dedicated pin called ZQ is used to perform DRAM output driver impedance adjustment on DDR3 SDRAMs. RZQ is nominally 240 ohms to ground.
    UINT32                                              DramTermDyn:2 ; ///<This specifies the programming of the DRAM dynamic termination value for writes when the MRS command is issued to configure MR2 during DDR3 DRAM initialization (D18F2x[1,0]90[InitDram]). BIOS must enable dynamic termination when there are 2 DIMMs on a channel. A dedicated pin called ZQ is used to perform DRAM output driver impedance adjustment on DDR3 SDRAMs. RZQ is nominally 240 ohms to ground.
    UINT32                                           Reserved_12_12:1 ; ///<
    UINT32                                                     Qoff:1 ; ///<Specifies the QOFF value for the DRAM devices.
    UINT32                                           Reserved_17_14:4 ; ///<
    UINT32                                                      ASR:1 ; ///<Specifies the ASR mode for the DRAM devices.
    UINT32                                                      SRT:1 ; ///<Specifies the SRT range for the DRAM devices. If ASR=1 then SRT must be 0.
    UINT32                                                     Tcwl:3 ; ///<This specifies the number of clock cycles from internal write command to first write data in.
    UINT32                                            PchgPDModeSel:1 ; ///<
    UINT32                                           Reserved_25_24:2 ; ///<
    UINT32                                           Reserved_26_26:1 ; ///<
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x084_STRUCT;

// **** D18F2x08C Register Definition ****
// Address
#define D18F2x08C_ADDRESS                                       0x8c

// Type
#define D18F2x08C_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x08C_TrwtWB_OFFSET                                 0
#define D18F2x08C_TrwtWB_WIDTH                                  4
#define D18F2x08C_TrwtWB_MASK                                   0xf
#define D18F2x08C_TrwtTO_OFFSET                                 4
#define D18F2x08C_TrwtTO_WIDTH                                  4
#define D18F2x08C_TrwtTO_MASK                                   0xf0
#define D18F2x08C_Reserved_9_8_OFFSET                           8
#define D18F2x08C_Reserved_9_8_WIDTH                            2
#define D18F2x08C_Reserved_9_8_MASK                             0x300
#define D18F2x08C_Twrrd_1_0__OFFSET                             10
#define D18F2x08C_Twrrd_1_0__WIDTH                              2
#define D18F2x08C_Twrrd_1_0__MASK                               0xc00
#define D18F2x08C_Twrwr_1_0__OFFSET                             12
#define D18F2x08C_Twrwr_1_0__WIDTH                              2
#define D18F2x08C_Twrwr_1_0__MASK                               0x3000
#define D18F2x08C_Trdrd_1_0__OFFSET                             14
#define D18F2x08C_Trdrd_1_0__WIDTH                              2
#define D18F2x08C_Trdrd_1_0__MASK                               0xc000
#define D18F2x08C_Tref_OFFSET                                   16
#define D18F2x08C_Tref_WIDTH                                    2
#define D18F2x08C_Tref_MASK                                     0x30000
#define D18F2x08C_DisAutoRefresh_OFFSET                         18
#define D18F2x08C_DisAutoRefresh_WIDTH                          1
#define D18F2x08C_DisAutoRefresh_MASK                           0x40000
#define D18F2x08C_Reserved_19_19_OFFSET                         19
#define D18F2x08C_Reserved_19_19_WIDTH                          1
#define D18F2x08C_Reserved_19_19_MASK                           0x80000
#define D18F2x08C_Trfc0_OFFSET                                  20
#define D18F2x08C_Trfc0_WIDTH                                   3
#define D18F2x08C_Trfc0_MASK                                    0x700000
#define D18F2x08C_Trfc1_OFFSET                                  23
#define D18F2x08C_Trfc1_WIDTH                                   3
#define D18F2x08C_Trfc1_MASK                                    0x3800000
#define D18F2x08C_Reserved_31_26_OFFSET                         26
#define D18F2x08C_Reserved_31_26_WIDTH                          6
#define D18F2x08C_Reserved_31_26_MASK                           0xfc000000

/// D18F2x08C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   TrwtWB:4 ; ///<Specifies the minimum number of NCLK cycles from the last read operation seen by the DCT scheduler to the following write operation. The purpose of this field is to hold off write operations until several cycles have elapsed without a read cycle; this may result in a performance benefit. If opportunistic write bursting is disabled then DCT write bursting should be disabled by setting D18F2x11C[DctWrLimit] to 1Fh.
    UINT32                                                   TrwtTO:4 ; ///<This specifies the minimum number of cycles from the last clock of virtual CAS of a first read operation to the clock in which CAS is asserted for a following write operation. Time may need to be inserted to ensure there is no bus contention on bidirectional pins. It is important to consider the effects of D18F2x[1,0]84[Tcwl], D18F2x[1,0]88[Tcl] and the delays associated with D18F2x[1,0]9C_x0000_00[24:10] and D18F2x[1,0]9C_x0000_0[1:0]0[2:1] when specifying TrwtTO to avoid bus contention and to satisfy the timing requirements of the phy. See [The TrwtTO (Read-to-Write Turnaround for Data, DQS Contention)] 2.10.4.4.4.
    UINT32                                             Reserved_9_8:2 ; ///<
    UINT32                                               Twrrd_1_0_:2 ; ///<This specifies the minimum number of cycles from the last clock of virtual CAS of the first write operation to the clock in which CAS is asserted for a following read operation to a different DIMM. This field along with D18F2x[1,0]78[Twrrd[3:2]] combine to specify a 4-bit value, Twrrd[3:0].
    UINT32                                               Twrwr_1_0_:2 ; ///<Twrwr specifies the minimum number of cycles from the last clock of virtual CAS of the first write-burst operation to the clock in which CAS is asserted for a following write-burst operation to a different DIMM. This field along with D18F2x[1,0]78[Twrwr[3:2]] combine to specify a 4-bit value, Twrwr[3:0].
    UINT32                                               Trdrd_1_0_:2 ; ///<Trdrd specifies the minimum number of cycles from the last clock of virtual CAS of a first read-burst operation to the clock in which CAS is asserted for a following read-burst operation to a different DIMM. This field along with D18F2x[1,0]78[Trdrd[3:2]] combine to specify a 4-bit value, Trdrd[3:0].
    UINT32                                                     Tref:2 ; ///<This specifies the average time between refresh requests to all DRAM devices.
    UINT32                                           DisAutoRefresh:1 ; ///< BIOS must set this bit prior to DRAM initialization and it must remain set until DRAM training has completed. Subsequent register accesses may only set this bit during S3 exit or if the DRAM has been placed into self-refresh. Used during electrical characterization and debug to eliminate undesired commands on the bus.
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                                    Trfc0:3 ; ///<This specifies the minimum time from an auto-refresh command to the next valid command, except NOP or DES. DIMM numbers are specified by [The DRAM CS Base Address Registers] D18F2x[1,0][4C:40]. The recommended programming of this register varies based on DRAM density and speed.
    UINT32                                                    Trfc1:3 ; ///<This specifies the minimum time from an auto-refresh command to the next valid command, except NOP or DES. DIMM numbers are specified by [The DRAM CS Base Address Registers] D18F2x[1,0][4C:40]. The recommended programming of this register varies based on DRAM density and speed.See: Trfc0.
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x08C_STRUCT;

// **** D18F2x090 Register Definition ****
// Address
#define D18F2x090_ADDRESS                                       0x90

// Type
#define D18F2x090_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x090_InitDram_OFFSET                               0
#define D18F2x090_InitDram_WIDTH                                1
#define D18F2x090_InitDram_MASK                                 0x1
#define D18F2x090_ExitSelfRef_OFFSET                            1
#define D18F2x090_ExitSelfRef_WIDTH                             1
#define D18F2x090_ExitSelfRef_MASK                              0x2
#define D18F2x090_Reserved_8_2_OFFSET                           2
#define D18F2x090_Reserved_8_2_WIDTH                            7
#define D18F2x090_Reserved_8_2_MASK                             0x1fc
#define D18F2x090_Reserved_9_9_OFFSET                           9
#define D18F2x090_Reserved_9_9_WIDTH                            1
#define D18F2x090_Reserved_9_9_MASK                             0x200
#define D18F2x090_Reserved_16_10_OFFSET                         10
#define D18F2x090_Reserved_16_10_WIDTH                          7
#define D18F2x090_Reserved_16_10_MASK                           0x1fc00
#define D18F2x090_EnterSelfRef_OFFSET                           17
#define D18F2x090_EnterSelfRef_WIDTH                            1
#define D18F2x090_EnterSelfRef_MASK                             0x20000
#define D18F2x090_Reserved_19_18_OFFSET                         18
#define D18F2x090_Reserved_19_18_WIDTH                          2
#define D18F2x090_Reserved_19_18_MASK                           0xc0000
#define D18F2x090_DynPageCloseEn_OFFSET                         20
#define D18F2x090_DynPageCloseEn_WIDTH                          1
#define D18F2x090_DynPageCloseEn_MASK                           0x100000
#define D18F2x090_IdleCycInit_OFFSET                            21
#define D18F2x090_IdleCycInit_WIDTH                             2
#define D18F2x090_IdleCycInit_MASK                              0x600000
#define D18F2x090_ForceAutoPchg_OFFSET                          23
#define D18F2x090_ForceAutoPchg_WIDTH                           1
#define D18F2x090_ForceAutoPchg_MASK                            0x800000
#define D18F2x090_Reserved_24_24_OFFSET                         24
#define D18F2x090_Reserved_24_24_WIDTH                          1
#define D18F2x090_Reserved_24_24_MASK                           0x1000000
#define D18F2x090_EnDispAutoPrecharge_OFFSET                    25
#define D18F2x090_EnDispAutoPrecharge_WIDTH                     1
#define D18F2x090_EnDispAutoPrecharge_MASK                      0x2000000
#define D18F2x090_DbeSkidBufDis_OFFSET                          26
#define D18F2x090_DbeSkidBufDis_WIDTH                           1
#define D18F2x090_DbeSkidBufDis_MASK                            0x4000000
#define D18F2x090_DisDllShutdownSR_OFFSET                       27
#define D18F2x090_DisDllShutdownSR_WIDTH                        1
#define D18F2x090_DisDllShutdownSR_MASK                         0x8000000
#define D18F2x090_Reserved_28_28_OFFSET                         28
#define D18F2x090_Reserved_28_28_WIDTH                          1
#define D18F2x090_Reserved_28_28_MASK                           0x10000000
#define D18F2x090_Reserved_29_29_OFFSET                         29
#define D18F2x090_Reserved_29_29_WIDTH                          1
#define D18F2x090_Reserved_29_29_MASK                           0x20000000
#define D18F2x090_Reserved_31_30_OFFSET                         30
#define D18F2x090_Reserved_31_30_WIDTH                          2
#define D18F2x090_Reserved_31_30_MASK                           0xc0000000

/// D18F2x090
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 InitDram:1 ; ///<Writing a 1 to this bit causes the DRAM controller to execute the DRAM initialization sequence described by the JEDEC specification. This command should be executed by BIOS when booting from an unpowered state (ACPI S4, S5 or G3; not S3, suspend to RAM), after the DRAM controller configuration registers are properly initialized. This bit is read as a 1 while the DRAM initialization sequence is executing; it is read as 0 at all other times. When this bit is written to a 1, the new value of the other fields in this register that are updated concurrently are used in the initialization sequence. See 2.10.4.6 [DRAM Device Initialization].
    UINT32                                              ExitSelfRef:1 ; ///< This command should be executed by BIOS when returning from the suspend to RAM state after the DRAM controller configuration registers are properly initialized (see 2.5.8.1.1 [ACPI Suspend to RAM State (S3)]), or when self refresh is used during DRAM training (see DisDllShutdownSR and 2.10.4.7 [DRAM Training]). This bit should not be set if the DCT is disabled.
    UINT32                                             Reserved_8_2:7 ; ///<
    UINT32                                             Reserved_9_9:1 ; ///<
    UINT32                                           Reserved_16_10:7 ; ///<
    UINT32                                             EnterSelfRef:1 ; ///< See DisDllShutdownSR and 2.10.4.7 [DRAM Training]. NB P-state transitions must be disabled prior to setting this bit. See D18F6x90[NbPsCtrlDis] and See 2.5.5.1.3 [Software Controlled NB P-states].
    UINT32                                           Reserved_19_18:2 ; ///<
    UINT32                                           DynPageCloseEn:1 ; ///< If DynPageCloseEn=1 then: A 2b up/down counter (QualIdleCycLimit[i][1:0]) is defined per table entry that specifies the threshold in MemClks when the page is closed. There are the following cases: 1.	QualIdleCycLimit[i][1:0] is not changed for a hit on an open page. 2.	QualIdleCycLimit[i][1:0] is incremented by a hit on a closed page. (Max is 11b) 3.	QualIdleCycLimit[i][1:0] is decremented by a page conflict (miss on an open page). (Min is 00b) QualIdleCycLimit[i][1:0], for a miss on a closed page, the LRU entry is loaded with IdleCycInit[1:0].
    UINT32                                              IdleCycInit:2 ; ///<This specifies the initial number of MEMCLK cycles during which an open page of DRAM is not accessed before it may be closed by the dynamic page close logic. This field is ignored if D18F2x[1,0]90[DynPageCloseEn] = 0.
    UINT32                                            ForceAutoPchg:1 ; ///< This may be preferred in situations where power savings is favored over performance.
    UINT32                                           Reserved_24_24:1 ; ///<
    UINT32                                      EnDispAutoPrecharge:1 ; ///<
    UINT32                                            DbeSkidBufDis:1 ; ///< The skid buffer allows the arbiter to pick a lower relative priority page miss ahead of a page hit, so that Trcd penalty for subsequent CAS is hidden behind the ready/requested CAS.
    UINT32                                         DisDllShutdownSR:1 ; ///<See 2.5.7.1 [DRAM Self-Refresh]. This bit must be programmed the same on both DCTs. For software initiated self-refresh, to optimize self-refresh exit latency at the expense of power, this bit may be set prior to setting EnterSelfRef and restored after the subsequent ExitSelfRef completes.
    UINT32                                           Reserved_28_28:1 ; ///<LN was DisSscClkGateData.
    UINT32                                           Reserved_29_29:1 ; ///<LN was DisSscClkGateCmdAddr.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x090_STRUCT;

// **** D18F2x094 Register Definition ****
// Address
#define D18F2x094_ADDRESS                                       0x94

// Type
#define D18F2x094_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x094_MemClkFreq_OFFSET                             0
#define D18F2x094_MemClkFreq_WIDTH                              5
#define D18F2x094_MemClkFreq_MASK                               0x1f
#define D18F2x094_Reserved_6_5_OFFSET                           5
#define D18F2x094_Reserved_6_5_WIDTH                            2
#define D18F2x094_Reserved_6_5_MASK                             0x60
#define D18F2x094_MemClkFreqVal_OFFSET                          7
#define D18F2x094_MemClkFreqVal_WIDTH                           1
#define D18F2x094_MemClkFreqVal_MASK                            0x80
#define D18F2x094_Reserved_9_8_OFFSET                           8
#define D18F2x094_Reserved_9_8_WIDTH                            2
#define D18F2x094_Reserved_9_8_MASK                             0x300
#define D18F2x094_ZqcsInterval_OFFSET                           10
#define D18F2x094_ZqcsInterval_WIDTH                            2
#define D18F2x094_ZqcsInterval_MASK                             0xc00
#define D18F2x094_Reserved_13_12_OFFSET                         12
#define D18F2x094_Reserved_13_12_WIDTH                          2
#define D18F2x094_Reserved_13_12_MASK                           0x3000
#define D18F2x094_DisDramInterface_OFFSET                       14
#define D18F2x094_DisDramInterface_WIDTH                        1
#define D18F2x094_DisDramInterface_MASK                         0x4000
#define D18F2x094_PowerDownEn_OFFSET                            15
#define D18F2x094_PowerDownEn_WIDTH                             1
#define D18F2x094_PowerDownEn_MASK                              0x8000
#define D18F2x094_PowerDownMode_OFFSET                          16
#define D18F2x094_PowerDownMode_WIDTH                           1
#define D18F2x094_PowerDownMode_MASK                            0x10000
#define D18F2x094_Reserved_19_17_OFFSET                         17
#define D18F2x094_Reserved_19_17_WIDTH                          3
#define D18F2x094_Reserved_19_17_MASK                           0xe0000
#define D18F2x094_SlowAccessMode_OFFSET                         20
#define D18F2x094_SlowAccessMode_WIDTH                          1
#define D18F2x094_SlowAccessMode_MASK                           0x100000
#define D18F2x094_Reserved_21_21_OFFSET                         21
#define D18F2x094_Reserved_21_21_WIDTH                          1
#define D18F2x094_Reserved_21_21_MASK                           0x200000
#define D18F2x094_BankSwizzleMode_OFFSET                        22
#define D18F2x094_BankSwizzleMode_WIDTH                         1
#define D18F2x094_BankSwizzleMode_MASK                          0x400000
#define D18F2x094_ProcOdtDis_OFFSET                             23
#define D18F2x094_ProcOdtDis_WIDTH                              1
#define D18F2x094_ProcOdtDis_MASK                               0x800000
#define D18F2x094_DcqBypassMax_OFFSET                           24
#define D18F2x094_DcqBypassMax_WIDTH                            4
#define D18F2x094_DcqBypassMax_MASK                             0xf000000
#define D18F2x094_FourActWindow_OFFSET                          28
#define D18F2x094_FourActWindow_WIDTH                           4
#define D18F2x094_FourActWindow_MASK                            0xf0000000

/// D18F2x094
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               MemClkFreq:5 ; ///<This field specifies the frequency and rate of the DRAM interface (MEMCLK). The rate defined below is twice the frequency. See D18F3xE8[DdrMaxRate]. Frequencies in internal text and marked as Reserved are not POR. 400Mhz is lowest supported frequency(non-tester).
    UINT32                                             Reserved_6_5:2 ; ///< Reserved for future expansion of MemClkFreq.
    UINT32                                            MemClkFreqVal:1 ; ///<System BIOS should set this bit when setting up D18F2x[1,0]94[MemClkFreq] to the proper value. This indicates to the DRAM controller that it may start driving MEMCLK at the proper frequency. This bit should not be set if the DCT is disabled. BIOS must change each DCT'��s operating frequency in order. See 2.10.4.6.
    UINT32                                             Reserved_9_8:2 ; ///<
    UINT32                                             ZqcsInterval:2 ; ///<This field specifies the programmable interval for the controller to send out the DRAM ZQ calibration short command.
    UINT32                                           Reserved_13_12:2 ; ///<
    UINT32                                         DisDramInterface:1 ; ///< This bit must be set if there are no DIMMs connected to the DCT. If this bit is set, BIOS must also disable the phy for the channel. See D18F2x[1,0]9C_x0000_000B[DynModeChange]. If this bit is set, BIOS must program D18F2x[1,0]9C_x0000_000C[CKETri]=11b for the channel a minimum of 24 MEMCLKs before setting DisDramInterface or D18F2x[1,0]9C_x0000_000B[DynModeChange].
    UINT32                                              PowerDownEn:1 ; ///< When in power down mode, if all pages of the DRAMs associated with a CKE pin are closed, then these parts are placed in power down mode. Only pre-charge power down mode is supported, not active power down mode.
    UINT32                                            PowerDownMode:1 ; ///<This specifies how a DIMM enters power down mode, when enabled by D18F2x[1,0]94[PowerDownEn]. A DIMM enters power down mode when the DCT deasserts the CKE pin to that DIMM. The command and address signals tristate one MEMCLK after CKE deasserts. There are two CKE pins per DRAM channel. For each channel: Bit	Description 0b	Channel CKE control mode. The DRAM channel is placed in power down mode when all chip selects associated with the channel are idle. Both CKE pins for the channel operate in lock step, in terms of placing the channel DIMMs in power down mode. 1b	Chip select CKE control mode. A chip select or pair of chip selects is placed in power down mode when no transactions are pending for the chip select(s). This mode is expected to be used in mobile systems:  - CKE0 is associated with CS0 in 2-rank systems. - CKE1 is associated with CS1 in 2-rank systems. See D18F2x[1,0][4C:40].
    UINT32                                           Reserved_19_17:3 ; ///<
    UINT32                                           SlowAccessMode:1 ; ///<e., these signals are driven for two MEMCLK cycles rather than one. 2T mode may be needed in order to meet electrical requirements of certain DIMM speed and loading configurations. If tester mode, this field must be set to 0.
    UINT32                                           Reserved_21_21:1 ; ///<
    UINT32                                          BankSwizzleMode:1 ; ///< Each of the bank address bits, as specified in Table 160 of D18F2x[1,0]80, are remapped as follows:  Define X as a bank address bit (e.g., X=15 if the bank bit is specified to be address bit 15). Define S(n) as the state of address bit n (0 or 1) and B as the remapped bank address bit. Then, B= S(X) ^ S(X + 3) ^ S(X + 6); for an 8-bank DRAM.  For example, encoding 02h of Table 160 would be remapped from bank[2:0]={A15, A14, A13} to the following for a 64-bit DCT: Bank[2:0] = {A15 ^ A18 ^ A21, A14 ^ A17 ^ A20, A13 ^ A16 ^ A19}.
    UINT32                                               ProcOdtDis:1 ; ///< See D18F2x[1,0]9C_x0000_0000[ProcOdt] for ODT definitions.
    UINT32                                             DcqBypassMax:4 ; ///<The DRAM controller arbiter normally allows transactions to pass other transactions in order to optimize DRAM bandwidth. This field specifies the maximum number of times that the oldest memory-access request in the DRAM controller queue may be bypassed before the arbiter decision is overridden and the oldest memory-access request is serviced instead.
    UINT32                                            FourActWindow:4 ; ///<Specifies the rolling tFAW window during which no more than 4 banks in an 8-bank device are activated.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x094_STRUCT;

// **** D18F2x098 Register Definition ****
// Address
#define D18F2x098_ADDRESS                                       0x98

// Type
#define D18F2x098_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x098_DctOffset_OFFSET                              0
#define D18F2x098_DctOffset_WIDTH                               30
#define D18F2x098_DctOffset_MASK                                0x3fffffff
#define D18F2x098_DctAccessWrite_OFFSET                         30
#define D18F2x098_DctAccessWrite_WIDTH                          1
#define D18F2x098_DctAccessWrite_MASK                           0x40000000
#define D18F2x098_DctAccessDone_OFFSET                          31
#define D18F2x098_DctAccessDone_WIDTH                           1
#define D18F2x098_DctAccessDone_MASK                            0x80000000

/// D18F2x098
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                DctOffset:30; ///<
    UINT32                                           DctAccessWrite:1 ; ///<
    UINT32                                            DctAccessDone:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x098_STRUCT;

// **** D18F2x09C_x0D0FE00A Register Definition ****
// Address
#define D18F2x09C_x0D0FE00A_ADDRESS                             0x0D0FE00A

// Type
#define D18F2x09C_x0D0FE00A_TYPE                                TYPE_D18F2x9C
// Field Data
#define D18F2x09C_x0D0FE00A_Reserved_3_0_OFFSET                 0
#define D18F2x09C_x0D0FE00A_Reserved_3_0_WIDTH                  4
#define D18F2x09C_x0D0FE00A_Reserved_3_0_MASK                   0xF
#define D18F2x09C_x0D0FE00A_SkewMemClk_OFFSET                   4
#define D18F2x09C_x0D0FE00A_SkewMemClk_WIDTH                    1
#define D18F2x09C_x0D0FE00A_SkewMemClk_MASK                     0x10
#define D18F2x09C_x0D0FE00A_Reserved_11_5_OFFSET                5
#define D18F2x09C_x0D0FE00A_Reserved_11_5_WIDTH                 7
#define D18F2x09C_x0D0FE00A_Reserved_11_5_MASK                  0xFE0
#define D18F2x09C_x0D0FE00A_CsrPhySrPllPdMode_OFFSET            12
#define D18F2x09C_x0D0FE00A_CsrPhySrPllPdMode_WIDTH             2
#define D18F2x09C_x0D0FE00A_CsrPhySrPllPdMode_MASK              0x3000
#define D18F2x09C_x0D0FE00A_SelCsrPllPdMode_OFFSET              14
#define D18F2x09C_x0D0FE00A_SelCsrPllPdMode_WIDTH               1
#define D18F2x09C_x0D0FE00A_SelCsrPllPdMode_MASK                0x4000
#define D18F2x09C_x0D0FE00A_Reserved_31_15_OFFSET               15
#define D18F2x09C_x0D0FE00A_Reserved_31_15_WIDTH                17
#define D18F2x09C_x0D0FE00A_Reserved_31_15_MASK                 0xFFFF8000

/// D18F2x09C_x0D0FE00A
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                              Reserved_3_0:4; ///<
    UINT32                                                SkewMemClk:1; ///<
    UINT32                                             Reserved_11_5:7; ///<
    UINT32                                         CsrPhySrPllPdMode:2; ///<
    UINT32                                           SelCsrPllPdMode:1; ///<
    UINT32                                            Reserved_31_15:17; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x09C_x0D0FE00A_STRUCT;

// **** D18F2x0F0 Register Definition ****
// Address
#define D18F2x0F0_ADDRESS                                       0xf0

// Type
#define D18F2x0F0_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x0F0_DctOffset_OFFSET                              0
#define D18F2x0F0_DctOffset_WIDTH                               28
#define D18F2x0F0_DctOffset_MASK                                0xfffffff
#define D18F2x0F0_Reserved_29_28_OFFSET                         28
#define D18F2x0F0_Reserved_29_28_WIDTH                          2
#define D18F2x0F0_Reserved_29_28_MASK                           0x30000000
#define D18F2x0F0_DctAccessWrite_OFFSET                         30
#define D18F2x0F0_DctAccessWrite_WIDTH                          1
#define D18F2x0F0_DctAccessWrite_MASK                           0x40000000
#define D18F2x0F0_DctAccessDone_OFFSET                          31
#define D18F2x0F0_DctAccessDone_WIDTH                           1
#define D18F2x0F0_DctAccessDone_MASK                            0x80000000

/// D18F2x0F0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                DctOffset:28; ///<
    UINT32                                           Reserved_29_28:2 ; ///<
    UINT32                                           DctAccessWrite:1 ; ///<
    UINT32                                            DctAccessDone:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x0F0_STRUCT;

// **** D18F2x0F4_x40 Register Definition ****
// Address
#define D18F2x0F4_x40_ADDRESS                                   0x40

// Type
#define D18F2x0F4_x40_TYPE                                      TYPE_D18F2x0F4
// Field Data
#define D18F2x0F4_x40_Trcd_OFFSET                               0
#define D18F2x0F4_x40_Trcd_WIDTH                                4
#define D18F2x0F4_x40_Trcd_MASK                                 0xf
#define D18F2x0F4_x40_Reserved_7_4_OFFSET                       4
#define D18F2x0F4_x40_Reserved_7_4_WIDTH                        4
#define D18F2x0F4_x40_Reserved_7_4_MASK                         0xf0
#define D18F2x0F4_x40_Trp_OFFSET                                8
#define D18F2x0F4_x40_Trp_WIDTH                                 4
#define D18F2x0F4_x40_Trp_MASK                                  0xf00
#define D18F2x0F4_x40_Reserved_15_12_OFFSET                     12
#define D18F2x0F4_x40_Reserved_15_12_WIDTH                      4
#define D18F2x0F4_x40_Reserved_15_12_MASK                       0xf000
#define D18F2x0F4_x40_Tras_OFFSET                               16
#define D18F2x0F4_x40_Tras_WIDTH                                5
#define D18F2x0F4_x40_Tras_MASK                                 0x1f0000
#define D18F2x0F4_x40_Reserved_23_21_OFFSET                     21
#define D18F2x0F4_x40_Reserved_23_21_WIDTH                      3
#define D18F2x0F4_x40_Reserved_23_21_MASK                       0xe00000
#define D18F2x0F4_x40_Trc_OFFSET                                24
#define D18F2x0F4_x40_Trc_WIDTH                                 6
#define D18F2x0F4_x40_Trc_MASK                                  0x3f000000
#define D18F2x0F4_x40_Reserved_31_30_OFFSET                     30
#define D18F2x0F4_x40_Reserved_31_30_WIDTH                      2
#define D18F2x0F4_x40_Reserved_31_30_MASK                       0xc0000000

/// D18F2x0F4_x40
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Trcd:4 ; ///<Specifies the time in memory clock cycles from an activate command to a read/write command, both to the same bank.
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                                      Trp:4 ; ///<Specifies the minimum time in memory clock cycles from a precharge command to an activate command or auto-refresh command, both to the same bank.
    UINT32                                           Reserved_15_12:4 ; ///<
    UINT32                                                     Tras:5 ; ///<Specifies the minimum time in memory clock cycles from an activate command to a precharge command, both to the same chip select bank.
    UINT32                                           Reserved_23_21:3 ; ///<
    UINT32                                                      Trc:6 ; ///<Specifies the minimum time in memory clock cycles from an activate command to another activate command or an auto-refresh command, all to the same chip select bank.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x0F4_x40_STRUCT;

// **** D18F2x0F4_x41 Register Definition ****
// Address
#define D18F2x0F4_x41_ADDRESS                                   0x41

// Type
#define D18F2x0F4_x41_TYPE                                      TYPE_D18F2x0F4
// Field Data
#define D18F2x0F4_x41_Trtp_OFFSET                               0
#define D18F2x0F4_x41_Trtp_WIDTH                                3
#define D18F2x0F4_x41_Trtp_MASK                                 0x7
#define D18F2x0F4_x41_Reserved_7_3_OFFSET                       3
#define D18F2x0F4_x41_Reserved_7_3_WIDTH                        5
#define D18F2x0F4_x41_Reserved_7_3_MASK                         0xf8
#define D18F2x0F4_x41_Trrd_OFFSET                               8
#define D18F2x0F4_x41_Trrd_WIDTH                                3
#define D18F2x0F4_x41_Trrd_MASK                                 0x700
#define D18F2x0F4_x41_Reserved_15_11_OFFSET                     11
#define D18F2x0F4_x41_Reserved_15_11_WIDTH                      5
#define D18F2x0F4_x41_Reserved_15_11_MASK                       0xf800
#define D18F2x0F4_x41_Twtr_OFFSET                               16
#define D18F2x0F4_x41_Twtr_WIDTH                                3
#define D18F2x0F4_x41_Twtr_MASK                                 0x70000
#define D18F2x0F4_x41_Reserved_31_19_OFFSET                     19
#define D18F2x0F4_x41_Reserved_31_19_WIDTH                      13
#define D18F2x0F4_x41_Reserved_31_19_MASK                       0xfff80000

/// D18F2x0F4_x41
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                     Trtp:3 ; ///<Specifies the earliest time in memory clock cycles a page can be closed after having been read. Satisfying this parameter ensures read data is not lost due to a premature precharge.
    UINT32                                             Reserved_7_3:5 ; ///<
    UINT32                                                     Trrd:3 ; ///<Specifies the minimum time in memory clock cycles between activate commands to different chip select banks.
    UINT32                                           Reserved_15_11:5 ; ///<
    UINT32                                                     Twtr:3 ; ///<Specifies the minimum number of memory clock cycles from a write operation to a read operation, both to the same chip select. This is measured from the rising clock edge following the last non-masked data strobe of the write to the rising clock edge of the next read command.
    UINT32                                           Reserved_31_19:13; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x0F4_x41_STRUCT;

// **** D18F2x184 Register Definition ****
// Address
#define D18F2x184_ADDRESS                                       0x184

// Type
#define D18F2x184_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x184_BurstCtrl_OFFSET                              0
#define D18F2x184_BurstCtrl_WIDTH                               2
#define D18F2x184_BurstCtrl_MASK                                0x3
#define D18F2x184_DrvImpCtrl_OFFSET                             2
#define D18F2x184_DrvImpCtrl_WIDTH                              2
#define D18F2x184_DrvImpCtrl_MASK                               0xc
#define D18F2x184_Twr_OFFSET                                    4
#define D18F2x184_Twr_WIDTH                                     3
#define D18F2x184_Twr_MASK                                      0x70
#define D18F2x184_DramTerm_OFFSET                               7
#define D18F2x184_DramTerm_WIDTH                                3
#define D18F2x184_DramTerm_MASK                                 0x380
#define D18F2x184_DramTermDyn_OFFSET                            10
#define D18F2x184_DramTermDyn_WIDTH                             2
#define D18F2x184_DramTermDyn_MASK                              0xc00
#define D18F2x184_Reserved_12_12_OFFSET                         12
#define D18F2x184_Reserved_12_12_WIDTH                          1
#define D18F2x184_Reserved_12_12_MASK                           0x1000
#define D18F2x184_Qoff_OFFSET                                   13
#define D18F2x184_Qoff_WIDTH                                    1
#define D18F2x184_Qoff_MASK                                     0x2000
#define D18F2x184_Reserved_17_14_OFFSET                         14
#define D18F2x184_Reserved_17_14_WIDTH                          4
#define D18F2x184_Reserved_17_14_MASK                           0x3c000
#define D18F2x184_ASR_OFFSET                                    18
#define D18F2x184_ASR_WIDTH                                     1
#define D18F2x184_ASR_MASK                                      0x40000
#define D18F2x184_SRT_OFFSET                                    19
#define D18F2x184_SRT_WIDTH                                     1
#define D18F2x184_SRT_MASK                                      0x80000
#define D18F2x184_Tcwl_OFFSET                                   20
#define D18F2x184_Tcwl_WIDTH                                    3
#define D18F2x184_Tcwl_MASK                                     0x700000
#define D18F2x184_PchgPDModeSel_OFFSET                          23
#define D18F2x184_PchgPDModeSel_WIDTH                           1
#define D18F2x184_PchgPDModeSel_MASK                            0x800000
#define D18F2x184_Reserved_25_24_OFFSET                         24
#define D18F2x184_Reserved_25_24_WIDTH                          2
#define D18F2x184_Reserved_25_24_MASK                           0x3000000
#define D18F2x184_Reserved_26_26_OFFSET                         26
#define D18F2x184_Reserved_26_26_WIDTH                          1
#define D18F2x184_Reserved_26_26_MASK                           0x4000000
#define D18F2x184_Reserved_31_27_OFFSET                         27
#define D18F2x184_Reserved_31_27_WIDTH                          5
#define D18F2x184_Reserved_31_27_MASK                           0xf8000000

/// D18F2x184
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                BurstCtrl:2 ; ///<Specifies the number of sequential beats of DQ related to one read or write command.
    UINT32                                               DrvImpCtrl:2 ; ///<This field specifies impedance of the DRAM output driver.
    UINT32                                                      Twr:3 ; ///<This specifies the minimum time from the last data write until the chip select bank precharge; this is the WR field in the DDR3 specification.
    UINT32                                                 DramTerm:3 ; ///<This specifies the programming of the DRAM nominal termination value when the MRS command is issued to configure MR1 during DDR3 DRAM initialization (D18F2x[1,0]90[InitDram]). A dedicated pin called ZQ is used to perform DRAM output driver impedance adjustment on DDR3 SDRAMs. RZQ is nominally 240 ohms to ground.
    UINT32                                              DramTermDyn:2 ; ///<This specifies the programming of the DRAM dynamic termination value for writes when the MRS command is issued to configure MR2 during DDR3 DRAM initialization (D18F2x[1,0]90[InitDram]). BIOS must enable dynamic termination when there are 2 DIMMs on a channel. A dedicated pin called ZQ is used to perform DRAM output driver impedance adjustment on DDR3 SDRAMs. RZQ is nominally 240 ohms to ground.
    UINT32                                           Reserved_12_12:1 ; ///<
    UINT32                                                     Qoff:1 ; ///<Specifies the QOFF value for the DRAM devices.
    UINT32                                           Reserved_17_14:4 ; ///<
    UINT32                                                      ASR:1 ; ///<Specifies the ASR mode for the DRAM devices.
    UINT32                                                      SRT:1 ; ///<Specifies the SRT range for the DRAM devices. If ASR=1 then SRT must be 0.
    UINT32                                                     Tcwl:3 ; ///<This specifies the number of clock cycles from internal write command to first write data in.
    UINT32                                            PchgPDModeSel:1 ; ///<
    UINT32                                           Reserved_25_24:2 ; ///<
    UINT32                                           Reserved_26_26:1 ; ///<
    UINT32                                           Reserved_31_27:5 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x184_STRUCT;

// **** D18F2x18C Register Definition ****
// Address
#define D18F2x18C_ADDRESS                                       0x18c

// Type
#define D18F2x18C_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x18C_TrwtWB_OFFSET                                 0
#define D18F2x18C_TrwtWB_WIDTH                                  4
#define D18F2x18C_TrwtWB_MASK                                   0xf
#define D18F2x18C_TrwtTO_OFFSET                                 4
#define D18F2x18C_TrwtTO_WIDTH                                  4
#define D18F2x18C_TrwtTO_MASK                                   0xf0
#define D18F2x18C_Reserved_9_8_OFFSET                           8
#define D18F2x18C_Reserved_9_8_WIDTH                            2
#define D18F2x18C_Reserved_9_8_MASK                             0x300
#define D18F2x18C_Twrrd_1_0__OFFSET                             10
#define D18F2x18C_Twrrd_1_0__WIDTH                              2
#define D18F2x18C_Twrrd_1_0__MASK                               0xc00
#define D18F2x18C_Twrwr_1_0__OFFSET                             12
#define D18F2x18C_Twrwr_1_0__WIDTH                              2
#define D18F2x18C_Twrwr_1_0__MASK                               0x3000
#define D18F2x18C_Trdrd_1_0__OFFSET                             14
#define D18F2x18C_Trdrd_1_0__WIDTH                              2
#define D18F2x18C_Trdrd_1_0__MASK                               0xc000
#define D18F2x18C_Tref_OFFSET                                   16
#define D18F2x18C_Tref_WIDTH                                    2
#define D18F2x18C_Tref_MASK                                     0x30000
#define D18F2x18C_DisAutoRefresh_OFFSET                         18
#define D18F2x18C_DisAutoRefresh_WIDTH                          1
#define D18F2x18C_DisAutoRefresh_MASK                           0x40000
#define D18F2x18C_Reserved_19_19_OFFSET                         19
#define D18F2x18C_Reserved_19_19_WIDTH                          1
#define D18F2x18C_Reserved_19_19_MASK                           0x80000
#define D18F2x18C_Trfc0_OFFSET                                  20
#define D18F2x18C_Trfc0_WIDTH                                   3
#define D18F2x18C_Trfc0_MASK                                    0x700000
#define D18F2x18C_Trfc1_OFFSET                                  23
#define D18F2x18C_Trfc1_WIDTH                                   3
#define D18F2x18C_Trfc1_MASK                                    0x3800000
#define D18F2x18C_Reserved_31_26_OFFSET                         26
#define D18F2x18C_Reserved_31_26_WIDTH                          6
#define D18F2x18C_Reserved_31_26_MASK                           0xfc000000

/// D18F2x18C
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                   TrwtWB:4 ; ///<Specifies the minimum number of NCLK cycles from the last read operation seen by the DCT scheduler to the following write operation. The purpose of this field is to hold off write operations until several cycles have elapsed without a read cycle; this may result in a performance benefit. If opportunistic write bursting is disabled then DCT write bursting should be disabled by setting D18F2x11C[DctWrLimit] to 1Fh.
    UINT32                                                   TrwtTO:4 ; ///<This specifies the minimum number of cycles from the last clock of virtual CAS of a first read operation to the clock in which CAS is asserted for a following write operation. Time may need to be inserted to ensure there is no bus contention on bidirectional pins. It is important to consider the effects of D18F2x[1,0]84[Tcwl], D18F2x[1,0]88[Tcl] and the delays associated with D18F2x[1,0]9C_x0000_00[24:10] and D18F2x[1,0]9C_x0000_0[1:0]0[2:1] when specifying TrwtTO to avoid bus contention and to satisfy the timing requirements of the phy. See [The TrwtTO (Read-to-Write Turnaround for Data, DQS Contention)] 2.10.4.4.4.
    UINT32                                             Reserved_9_8:2 ; ///<
    UINT32                                               Twrrd_1_0_:2 ; ///<This specifies the minimum number of cycles from the last clock of virtual CAS of the first write operation to the clock in which CAS is asserted for a following read operation to a different DIMM. This field along with D18F2x[1,0]78[Twrrd[3:2]] combine to specify a 4-bit value, Twrrd[3:0].
    UINT32                                               Twrwr_1_0_:2 ; ///<Twrwr specifies the minimum number of cycles from the last clock of virtual CAS of the first write-burst operation to the clock in which CAS is asserted for a following write-burst operation to a different DIMM. This field along with D18F2x[1,0]78[Twrwr[3:2]] combine to specify a 4-bit value, Twrwr[3:0].
    UINT32                                               Trdrd_1_0_:2 ; ///<Trdrd specifies the minimum number of cycles from the last clock of virtual CAS of a first read-burst operation to the clock in which CAS is asserted for a following read-burst operation to a different DIMM. This field along with D18F2x[1,0]78[Trdrd[3:2]] combine to specify a 4-bit value, Trdrd[3:0].
    UINT32                                                     Tref:2 ; ///<This specifies the average time between refresh requests to all DRAM devices.
    UINT32                                           DisAutoRefresh:1 ; ///< BIOS must set this bit prior to DRAM initialization and it must remain set until DRAM training has completed. Subsequent register accesses may only set this bit during S3 exit or if the DRAM has been placed into self-refresh. Used during electrical characterization and debug to eliminate undesired commands on the bus.
    UINT32                                           Reserved_19_19:1 ; ///<
    UINT32                                                    Trfc0:3 ; ///<This specifies the minimum time from an auto-refresh command to the next valid command, except NOP or DES. DIMM numbers are specified by [The DRAM CS Base Address Registers] D18F2x[1,0][4C:40]. The recommended programming of this register varies based on DRAM density and speed.
    UINT32                                                    Trfc1:3 ; ///<This specifies the minimum time from an auto-refresh command to the next valid command, except NOP or DES. DIMM numbers are specified by [The DRAM CS Base Address Registers] D18F2x[1,0][4C:40]. The recommended programming of this register varies based on DRAM density and speed.See: Trfc0.
    UINT32                                           Reserved_31_26:6 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x18C_STRUCT;

// **** D18F2x190 Register Definition ****
// Address
#define D18F2x190_ADDRESS                                       0x190

// Type
#define D18F2x190_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x190_InitDram_OFFSET                               0
#define D18F2x190_InitDram_WIDTH                                1
#define D18F2x190_InitDram_MASK                                 0x1
#define D18F2x190_ExitSelfRef_OFFSET                            1
#define D18F2x190_ExitSelfRef_WIDTH                             1
#define D18F2x190_ExitSelfRef_MASK                              0x2
#define D18F2x190_Reserved_8_2_OFFSET                           2
#define D18F2x190_Reserved_8_2_WIDTH                            7
#define D18F2x190_Reserved_8_2_MASK                             0x1fc
#define D18F2x190_Reserved_9_9_OFFSET                           9
#define D18F2x190_Reserved_9_9_WIDTH                            1
#define D18F2x190_Reserved_9_9_MASK                             0x200
#define D18F2x190_Reserved_16_10_OFFSET                         10
#define D18F2x190_Reserved_16_10_WIDTH                          7
#define D18F2x190_Reserved_16_10_MASK                           0x1fc00
#define D18F2x190_EnterSelfRef_OFFSET                           17
#define D18F2x190_EnterSelfRef_WIDTH                            1
#define D18F2x190_EnterSelfRef_MASK                             0x20000
#define D18F2x190_Reserved_19_18_OFFSET                         18
#define D18F2x190_Reserved_19_18_WIDTH                          2
#define D18F2x190_Reserved_19_18_MASK                           0xc0000
#define D18F2x190_DynPageCloseEn_OFFSET                         20
#define D18F2x190_DynPageCloseEn_WIDTH                          1
#define D18F2x190_DynPageCloseEn_MASK                           0x100000
#define D18F2x190_IdleCycInit_OFFSET                            21
#define D18F2x190_IdleCycInit_WIDTH                             2
#define D18F2x190_IdleCycInit_MASK                              0x600000
#define D18F2x190_ForceAutoPchg_OFFSET                          23
#define D18F2x190_ForceAutoPchg_WIDTH                           1
#define D18F2x190_ForceAutoPchg_MASK                            0x800000
#define D18F2x190_Reserved_24_24_OFFSET                         24
#define D18F2x190_Reserved_24_24_WIDTH                          1
#define D18F2x190_Reserved_24_24_MASK                           0x1000000
#define D18F2x190_EnDispAutoPrecharge_OFFSET                    25
#define D18F2x190_EnDispAutoPrecharge_WIDTH                     1
#define D18F2x190_EnDispAutoPrecharge_MASK                      0x2000000
#define D18F2x190_DbeSkidBufDis_OFFSET                          26
#define D18F2x190_DbeSkidBufDis_WIDTH                           1
#define D18F2x190_DbeSkidBufDis_MASK                            0x4000000
#define D18F2x190_DisDllShutdownSR_OFFSET                       27
#define D18F2x190_DisDllShutdownSR_WIDTH                        1
#define D18F2x190_DisDllShutdownSR_MASK                         0x8000000
#define D18F2x190_Reserved_28_28_OFFSET                         28
#define D18F2x190_Reserved_28_28_WIDTH                          1
#define D18F2x190_Reserved_28_28_MASK                           0x10000000
#define D18F2x190_Reserved_29_29_OFFSET                         29
#define D18F2x190_Reserved_29_29_WIDTH                          1
#define D18F2x190_Reserved_29_29_MASK                           0x20000000
#define D18F2x190_Reserved_31_30_OFFSET                         30
#define D18F2x190_Reserved_31_30_WIDTH                          2
#define D18F2x190_Reserved_31_30_MASK                           0xc0000000

/// D18F2x190
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                 InitDram:1 ; ///<Writing a 1 to this bit causes the DRAM controller to execute the DRAM initialization sequence described by the JEDEC specification. This command should be executed by BIOS when booting from an unpowered state (ACPI S4, S5 or G3; not S3, suspend to RAM), after the DRAM controller configuration registers are properly initialized. This bit is read as a 1 while the DRAM initialization sequence is executing; it is read as 0 at all other times. When this bit is written to a 1, the new value of the other fields in this register that are updated concurrently are used in the initialization sequence. See 2.10.4.6 [DRAM Device Initialization].
    UINT32                                              ExitSelfRef:1 ; ///< This command should be executed by BIOS when returning from the suspend to RAM state after the DRAM controller configuration registers are properly initialized (see 2.5.8.1.1 [ACPI Suspend to RAM State (S3)]), or when self refresh is used during DRAM training (see DisDllShutdownSR and 2.10.4.7 [DRAM Training]). This bit should not be set if the DCT is disabled.
    UINT32                                             Reserved_8_2:7 ; ///<
    UINT32                                             Reserved_9_9:1 ; ///<
    UINT32                                           Reserved_16_10:7 ; ///<
    UINT32                                             EnterSelfRef:1 ; ///< See DisDllShutdownSR and 2.10.4.7 [DRAM Training]. NB P-state transitions must be disabled prior to setting this bit. See D18F6x90[NbPsCtrlDis] and See 2.5.5.1.3 [Software Controlled NB P-states].
    UINT32                                           Reserved_19_18:2 ; ///<
    UINT32                                           DynPageCloseEn:1 ; ///< If DynPageCloseEn=1 then: A 2b up/down counter (QualIdleCycLimit[i][1:0]) is defined per table entry that specifies the threshold in MemClks when the page is closed. There are the following cases: 1.	QualIdleCycLimit[i][1:0] is not changed for a hit on an open page. 2.	QualIdleCycLimit[i][1:0] is incremented by a hit on a closed page. (Max is 11b) 3.	QualIdleCycLimit[i][1:0] is decremented by a page conflict (miss on an open page). (Min is 00b) QualIdleCycLimit[i][1:0], for a miss on a closed page, the LRU entry is loaded with IdleCycInit[1:0].
    UINT32                                              IdleCycInit:2 ; ///<This specifies the initial number of MEMCLK cycles during which an open page of DRAM is not accessed before it may be closed by the dynamic page close logic. This field is ignored if D18F2x[1,0]90[DynPageCloseEn] = 0.
    UINT32                                            ForceAutoPchg:1 ; ///< This may be preferred in situations where power savings is favored over performance.
    UINT32                                           Reserved_24_24:1 ; ///<
    UINT32                                      EnDispAutoPrecharge:1 ; ///<
    UINT32                                            DbeSkidBufDis:1 ; ///< The skid buffer allows the arbiter to pick a lower relative priority page miss ahead of a page hit, so that Trcd penalty for subsequent CAS is hidden behind the ready/requested CAS.
    UINT32                                         DisDllShutdownSR:1 ; ///<See 2.5.7.1 [DRAM Self-Refresh]. This bit must be programmed the same on both DCTs. For software initiated self-refresh, to optimize self-refresh exit latency at the expense of power, this bit may be set prior to setting EnterSelfRef and restored after the subsequent ExitSelfRef completes.
    UINT32                                           Reserved_28_28:1 ; ///<LN was DisSscClkGateData.
    UINT32                                           Reserved_29_29:1 ; ///<LN was DisSscClkGateCmdAddr.
    UINT32                                           Reserved_31_30:2 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x190_STRUCT;

// **** D18F2x194 Register Definition ****
// Address
#define D18F2x194_ADDRESS                                       0x194

// Type
#define D18F2x194_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x194_MemClkFreq_OFFSET                             0
#define D18F2x194_MemClkFreq_WIDTH                              5
#define D18F2x194_MemClkFreq_MASK                               0x1f
#define D18F2x194_Reserved_6_5_OFFSET                           5
#define D18F2x194_Reserved_6_5_WIDTH                            2
#define D18F2x194_Reserved_6_5_MASK                             0x60
#define D18F2x194_MemClkFreqVal_OFFSET                          7
#define D18F2x194_MemClkFreqVal_WIDTH                           1
#define D18F2x194_MemClkFreqVal_MASK                            0x80
#define D18F2x194_Reserved_9_8_OFFSET                           8
#define D18F2x194_Reserved_9_8_WIDTH                            2
#define D18F2x194_Reserved_9_8_MASK                             0x300
#define D18F2x194_ZqcsInterval_OFFSET                           10
#define D18F2x194_ZqcsInterval_WIDTH                            2
#define D18F2x194_ZqcsInterval_MASK                             0xc00
#define D18F2x194_Reserved_13_12_OFFSET                         12
#define D18F2x194_Reserved_13_12_WIDTH                          2
#define D18F2x194_Reserved_13_12_MASK                           0x3000
#define D18F2x194_DisDramInterface_OFFSET                       14
#define D18F2x194_DisDramInterface_WIDTH                        1
#define D18F2x194_DisDramInterface_MASK                         0x4000
#define D18F2x194_PowerDownEn_OFFSET                            15
#define D18F2x194_PowerDownEn_WIDTH                             1
#define D18F2x194_PowerDownEn_MASK                              0x8000
#define D18F2x194_PowerDownMode_OFFSET                          16
#define D18F2x194_PowerDownMode_WIDTH                           1
#define D18F2x194_PowerDownMode_MASK                            0x10000
#define D18F2x194_Reserved_19_17_OFFSET                         17
#define D18F2x194_Reserved_19_17_WIDTH                          3
#define D18F2x194_Reserved_19_17_MASK                           0xe0000
#define D18F2x194_SlowAccessMode_OFFSET                         20
#define D18F2x194_SlowAccessMode_WIDTH                          1
#define D18F2x194_SlowAccessMode_MASK                           0x100000
#define D18F2x194_Reserved_21_21_OFFSET                         21
#define D18F2x194_Reserved_21_21_WIDTH                          1
#define D18F2x194_Reserved_21_21_MASK                           0x200000
#define D18F2x194_BankSwizzleMode_OFFSET                        22
#define D18F2x194_BankSwizzleMode_WIDTH                         1
#define D18F2x194_BankSwizzleMode_MASK                          0x400000
#define D18F2x194_ProcOdtDis_OFFSET                             23
#define D18F2x194_ProcOdtDis_WIDTH                              1
#define D18F2x194_ProcOdtDis_MASK                               0x800000
#define D18F2x194_DcqBypassMax_OFFSET                           24
#define D18F2x194_DcqBypassMax_WIDTH                            4
#define D18F2x194_DcqBypassMax_MASK                             0xf000000
#define D18F2x194_FourActWindow_OFFSET                          28
#define D18F2x194_FourActWindow_WIDTH                           4
#define D18F2x194_FourActWindow_MASK                            0xf0000000

/// D18F2x194
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                               MemClkFreq:5 ; ///<This field specifies the frequency and rate of the DRAM interface (MEMCLK). The rate defined below is twice the frequency. See D18F3xE8[DdrMaxRate]. Frequencies in internal text and marked as Reserved are not POR. 400Mhz is lowest supported frequency(non-tester).
    UINT32                                             Reserved_6_5:2 ; ///< Reserved for future expansion of MemClkFreq.
    UINT32                                            MemClkFreqVal:1 ; ///<System BIOS should set this bit when setting up D18F2x[1,0]94[MemClkFreq] to the proper value. This indicates to the DRAM controller that it may start driving MEMCLK at the proper frequency. This bit should not be set if the DCT is disabled. BIOS must change each DCT'��s operating frequency in order. See 2.10.4.6.
    UINT32                                             Reserved_9_8:2 ; ///<
    UINT32                                             ZqcsInterval:2 ; ///<This field specifies the programmable interval for the controller to send out the DRAM ZQ calibration short command.
    UINT32                                           Reserved_13_12:2 ; ///<
    UINT32                                         DisDramInterface:1 ; ///< This bit must be set if there are no DIMMs connected to the DCT. If this bit is set, BIOS must also disable the phy for the channel. See D18F2x[1,0]9C_x0000_000B[DynModeChange]. If this bit is set, BIOS must program D18F2x[1,0]9C_x0000_000C[CKETri]=11b for the channel a minimum of 24 MEMCLKs before setting DisDramInterface or D18F2x[1,0]9C_x0000_000B[DynModeChange].
    UINT32                                              PowerDownEn:1 ; ///< When in power down mode, if all pages of the DRAMs associated with a CKE pin are closed, then these parts are placed in power down mode. Only pre-charge power down mode is supported, not active power down mode.
    UINT32                                            PowerDownMode:1 ; ///<This specifies how a DIMM enters power down mode, when enabled by D18F2x[1,0]94[PowerDownEn]. A DIMM enters power down mode when the DCT deasserts the CKE pin to that DIMM. The command and address signals tristate one MEMCLK after CKE deasserts. There are two CKE pins per DRAM channel. For each channel: Bit	Description 0b	Channel CKE control mode. The DRAM channel is placed in power down mode when all chip selects associated with the channel are idle. Both CKE pins for the channel operate in lock step, in terms of placing the channel DIMMs in power down mode. 1b	Chip select CKE control mode. A chip select or pair of chip selects is placed in power down mode when no transactions are pending for the chip select(s). This mode is expected to be used in mobile systems:  - CKE0 is associated with CS0 in 2-rank systems. - CKE1 is associated with CS1 in 2-rank systems. See D18F2x[1,0][4C:40].
    UINT32                                           Reserved_19_17:3 ; ///<
    UINT32                                           SlowAccessMode:1 ; ///<e., these signals are driven for two MEMCLK cycles rather than one. 2T mode may be needed in order to meet electrical requirements of certain DIMM speed and loading configurations. If tester mode, this field must be set to 0.
    UINT32                                           Reserved_21_21:1 ; ///<
    UINT32                                          BankSwizzleMode:1 ; ///< Each of the bank address bits, as specified in Table 160 of D18F2x[1,0]80, are remapped as follows:  Define X as a bank address bit (e.g., X=15 if the bank bit is specified to be address bit 15). Define S(n) as the state of address bit n (0 or 1) and B as the remapped bank address bit. Then, B= S(X) ^ S(X + 3) ^ S(X + 6); for an 8-bank DRAM.  For example, encoding 02h of Table 160 would be remapped from bank[2:0]={A15, A14, A13} to the following for a 64-bit DCT: Bank[2:0] = {A15 ^ A18 ^ A21, A14 ^ A17 ^ A20, A13 ^ A16 ^ A19}.
    UINT32                                               ProcOdtDis:1 ; ///< See D18F2x[1,0]9C_x0000_0000[ProcOdt] for ODT definitions.
    UINT32                                             DcqBypassMax:4 ; ///<The DRAM controller arbiter normally allows transactions to pass other transactions in order to optimize DRAM bandwidth. This field specifies the maximum number of times that the oldest memory-access request in the DRAM controller queue may be bypassed before the arbiter decision is overridden and the oldest memory-access request is serviced instead.
    UINT32                                            FourActWindow:4 ; ///<Specifies the rolling tFAW window during which no more than 4 banks in an 8-bank device are activated.
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x194_STRUCT;

// **** D18F2x198 Register Definition ****
// Address
#define D18F2x198_ADDRESS                                       0x198

// Type
#define D18F2x198_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x198_DctOffset_OFFSET                              0
#define D18F2x198_DctOffset_WIDTH                               30
#define D18F2x198_DctOffset_MASK                                0x3fffffff
#define D18F2x198_DctAccessWrite_OFFSET                         30
#define D18F2x198_DctAccessWrite_WIDTH                          1
#define D18F2x198_DctAccessWrite_MASK                           0x40000000
#define D18F2x198_DctAccessDone_OFFSET                          31
#define D18F2x198_DctAccessDone_WIDTH                           1
#define D18F2x198_DctAccessDone_MASK                            0x80000000

/// D18F2x198
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                DctOffset:30; ///<
    UINT32                                           DctAccessWrite:1 ; ///<
    UINT32                                            DctAccessDone:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x198_STRUCT;

// **** D18F2x1F0 Register Definition ****
// Address
#define D18F2x1F0_ADDRESS                                       0x1f0

// Type
#define D18F2x1F0_TYPE                                          TYPE_D18F2
// Field Data
#define D18F2x1F0_DctOffset_OFFSET                              0
#define D18F2x1F0_DctOffset_WIDTH                               28
#define D18F2x1F0_DctOffset_MASK                                0xfffffff
#define D18F2x1F0_Reserved_29_28_OFFSET                         28
#define D18F2x1F0_Reserved_29_28_WIDTH                          2
#define D18F2x1F0_Reserved_29_28_MASK                           0x30000000
#define D18F2x1F0_DctAccessWrite_OFFSET                         30
#define D18F2x1F0_DctAccessWrite_WIDTH                          1
#define D18F2x1F0_DctAccessWrite_MASK                           0x40000000
#define D18F2x1F0_DctAccessDone_OFFSET                          31
#define D18F2x1F0_DctAccessDone_WIDTH                           1
#define D18F2x1F0_DctAccessDone_MASK                            0x80000000

/// D18F2x1F0
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                                DctOffset:28; ///<
    UINT32                                           Reserved_29_28:2 ; ///<
    UINT32                                           DctAccessWrite:1 ; ///<
    UINT32                                            DctAccessDone:1 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} D18F2x1F0_STRUCT;

// **** SMUx0B_x8498 Register Definition ****
// Address
#define SMUx0B_x8498_ADDRESS                                    0x8498

// Field Data
#define SMUx0B_x8498_ConditionalBF_1_0_OFFSET                   0
#define SMUx0B_x8498_ConditionalBF_1_0_WIDTH                    2
#define SMUx0B_x8498_ConditionalBF_1_0_MASK                     0x3
#define SMUx0B_x8498_ConditionalBF_3_2_OFFSET                   2
#define SMUx0B_x8498_ConditionalBF_3_2_WIDTH                    2
#define SMUx0B_x8498_ConditionalBF_3_2_MASK                     0xc
#define SMUx0B_x8498_Reserved_7_4_OFFSET                        4
#define SMUx0B_x8498_Reserved_7_4_WIDTH                         4
#define SMUx0B_x8498_Reserved_7_4_MASK                          0xf0
#define SMUx0B_x8498_ConditionalBF_9_8_OFFSET                   8
#define SMUx0B_x8498_ConditionalBF_9_8_WIDTH                    2
#define SMUx0B_x8498_ConditionalBF_9_8_MASK                     0x300
#define SMUx0B_x8498_ConditionalBF_11_10_OFFSET                 10
#define SMUx0B_x8498_ConditionalBF_11_10_WIDTH                  2
#define SMUx0B_x8498_ConditionalBF_11_10_MASK                   0xc00
#define SMUx0B_x8498_Reserved_15_12_OFFSET                      12
#define SMUx0B_x8498_Reserved_15_12_WIDTH                       4
#define SMUx0B_x8498_Reserved_15_12_MASK                        0xf000
#define SMUx0B_x8498_BaseVid_5_OFFSET                           16
#define SMUx0B_x8498_BaseVid_5_WIDTH                            2
#define SMUx0B_x8498_BaseVid_5_MASK                             0x30000
#define SMUx0B_x8498_TolExcdVid_5_OFFSET                        18
#define SMUx0B_x8498_TolExcdVid_5_WIDTH                         2
#define SMUx0B_x8498_TolExcdVid_5_MASK                          0xc0000
#define SMUx0B_x8498_Reserved_23_20_OFFSET                      20
#define SMUx0B_x8498_Reserved_23_20_WIDTH                       4
#define SMUx0B_x8498_Reserved_23_20_MASK                        0xf00000
#define SMUx0B_x8498_BaseVid_4_OFFSET                           24
#define SMUx0B_x8498_BaseVid_4_WIDTH                            2
#define SMUx0B_x8498_BaseVid_4_MASK                             0x3000000
#define SMUx0B_x8498_TolExcdVid_4_OFFSET                        26
#define SMUx0B_x8498_TolExcdVid_4_WIDTH                         2
#define SMUx0B_x8498_TolExcdVid_4_MASK                          0xc000000
#define SMUx0B_x8498_Reserved_31_28_OFFSET                      28
#define SMUx0B_x8498_Reserved_31_28_WIDTH                       4
#define SMUx0B_x8498_Reserved_31_28_MASK                        0xf0000000

/// SMUx0B_x8498
typedef union {
  struct {                                                              ///<sub-structure for bitfield definition
    UINT32                                        ConditionalBF_1_0:2 ; ///<
    UINT32                                        ConditionalBF_3_2:2 ; ///<
    UINT32                                             Reserved_7_4:4 ; ///<
    UINT32                                        ConditionalBF_9_8:2 ; ///<
    UINT32                                      ConditionalBF_11_10:2 ; ///<
    UINT32                                           Reserved_15_12:4 ; ///<
    UINT32                                                BaseVid_5:2 ; ///<5.5.1.3.3. See SMUx0B_x84[9C:94:step4][1:0].
    UINT32                                             TolExcdVid_5:2 ; ///<5.5.1.3.3. See SMUx0B_x84[9C:94:step4][3:2].
    UINT32                                           Reserved_23_20:4 ; ///<
    UINT32                                                BaseVid_4:2 ; ///<5.5.1.3.3. See SMUx0B_x84[9C:94:step4][1:0].
    UINT32                                             TolExcdVid_4:2 ; ///<5.5.1.3.3. See SMUx0B_x84[9C:94:step4][3:2].
    UINT32                                           Reserved_31_28:4 ; ///<
  } Field;                                                              ///< Register bit fields
  UINT32 Value;                                                         ///< Register value
} SMUx0B_x8498_STRUCT;


#endif
